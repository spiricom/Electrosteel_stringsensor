
electrosteel_string_H750ZB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8d0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0800cb68  0800cb68  0001cb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2f4  0800d2f4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d2f4  0800d2f4  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d2f4  0800d2f4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2f4  0800d2f4  0001d2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2f8  0800d2f8  0001d2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018ec4  2000007c  0800d378  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20018f40  0800d378  00028f40  2**0
                  ALLOC
 11 .RAM_D1       000493e0  24000000  24000000  00030000  2**5
                  ALLOC
 12 .RAM_D2       000041a0  30000000  30000000  00030000  2**5
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c68c  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003dce  00000000  00000000  0004c736  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001d90  00000000  00000000  00050508  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c28  00000000  00000000  00052298  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003b00f  00000000  00000000  00053ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000160ea  00000000  00000000  0008eecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00180a14  00000000  00000000  000a4fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002259cd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000088d0  00000000  00000000  00225a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000007c 	.word	0x2000007c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cb50 	.word	0x0800cb50

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000080 	.word	0x20000080
 80002d4:	0800cb50 	.word	0x0800cb50

080002d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80002e0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <SCB_EnableICache+0x3c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80002ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80002f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <SCB_EnableICache+0x3c>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a06      	ldr	r2, [pc, #24]	; (8000314 <SCB_EnableICache+0x3c>)
 80002fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000304:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <SCB_EnableDCache+0x7c>)
 8000320:	2200      	movs	r2, #0
 8000322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000326:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <SCB_EnableDCache+0x7c>)
 800032c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000330:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	0b5b      	lsrs	r3, r3, #13
 8000336:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800033a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	08db      	lsrs	r3, r3, #3
 8000340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000344:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	015a      	lsls	r2, r3, #5
 800034a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800034e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000350:	68ba      	ldr	r2, [r7, #8]
 8000352:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000354:	490f      	ldr	r1, [pc, #60]	; (8000394 <SCB_EnableDCache+0x7c>)
 8000356:	4313      	orrs	r3, r2
 8000358:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	1e5a      	subs	r2, r3, #1
 8000360:	60ba      	str	r2, [r7, #8]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1ef      	bne.n	8000346 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	1e5a      	subs	r2, r3, #1
 800036a:	60fa      	str	r2, [r7, #12]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d1e5      	bne.n	800033c <SCB_EnableDCache+0x24>
 8000370:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <SCB_EnableDCache+0x7c>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a06      	ldr	r2, [pc, #24]	; (8000394 <SCB_EnableDCache+0x7c>)
 800037a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800037e:	6153      	str	r3, [r2, #20]
 8000380:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000384:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000388:	bf00      	nop
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08a      	sub	sp, #40	; 0x28
 800039c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800039e:	f7ff ff9b 	bl	80002d8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80003a2:	f7ff ffb9 	bl	8000318 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a6:	f001 fbdd 	bl	8001b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003aa:	f000 f8e7 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ae:	f000 fcb5 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 80003b2:	f000 fc7b 	bl	8000cac <MX_DMA_Init>
  MX_ADC1_Init();
 80003b6:	f000 f9cf 	bl	8000758 <MX_ADC1_Init>
  MX_ADC2_Init();
 80003ba:	f000 faa7 	bl	800090c <MX_ADC2_Init>
  MX_HRTIM_Init();
 80003be:	f000 fb6d 	bl	8000a9c <MX_HRTIM_Init>
  MX_SPI1_Init();
 80003c2:	f000 fbcd 	bl	8000b60 <MX_SPI1_Init>
  MX_SPI2_Init();
 80003c6:	f000 fc21 	bl	8000c0c <MX_SPI2_Init>
  MX_RNG_Init();
 80003ca:	f000 fbb3 	bl	8000b34 <MX_RNG_Init>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80003ce:	eef1 3a10 	vmrs	r3, fpscr
 80003d2:	607b      	str	r3, [r7, #4]
  return(result);
 80003d4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN 2 */
  uint32_t tempFPURegisterVal = __get_FPSCR();
 80003d6:	60fb      	str	r3, [r7, #12]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	eee1 3a10 	vmsr	fpscr, r3
  __set_FPSCR(tempFPURegisterVal);

  for (int i = 0; i < 16; i++)
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
 80003ee:	e00c      	b.n	800040a <main+0x72>
  {
	  SPI_TX[i] = counter++;
 80003f0:	4b49      	ldr	r3, [pc, #292]	; (8000518 <main+0x180>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	b2d1      	uxtb	r1, r2
 80003f8:	4a47      	ldr	r2, [pc, #284]	; (8000518 <main+0x180>)
 80003fa:	7011      	strb	r1, [r2, #0]
 80003fc:	4947      	ldr	r1, [pc, #284]	; (800051c <main+0x184>)
 80003fe:	69fa      	ldr	r2, [r7, #28]
 8000400:	440a      	add	r2, r1
 8000402:	7013      	strb	r3, [r2, #0]
  for (int i = 0; i < 16; i++)
 8000404:	69fb      	ldr	r3, [r7, #28]
 8000406:	3301      	adds	r3, #1
 8000408:	61fb      	str	r3, [r7, #28]
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	2b0f      	cmp	r3, #15
 800040e:	ddef      	ble.n	80003f0 <main+0x58>
  }

  for (int i = 0; i < 20; i++)
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
 8000414:	e007      	b.n	8000426 <main+0x8e>
  {
	  SPI_PLUCK_TX[i] = 0;
 8000416:	4a42      	ldr	r2, [pc, #264]	; (8000520 <main+0x188>)
 8000418:	69bb      	ldr	r3, [r7, #24]
 800041a:	4413      	add	r3, r2
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 20; i++)
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	3301      	adds	r3, #1
 8000424:	61bb      	str	r3, [r7, #24]
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	2b13      	cmp	r3, #19
 800042a:	ddf4      	ble.n	8000416 <main+0x7e>
  }

  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 32);
 800042c:	2220      	movs	r2, #32
 800042e:	493d      	ldr	r1, [pc, #244]	; (8000524 <main+0x18c>)
 8000430:	483d      	ldr	r0, [pc, #244]	; (8000528 <main+0x190>)
 8000432:	f009 f833 	bl	800949c <HAL_SPI_Receive_DMA>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	2140      	movs	r1, #64	; 0x40
 800043a:	483c      	ldr	r0, [pc, #240]	; (800052c <main+0x194>)
 800043c:	f005 fcb4 	bl	8005da8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000440:	200a      	movs	r0, #10
 8000442:	f001 fc21 	bl	8001c88 <HAL_Delay>

  LEAF_init(&leaf, SAMPLE_RATE, AUDIO_FRAME_SIZE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8000446:	4b3a      	ldr	r3, [pc, #232]	; (8000530 <main+0x198>)
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	4b3a      	ldr	r3, [pc, #232]	; (8000534 <main+0x19c>)
 800044c:	4a3a      	ldr	r2, [pc, #232]	; (8000538 <main+0x1a0>)
 800044e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000452:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800053c <main+0x1a4>
 8000456:	483a      	ldr	r0, [pc, #232]	; (8000540 <main+0x1a8>)
 8000458:	f00a ff58 	bl	800b30c <LEAF_init>

  for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	e04c      	b.n	80004fc <main+0x164>
  {
  	tThreshold_init(&threshold[i],120.0f, 220.0f, &leaf);
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	4a37      	ldr	r2, [pc, #220]	; (8000544 <main+0x1ac>)
 8000468:	4413      	add	r3, r2
 800046a:	4935      	ldr	r1, [pc, #212]	; (8000540 <main+0x1a8>)
 800046c:	eddf 0a36 	vldr	s1, [pc, #216]	; 8000548 <main+0x1b0>
 8000470:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800054c <main+0x1b4>
 8000474:	4618      	mov	r0, r3
 8000476:	f009 fee0 	bl	800a23a <tThreshold_init>
  	tSlide_init(&fastSlide[i],1.0f,500.0f, &leaf); //1110
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4a34      	ldr	r2, [pc, #208]	; (8000550 <main+0x1b8>)
 8000480:	4413      	add	r3, r2
 8000482:	492f      	ldr	r1, [pc, #188]	; (8000540 <main+0x1a8>)
 8000484:	eddf 0a33 	vldr	s1, [pc, #204]	; 8000554 <main+0x1bc>
 8000488:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800048c:	4618      	mov	r0, r3
 800048e:	f009 ff3d 	bl	800a30c <tSlide_init>
  	tSlide_init(&slowSlide[i],1.0f,500.0f, &leaf); //1110
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	4a30      	ldr	r2, [pc, #192]	; (8000558 <main+0x1c0>)
 8000498:	4413      	add	r3, r2
 800049a:	4929      	ldr	r1, [pc, #164]	; (8000540 <main+0x1a8>)
 800049c:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8000554 <main+0x1bc>
 80004a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f009 ff31 	bl	800a30c <tSlide_init>

  	for (int j = 0; j < FILTER_ORDER; j++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
 80004ae:	e01f      	b.n	80004f0 <main+0x158>
  	{
  		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 2000.0f, 0.6f, &leaf);
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	005a      	lsls	r2, r3, #1
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	4413      	add	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4a28      	ldr	r2, [pc, #160]	; (800055c <main+0x1c4>)
 80004bc:	4413      	add	r3, r2
 80004be:	4a20      	ldr	r2, [pc, #128]	; (8000540 <main+0x1a8>)
 80004c0:	eddf 0a27 	vldr	s1, [pc, #156]	; 8000560 <main+0x1c8>
 80004c4:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8000564 <main+0x1cc>
 80004c8:	2101      	movs	r1, #1
 80004ca:	4618      	mov	r0, r3
 80004cc:	f00a f860 	bl	800a590 <tVZFilter_init>
  		tHighpass_init(&opticalHighpass[i][j], 80.0f, &leaf);
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	005a      	lsls	r2, r3, #1
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	4413      	add	r3, r2
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	4a23      	ldr	r2, [pc, #140]	; (8000568 <main+0x1d0>)
 80004dc:	4413      	add	r3, r2
 80004de:	4918      	ldr	r1, [pc, #96]	; (8000540 <main+0x1a8>)
 80004e0:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800056c <main+0x1d4>
 80004e4:	4618      	mov	r0, r3
 80004e6:	f009 ffdd 	bl	800a4a4 <tHighpass_init>
  	for (int j = 0; j < FILTER_ORDER; j++)
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	3301      	adds	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	dddc      	ble.n	80004b0 <main+0x118>
  for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	2b09      	cmp	r3, #9
 8000500:	ddaf      	ble.n	8000462 <main+0xca>
  	}
  }



  LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 8000502:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000506:	481a      	ldr	r0, [pc, #104]	; (8000570 <main+0x1d8>)
 8000508:	f00a fc7e 	bl	800ae08 <LEAF_generate_atodb>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 800050c:	2250      	movs	r2, #80	; 0x50
 800050e:	4919      	ldr	r1, [pc, #100]	; (8000574 <main+0x1dc>)
 8000510:	4819      	ldr	r0, [pc, #100]	; (8000578 <main+0x1e0>)
 8000512:	f001 ff6f 	bl	80023f4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	e7fe      	b.n	8000516 <main+0x17e>
 8000518:	20000564 	.word	0x20000564
 800051c:	30000000 	.word	0x30000000
 8000520:	30000040 	.word	0x30000040
 8000524:	30000020 	.word	0x30000020
 8000528:	20000104 	.word	0x20000104
 800052c:	58020800 	.word	0x58020800
 8000530:	08000e15 	.word	0x08000e15
 8000534:	000493e0 	.word	0x000493e0
 8000538:	24000000 	.word	0x24000000
 800053c:	473b8000 	.word	0x473b8000
 8000540:	200001b4 	.word	0x200001b4
 8000544:	2000018c 	.word	0x2000018c
 8000548:	435c0000 	.word	0x435c0000
 800054c:	42f00000 	.word	0x42f00000
 8000550:	20018f14 	.word	0x20018f14
 8000554:	43fa0000 	.word	0x43fa0000
 8000558:	2000056c 	.word	0x2000056c
 800055c:	20018c70 	.word	0x20018c70
 8000560:	3f19999a 	.word	0x3f19999a
 8000564:	44fa0000 	.word	0x44fa0000
 8000568:	200001fc 	.word	0x200001fc
 800056c:	42a00000 	.word	0x42a00000
 8000570:	200005d0 	.word	0x200005d0
 8000574:	30004060 	.word	0x30004060
 8000578:	2000040c 	.word	0x2000040c

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0cc      	sub	sp, #304	; 0x130
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000586:	224c      	movs	r2, #76	; 0x4c
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f00a ff58 	bl	800b440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000594:	2220      	movs	r2, #32
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f00a ff51 	bl	800b440 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4618      	mov	r0, r3
 80005a4:	23bc      	movs	r3, #188	; 0xbc
 80005a6:	461a      	mov	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f00a ff49 	bl	800b440 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005ae:	2002      	movs	r0, #2
 80005b0:	f005 fe26 	bl	8006200 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	4b63      	ldr	r3, [pc, #396]	; (8000748 <SystemClock_Config+0x1cc>)
 80005bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005be:	4a62      	ldr	r2, [pc, #392]	; (8000748 <SystemClock_Config+0x1cc>)
 80005c0:	f023 0301 	bic.w	r3, r3, #1
 80005c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005c6:	4b60      	ldr	r3, [pc, #384]	; (8000748 <SystemClock_Config+0x1cc>)
 80005c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ca:	f003 0201 	and.w	r2, r3, #1
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	4b5e      	ldr	r3, [pc, #376]	; (800074c <SystemClock_Config+0x1d0>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a5d      	ldr	r2, [pc, #372]	; (800074c <SystemClock_Config+0x1d0>)
 80005d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b5b      	ldr	r3, [pc, #364]	; (800074c <SystemClock_Config+0x1d0>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005ee:	bf00      	nop
 80005f0:	4b56      	ldr	r3, [pc, #344]	; (800074c <SystemClock_Config+0x1d0>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005fc:	d1f8      	bne.n	80005f0 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80005fe:	4b54      	ldr	r3, [pc, #336]	; (8000750 <SystemClock_Config+0x1d4>)
 8000600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000602:	4a53      	ldr	r2, [pc, #332]	; (8000750 <SystemClock_Config+0x1d4>)
 8000604:	f023 0303 	bic.w	r3, r3, #3
 8000608:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800060a:	2322      	movs	r3, #34	; 0x22
 800060c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000610:	2301      	movs	r3, #1
 8000612:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 800062e:	2320      	movs	r3, #32
 8000630:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000634:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000638:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800064e:	2304      	movs	r3, #4
 8000650:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000654:	2300      	movs	r3, #0
 8000656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000664:	4618      	mov	r0, r3
 8000666:	f005 fe05 	bl	8006274 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000670:	f000 fe4c 	bl	800130c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	233f      	movs	r3, #63	; 0x3f
 8000676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000686:	2308      	movs	r3, #8
 8000688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000692:	2340      	movs	r3, #64	; 0x40
 8000694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800069c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f006 f9f1 	bl	8006a94 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x140>
  {
    Error_Handler();
 80006b8:	f000 fe28 	bl	800130c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_RNG
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	4a24      	ldr	r2, [pc, #144]	; (8000754 <SystemClock_Config+0x1d8>)
 80006c2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2220      	movs	r2, #32
 80006ca:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 216;
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	22d8      	movs	r2, #216	; 0xd8
 80006d2:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 12;
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	220c      	movs	r2, #12
 80006da:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2202      	movs	r2, #2
 80006e2:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2202      	movs	r2, #2
 80006ea:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2240      	movs	r2, #64	; 0x40
 80006f2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_CPUCLK;
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	4618      	mov	r0, r3
 8000730:	f006 fd08 	bl	8007144 <HAL_RCCEx_PeriphCLKConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x1c2>
  {
    Error_Handler();
 800073a:	f000 fde7 	bl	800130c <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58000400 	.word	0x58000400
 800074c:	58024800 	.word	0x58024800
 8000750:	58024400 	.word	0x58024400
 8000754:	100a1000 	.word	0x100a1000

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b5b      	ldr	r3, [pc, #364]	; (80008ec <MX_ADC1_Init+0x194>)
 800077e:	4a5c      	ldr	r2, [pc, #368]	; (80008f0 <MX_ADC1_Init+0x198>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000782:	4b5a      	ldr	r3, [pc, #360]	; (80008ec <MX_ADC1_Init+0x194>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000788:	4b58      	ldr	r3, [pc, #352]	; (80008ec <MX_ADC1_Init+0x194>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800078e:	4b57      	ldr	r3, [pc, #348]	; (80008ec <MX_ADC1_Init+0x194>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000794:	4b55      	ldr	r3, [pc, #340]	; (80008ec <MX_ADC1_Init+0x194>)
 8000796:	2208      	movs	r2, #8
 8000798:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800079a:	4b54      	ldr	r3, [pc, #336]	; (80008ec <MX_ADC1_Init+0x194>)
 800079c:	2200      	movs	r2, #0
 800079e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a0:	4b52      	ldr	r3, [pc, #328]	; (80008ec <MX_ADC1_Init+0x194>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 6;
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <MX_ADC1_Init+0x194>)
 80007a8:	2206      	movs	r2, #6
 80007aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ac:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <MX_ADC1_Init+0x194>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HR1_ADCTRG1;
 80007b2:	4b4e      	ldr	r3, [pc, #312]	; (80008ec <MX_ADC1_Init+0x194>)
 80007b4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007ba:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <MX_ADC1_Init+0x194>)
 80007bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007c2:	4b4a      	ldr	r3, [pc, #296]	; (80008ec <MX_ADC1_Init+0x194>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c8:	4b48      	ldr	r3, [pc, #288]	; (80008ec <MX_ADC1_Init+0x194>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007ce:	4b47      	ldr	r3, [pc, #284]	; (80008ec <MX_ADC1_Init+0x194>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80007d4:	4b45      	ldr	r3, [pc, #276]	; (80008ec <MX_ADC1_Init+0x194>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 2;
 80007dc:	4b43      	ldr	r3, [pc, #268]	; (80008ec <MX_ADC1_Init+0x194>)
 80007de:	2202      	movs	r2, #2
 80007e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80007e2:	4b42      	ldr	r3, [pc, #264]	; (80008ec <MX_ADC1_Init+0x194>)
 80007e4:	2220      	movs	r2, #32
 80007e6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_MULTI_TRIGGER;
 80007e8:	4b40      	ldr	r3, [pc, #256]	; (80008ec <MX_ADC1_Init+0x194>)
 80007ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ee:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80007f0:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <MX_ADC1_Init+0x194>)
 80007f2:	f240 4201 	movw	r2, #1025	; 0x401
 80007f6:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f8:	483c      	ldr	r0, [pc, #240]	; (80008ec <MX_ADC1_Init+0x194>)
 80007fa:	f001 fc5b 	bl	80020b4 <HAL_ADC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000804:	f000 fd82 	bl	800130c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4836      	ldr	r0, [pc, #216]	; (80008ec <MX_ADC1_Init+0x194>)
 8000814:	f002 fc06 	bl	8003024 <HAL_ADCEx_MultiModeConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800081e:	f000 fd75 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <MX_ADC1_Init+0x19c>)
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000826:	2306      	movs	r3, #6
 8000828:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800082a:	2303      	movs	r3, #3
 800082c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800082e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000832:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000834:	2304      	movs	r3, #4
 8000836:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4829      	ldr	r0, [pc, #164]	; (80008ec <MX_ADC1_Init+0x194>)
 8000846:	f001 fea3 	bl	8002590 <HAL_ADC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000850:	f000 fd5c 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_ADC1_Init+0x1a0>)
 8000856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000858:	230c      	movs	r3, #12
 800085a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4822      	ldr	r0, [pc, #136]	; (80008ec <MX_ADC1_Init+0x194>)
 8000862:	f001 fe95 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800086c:	f000 fd4e 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000874:	2312      	movs	r3, #18
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	481b      	ldr	r0, [pc, #108]	; (80008ec <MX_ADC1_Init+0x194>)
 800087e:	f001 fe87 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000888:	f000 fd40 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_ADC1_Init+0x1a8>)
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000890:	2318      	movs	r3, #24
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4814      	ldr	r0, [pc, #80]	; (80008ec <MX_ADC1_Init+0x194>)
 800089a:	f001 fe79 	bl	8002590 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80008a4:	f000 fd32 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_ADC1_Init+0x1ac>)
 80008aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC1_Init+0x194>)
 80008b8:	f001 fe6a 	bl	8002590 <HAL_ADC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80008c2:	f000 fd23 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_ADC1_Init+0x1b0>)
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008ca:	f44f 7383 	mov.w	r3, #262	; 0x106
 80008ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC1_Init+0x194>)
 80008d6:	f001 fe5b 	bl	8002590 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80008e0:	f000 fd14 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000040c 	.word	0x2000040c
 80008f0:	40022000 	.word	0x40022000
 80008f4:	43210000 	.word	0x43210000
 80008f8:	47520000 	.word	0x47520000
 80008fc:	3ac04000 	.word	0x3ac04000
 8000900:	3ef08000 	.word	0x3ef08000
 8000904:	4b840000 	.word	0x4b840000
 8000908:	4fb80000 	.word	0x4fb80000

0800090c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000924:	4b55      	ldr	r3, [pc, #340]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000926:	4a56      	ldr	r2, [pc, #344]	; (8000a80 <MX_ADC2_Init+0x174>)
 8000928:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800092a:	4b54      	ldr	r3, [pc, #336]	; (8000a7c <MX_ADC2_Init+0x170>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000930:	4b52      	ldr	r3, [pc, #328]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000936:	4b51      	ldr	r3, [pc, #324]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000938:	2201      	movs	r2, #1
 800093a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800093c:	4b4f      	ldr	r3, [pc, #316]	; (8000a7c <MX_ADC2_Init+0x170>)
 800093e:	2208      	movs	r2, #8
 8000940:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000942:	4b4e      	ldr	r3, [pc, #312]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000944:	2200      	movs	r2, #0
 8000946:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <MX_ADC2_Init+0x170>)
 800094a:	2200      	movs	r2, #0
 800094c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 6;
 800094e:	4b4b      	ldr	r3, [pc, #300]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000950:	2206      	movs	r2, #6
 8000952:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000954:	4b49      	ldr	r3, [pc, #292]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000956:	2200      	movs	r2, #0
 8000958:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HR1_ADCTRG1;
 800095a:	4b48      	ldr	r3, [pc, #288]	; (8000a7c <MX_ADC2_Init+0x170>)
 800095c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000962:	4b46      	ldr	r3, [pc, #280]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800096a:	4b44      	ldr	r3, [pc, #272]	; (8000a7c <MX_ADC2_Init+0x170>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000970:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000972:	2200      	movs	r2, #0
 8000974:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000976:	4b41      	ldr	r3, [pc, #260]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000978:	2200      	movs	r2, #0
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = ENABLE;
 800097c:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <MX_ADC2_Init+0x170>)
 800097e:	2201      	movs	r2, #1
 8000980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Oversampling.Ratio = 2;
 8000984:	4b3d      	ldr	r3, [pc, #244]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000986:	2202      	movs	r2, #2
 8000988:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800098a:	4b3c      	ldr	r3, [pc, #240]	; (8000a7c <MX_ADC2_Init+0x170>)
 800098c:	2220      	movs	r2, #32
 800098e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_MULTI_TRIGGER;
 8000990:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000996:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8000998:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <MX_ADC2_Init+0x170>)
 800099a:	f240 4201 	movw	r2, #1025	; 0x401
 800099e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009a0:	4836      	ldr	r0, [pc, #216]	; (8000a7c <MX_ADC2_Init+0x170>)
 80009a2:	f001 fb87 	bl	80020b4 <HAL_ADC_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80009ac:	f000 fcae 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009b0:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <MX_ADC2_Init+0x178>)
 80009b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b4:	2306      	movs	r3, #6
 80009b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80009b8:	2304      	movs	r3, #4
 80009ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c2:	2304      	movs	r3, #4
 80009c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	482a      	ldr	r0, [pc, #168]	; (8000a7c <MX_ADC2_Init+0x170>)
 80009d4:	f001 fddc 	bl	8002590 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80009de:	f000 fc95 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_ADC2_Init+0x17c>)
 80009e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009e6:	230c      	movs	r3, #12
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4823      	ldr	r0, [pc, #140]	; (8000a7c <MX_ADC2_Init+0x170>)
 80009f0:	f001 fdce 	bl	8002590 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 80009fa:	f000 fc87 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <MX_ADC2_Init+0x180>)
 8000a00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a02:	2312      	movs	r3, #18
 8000a04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481c      	ldr	r0, [pc, #112]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000a0c:	f001 fdc0 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC2_Init+0x10e>
  {
    Error_Handler();
 8000a16:	f000 fc79 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_ADC2_Init+0x184>)
 8000a1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a1e:	2318      	movs	r3, #24
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4815      	ldr	r0, [pc, #84]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000a28:	f001 fdb2 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC2_Init+0x12a>
  {
    Error_Handler();
 8000a32:	f000 fc6b 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_ADC2_Init+0x188>)
 8000a38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000a46:	f001 fda3 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC2_Init+0x148>
  {
    Error_Handler();
 8000a50:	f000 fc5c 	bl	800130c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_ADC2_Init+0x18c>)
 8000a56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a58:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_ADC2_Init+0x170>)
 8000a64:	f001 fd94 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC2_Init+0x166>
  {
    Error_Handler();
 8000a6e:	f000 fc4d 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000024c 	.word	0x2000024c
 8000a80:	40022100 	.word	0x40022100
 8000a84:	0c900008 	.word	0x0c900008
 8000a88:	1d500080 	.word	0x1d500080
 8000a8c:	10c00010 	.word	0x10c00010
 8000a90:	21800100 	.word	0x21800100
 8000a94:	25b00200 	.word	0x25b00200
 8000a98:	14f00020 	.word	0x14f00020

08000a9c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000aac:	463b      	mov	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_HRTIM_Init+0x90>)
 8000aba:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <MX_HRTIM_Init+0x94>)
 8000abc:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_HRTIM_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_HRTIM_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000aca:	4818      	ldr	r0, [pc, #96]	; (8000b2c <MX_HRTIM_Init+0x90>)
 8000acc:	f005 f986 	bl	8005ddc <HAL_HRTIM_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_HRTIM_Init+0x3e>
  {
    Error_Handler();
 8000ad6:	f000 fc19 	bl	800130c <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 8000ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ade:	613b      	str	r3, [r7, #16]
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_NONE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2101      	movs	r1, #1
 8000aec:	480f      	ldr	r0, [pc, #60]	; (8000b2c <MX_HRTIM_Init+0x90>)
 8000aee:	f005 fa6d 	bl	8005fcc <HAL_HRTIM_ADCTriggerConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_HRTIM_Init+0x60>
  {
    Error_Handler();
 8000af8:	f000 fc08 	bl	800130c <Error_Handler>
  }
  pTimeBaseCfg.Period = 347;
 8000afc:	f240 135b 	movw	r3, #347	; 0x15b
 8000b00:	603b      	str	r3, [r7, #0]
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000b06:	2305      	movs	r3, #5
 8000b08:	60bb      	str	r3, [r7, #8]
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	461a      	mov	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_HRTIM_Init+0x90>)
 8000b16:	f005 fa31 	bl	8005f7c <HAL_HRTIM_TimeBaseConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_HRTIM_Init+0x88>
  {
    Error_Handler();
 8000b20:	f000 fbf4 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20018dc0 	.word	0x20018dc0
 8000b30:	40017400 	.word	0x40017400

08000b34 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_RNG_Init+0x24>)
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <MX_RNG_Init+0x28>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_RNG_Init+0x24>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_RNG_Init+0x24>)
 8000b46:	f008 f9c1 	bl	8008ecc <HAL_RNG_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000b50:	f000 fbdc 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000594 	.word	0x20000594
 8000b5c:	48021800 	.word	0x48021800

08000b60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b66:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <MX_SPI1_Init+0xa8>)
 8000b68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bf2:	f008 fa15 	bl	8009020 <HAL_SPI_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000bfc:	f000 fb86 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20018cc0 	.word	0x20018cc0
 8000c08:	40013000 	.word	0x40013000

08000c0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c12:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <MX_SPI2_Init+0x9c>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_SPI2_Init+0x98>)
 8000c90:	f008 f9c6 	bl	8009020 <HAL_SPI_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_SPI2_Init+0x92>
  {
    Error_Handler();
 8000c9a:	f000 fb37 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000104 	.word	0x20000104
 8000ca8:	40003800 	.word	0x40003800

08000cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_DMA_Init+0x6c>)
 8000cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb8:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <MX_DMA_Init+0x6c>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_DMA_Init+0x6c>)
 8000cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	200b      	movs	r0, #11
 8000cd6:	f002 fb5a 	bl	800338e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cda:	200b      	movs	r0, #11
 8000cdc:	f002 fb71 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	200c      	movs	r0, #12
 8000ce6:	f002 fb52 	bl	800338e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cea:	200c      	movs	r0, #12
 8000cec:	f002 fb69 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	200d      	movs	r0, #13
 8000cf6:	f002 fb4a 	bl	800338e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cfa:	200d      	movs	r0, #13
 8000cfc:	f002 fb61 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	200e      	movs	r0, #14
 8000d06:	f002 fb42 	bl	800338e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d0a:	200e      	movs	r0, #14
 8000d0c:	f002 fb59 	bl	80033c2 <HAL_NVIC_EnableIRQ>

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	58024400 	.word	0x58024400

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	4a33      	ldr	r2, [pc, #204]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d42:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d56:	4a2c      	ldr	r2, [pc, #176]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_GPIO_Init+0xec>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000de6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_GPIO_Init+0xf0>)
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_GPIO_Init+0xf4>)
 8000dfc:	f004 fe24 	bl	8005a48 <HAL_GPIO_Init>

}
 8000e00:	bf00      	nop
 8000e02:	3730      	adds	r7, #48	; 0x30
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	11110000 	.word	0x11110000
 8000e10:	58020c00 	.word	0x58020c00

08000e14 <randomNumber>:

/* USER CODE BEGIN 4 */
float randomNumber(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480b      	ldr	r0, [pc, #44]	; (8000e4c <randomNumber+0x38>)
 8000e20:	f008 f8af 	bl	8008f82 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000e50 <randomNumber+0x3c>
 8000e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e36:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	ee07 3a90 	vmov	s15, r3
}
 8000e40:	eeb0 0a67 	vmov.f32	s0, s15
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000594 	.word	0x20000594
 8000e50:	2f80000d 	.word	0x2f80000d

08000e54 <attackDetectPeak2>:
int stringMaxes[NUM_STRINGS] = {0,0,0,0,0,0,0,0,0,0};
int downCounter[NUM_STRINGS];
int armedCounter[NUM_STRINGS];
float slopeStorage[NUM_STRINGS];
int attackDetectPeak2 (int whichString, int tempInt)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	float output = -1;
 8000e5e:	4b9c      	ldr	r3, [pc, #624]	; (80010d0 <attackDetectPeak2+0x27c>)
 8000e60:	61fb      	str	r3, [r7, #28]
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e6c:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80010d4 <attackDetectPeak2+0x280>
 8000e70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e74:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80010d8 <attackDetectPeak2+0x284>
 8000e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7c:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int k = 0; k < FILTER_ORDER; k++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e01e      	b.n	8000ec4 <attackDetectPeak2+0x70>
	{
		// a highpass filter, remove any slow moving signal (effectively centers the signal around zero and gets rid of the signal that isn't high frequency vibration) cutoff of 100Hz, // applied 8 times to get rid of a lot of low frequency bumbling around
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	005a      	lsls	r2, r3, #1
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4a92      	ldr	r2, [pc, #584]	; (80010dc <attackDetectPeak2+0x288>)
 8000e92:	4413      	add	r3, r2
 8000e94:	ed97 0a06 	vldr	s0, [r7, #24]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f009 fb4e 	bl	800a53a <tHighpass_tick>
 8000e9e:	ed87 0a06 	vstr	s0, [r7, #24]
		tempSamp = tVZFilter_tick(&opticalLowpass[whichString][k], tempSamp * 1.0f);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	005a      	lsls	r2, r3, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4a8c      	ldr	r2, [pc, #560]	; (80010e0 <attackDetectPeak2+0x28c>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	ed97 0a06 	vldr	s0, [r7, #24]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f009 fbe7 	bl	800a688 <tVZFilter_tick>
 8000eba:	ed87 0a06 	vstr	s0, [r7, #24]
	for (int k = 0; k < FILTER_ORDER; k++)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	dddd      	ble.n	8000e86 <attackDetectPeak2+0x32>
	}

	float tempAbs = fabsf(tempSamp);
 8000eca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ece:	eef0 7ae7 	vabs.f32	s15, s15
 8000ed2:	edc7 7a04 	vstr	s15, [r7, #16]

	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4a82      	ldr	r2, [pc, #520]	; (80010e4 <attackDetectPeak2+0x290>)
 8000edc:	4413      	add	r3, r2
 8000ede:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f009 fa80 	bl	800a3e8 <tSlide_tick>
 8000ee8:	eef0 7a40 	vmov.f32	s15, s0
 8000eec:	4b7e      	ldr	r3, [pc, #504]	; (80010e8 <attackDetectPeak2+0x294>)
 8000eee:	edc3 7a00 	vstr	s15, [r3]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4a7d      	ldr	r2, [pc, #500]	; (80010ec <attackDetectPeak2+0x298>)
 8000ef8:	441a      	add	r2, r3
 8000efa:	4b7b      	ldr	r3, [pc, #492]	; (80010e8 <attackDetectPeak2+0x294>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	eeb0 0a67 	vmov.f32	s0, s15
 8000f04:	4610      	mov	r0, r2
 8000f06:	f009 fa6f 	bl	800a3e8 <tSlide_tick>
 8000f0a:	eef0 7a40 	vmov.f32	s15, s0
 8000f0e:	4b78      	ldr	r3, [pc, #480]	; (80010f0 <attackDetectPeak2+0x29c>)
 8000f10:	edc3 7a00 	vstr	s15, [r3]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000f14:	4b76      	ldr	r3, [pc, #472]	; (80010f0 <attackDetectPeak2+0x29c>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000f1e:	eef0 0a67 	vmov.f32	s1, s15
 8000f22:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80010f4 <attackDetectPeak2+0x2a0>
 8000f26:	f009 ff35 	bl	800ad94 <LEAF_clip>
 8000f2a:	eef0 7a40 	vmov.f32	s15, s0
 8000f2e:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <attackDetectPeak2+0x29c>)
 8000f30:	edc3 7a00 	vstr	s15, [r3]
	//dbSmoothed2 = atodb(Dsmoothed2);
	dbSmoothed2 = LEAF_clip(-80.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);
 8000f34:	4b6e      	ldr	r3, [pc, #440]	; (80010f0 <attackDetectPeak2+0x29c>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80010f8 <attackDetectPeak2+0x2a4>
 8000f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f46:	ee17 3a90 	vmov	r3, s15
 8000f4a:	4a6c      	ldr	r2, [pc, #432]	; (80010fc <attackDetectPeak2+0x2a8>)
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8000f58:	eef0 0a67 	vmov.f32	s1, s15
 8000f5c:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8001100 <attackDetectPeak2+0x2ac>
 8000f60:	f009 ff18 	bl	800ad94 <LEAF_clip>
 8000f64:	eef0 7a40 	vmov.f32	s15, s0
 8000f68:	4b66      	ldr	r3, [pc, #408]	; (8001104 <attackDetectPeak2+0x2b0>)
 8000f6a:	edc3 7a00 	vstr	s15, [r3]
	//dbSmoothed2 = LEAF_clip(-50.f, dbSmoothed2, 12.0f);
	//get the slope
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000f6e:	4b65      	ldr	r3, [pc, #404]	; (8001104 <attackDetectPeak2+0x2b0>)
 8000f70:	ed93 7a00 	vldr	s14, [r3]
 8000f74:	4a64      	ldr	r2, [pc, #400]	; (8001108 <attackDetectPeak2+0x2b4>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f84:	edc7 7a03 	vstr	s15, [r7, #12]
	slopeStorage[whichString] = slope;
 8000f88:	4a60      	ldr	r2, [pc, #384]	; (800110c <attackDetectPeak2+0x2b8>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	601a      	str	r2, [r3, #0]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000f94:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <attackDetectPeak2+0x29c>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001110 <attackDetectPeak2+0x2bc>
 8000f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa2:	edc7 7a02 	vstr	s15, [r7, #8]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4a5a      	ldr	r2, [pc, #360]	; (8001114 <attackDetectPeak2+0x2c0>)
 8000fac:	4413      	add	r3, r2
 8000fae:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f009 f97e 	bl	800a2b4 <tThreshold_tick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	4b57      	ldr	r3, [pc, #348]	; (8001118 <attackDetectPeak2+0x2c4>)
 8000fbc:	601a      	str	r2, [r3, #0]
	if ((slope > 0.1f) && (threshOut > 0))
 8000fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800111c <attackDetectPeak2+0x2c8>
 8000fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	dd08      	ble.n	8000fe2 <attackDetectPeak2+0x18e>
 8000fd0:	4b51      	ldr	r3, [pc, #324]	; (8001118 <attackDetectPeak2+0x2c4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dd04      	ble.n	8000fe2 <attackDetectPeak2+0x18e>
	{
		armed[whichString] = 1;
 8000fd8:	4a51      	ldr	r2, [pc, #324]	; (8001120 <attackDetectPeak2+0x2cc>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	if (armed[whichString] == 1)
 8000fe2:	4a4f      	ldr	r2, [pc, #316]	; (8001120 <attackDetectPeak2+0x2cc>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d15f      	bne.n	80010ae <attackDetectPeak2+0x25a>
	{
		if (integerVersion > stringMaxes[whichString])
 8000fee:	4a4d      	ldr	r2, [pc, #308]	; (8001124 <attackDetectPeak2+0x2d0>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	dd09      	ble.n	8001020 <attackDetectPeak2+0x1cc>
		{
			stringMaxes[whichString] = integerVersion;
 800100c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001014:	ee17 1a90 	vmov	r1, s15
 8001018:	4a42      	ldr	r2, [pc, #264]	; (8001124 <attackDetectPeak2+0x2d0>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		armedCounter[whichString]++;
 8001020:	4a41      	ldr	r2, [pc, #260]	; (8001128 <attackDetectPeak2+0x2d4>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	493f      	ldr	r1, [pc, #252]	; (8001128 <attackDetectPeak2+0x2d4>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (slope <= 0.0f)
 8001032:	edd7 7a03 	vldr	s15, [r7, #12]
 8001036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d808      	bhi.n	8001052 <attackDetectPeak2+0x1fe>
		{
			downCounter[whichString]++;
 8001040:	4a3a      	ldr	r2, [pc, #232]	; (800112c <attackDetectPeak2+0x2d8>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	4938      	ldr	r1, [pc, #224]	; (800112c <attackDetectPeak2+0x2d8>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (downCounter[whichString] > 128)
 8001052:	4a36      	ldr	r2, [pc, #216]	; (800112c <attackDetectPeak2+0x2d8>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	2b80      	cmp	r3, #128	; 0x80
 800105c:	dd27      	ble.n	80010ae <attackDetectPeak2+0x25a>
		{
			//found a peak?
			output = stringMaxes[whichString];
 800105e:	4a31      	ldr	r2, [pc, #196]	; (8001124 <attackDetectPeak2+0x2d0>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106e:	edc7 7a07 	vstr	s15, [r7, #28]
			output = LEAF_clip(0.0f, output, 65535.0f);
 8001072:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8001110 <attackDetectPeak2+0x2bc>
 8001076:	edd7 0a07 	vldr	s1, [r7, #28]
 800107a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80010f4 <attackDetectPeak2+0x2a0>
 800107e:	f009 fe89 	bl	800ad94 <LEAF_clip>
 8001082:	ed87 0a07 	vstr	s0, [r7, #28]
			armed[whichString] = 0;
 8001086:	4a26      	ldr	r2, [pc, #152]	; (8001120 <attackDetectPeak2+0x2cc>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2100      	movs	r1, #0
 800108c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			armedCounter[whichString] = 0;
 8001090:	4a25      	ldr	r2, [pc, #148]	; (8001128 <attackDetectPeak2+0x2d4>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2100      	movs	r1, #0
 8001096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			downCounter[whichString] = 0;
 800109a:	4a24      	ldr	r2, [pc, #144]	; (800112c <attackDetectPeak2+0x2d8>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2100      	movs	r1, #0
 80010a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			stringMaxes[whichString] = 0;
 80010a4:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <attackDetectPeak2+0x2d0>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2100      	movs	r1, #0
 80010aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}

	prevdbSmoothed2[whichString] = dbSmoothed2;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <attackDetectPeak2+0x2b0>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4915      	ldr	r1, [pc, #84]	; (8001108 <attackDetectPeak2+0x2b4>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	601a      	str	r2, [r3, #0]
	return (int)output;
 80010bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c4:	ee17 3a90 	vmov	r3, s15
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	bf800000 	.word	0xbf800000
 80010d4:	47000000 	.word	0x47000000
 80010d8:	37fffffc 	.word	0x37fffffc
 80010dc:	200001fc 	.word	0x200001fc
 80010e0:	20018c70 	.word	0x20018c70
 80010e4:	20018f14 	.word	0x20018f14
 80010e8:	20000568 	.word	0x20000568
 80010ec:	2000056c 	.word	0x2000056c
 80010f0:	20000408 	.word	0x20000408
 80010f4:	00000000 	.word	0x00000000
 80010f8:	46c34e00 	.word	0x46c34e00
 80010fc:	200005d0 	.word	0x200005d0
 8001100:	c2a00000 	.word	0xc2a00000
 8001104:	200003c8 	.word	0x200003c8
 8001108:	200003e0 	.word	0x200003e0
 800110c:	20000378 	.word	0x20000378
 8001110:	477fff00 	.word	0x477fff00
 8001114:	2000018c 	.word	0x2000018c
 8001118:	200000c0 	.word	0x200000c0
 800111c:	3dcccccd 	.word	0x3dcccccd
 8001120:	20000098 	.word	0x20000098
 8001124:	200000c4 	.word	0x200000c4
 8001128:	200003a0 	.word	0x200003a0
 800112c:	200005a8 	.word	0x200005a8

08001130 <ADC_Frame>:
int brokedIt = 0;
int didPlucked2[10];
int pluckDelay[10];
int pluckValues[10];
void ADC_Frame(int offset)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113e:	485a      	ldr	r0, [pc, #360]	; (80012a8 <ADC_Frame+0x178>)
 8001140:	f004 fe32 	bl	8005da8 <HAL_GPIO_WritePin>
	int changeHappened = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
	//sampRecords[currentSamp] = frameCount;
	//currentSamp++;

	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	e094      	b.n	8001278 <ADC_Frame+0x148>
	{
		//for (int j = 0; j < NUM_ADC_CHANNELS; j++)
		if (howManyFrames > 0)
 800114e:	4b57      	ldr	r3, [pc, #348]	; (80012ac <ADC_Frame+0x17c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	dd04      	ble.n	8001160 <ADC_Frame+0x30>
		{
			howManyFrames--;
 8001156:	4b55      	ldr	r3, [pc, #340]	; (80012ac <ADC_Frame+0x17c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	4a53      	ldr	r2, [pc, #332]	; (80012ac <ADC_Frame+0x17c>)
 800115e:	6013      	str	r3, [r2, #0]
		}
		for (int j = 0; j < 10; j++)
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e081      	b.n	800126a <ADC_Frame+0x13a>
		{
			int tempInt = ADC_values[(i*NUM_ADC_CHANNELS) + j];
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	4a4e      	ldr	r2, [pc, #312]	; (80012b0 <ADC_Frame+0x180>)
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	60bb      	str	r3, [r7, #8]

			if (j < 8)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b07      	cmp	r3, #7
 8001182:	dc0e      	bgt.n	80011a2 <ADC_Frame+0x72>
			{
				stringTouchRH[j] = (SPI_RX[4] >> j) & 1;
 8001184:	4b4b      	ldr	r3, [pc, #300]	; (80012b4 <ADC_Frame+0x184>)
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	461a      	mov	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	fa42 f303 	asr.w	r3, r2, r3
 8001190:	b29b      	uxth	r3, r3
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	b299      	uxth	r1, r3
 8001198:	4a47      	ldr	r2, [pc, #284]	; (80012b8 <ADC_Frame+0x188>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80011a0:	e00e      	b.n	80011c0 <ADC_Frame+0x90>
			}
			else
			{
				stringTouchRH[j] = (SPI_RX[5] >> (j-8)) & 1;
 80011a2:	4b44      	ldr	r3, [pc, #272]	; (80012b4 <ADC_Frame+0x184>)
 80011a4:	795b      	ldrb	r3, [r3, #5]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3b08      	subs	r3, #8
 80011ac:	fa42 f303 	asr.w	r3, r2, r3
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	b299      	uxth	r1, r3
 80011b8:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <ADC_Frame+0x188>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff fe46 	bl	8000e54 <attackDetectPeak2>
 80011c8:	4601      	mov	r1, r0
 80011ca:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <ADC_Frame+0x18c>)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pluckValues[j] = didPlucked[j];
			}

			int doIt = 0;
*/
			if (howManyFrames == 0)
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <ADC_Frame+0x17c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d144      	bne.n	8001264 <ADC_Frame+0x134>
				if (pluckDelay[j] > 0)
				{
					pluckDelay[j]++;
				}
*/
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 80011da:	4a38      	ldr	r2, [pc, #224]	; (80012bc <ADC_Frame+0x18c>)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	dd20      	ble.n	8001228 <ADC_Frame+0xf8>
 80011e6:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <ADC_Frame+0x190>)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d11a      	bne.n	8001228 <ADC_Frame+0xf8>
				{
					SPI_PLUCK_TX[(j * 2)] = (didPlucked[j] >> 8);
 80011f2:	4a32      	ldr	r2, [pc, #200]	; (80012bc <ADC_Frame+0x18c>)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	121a      	asrs	r2, r3, #8
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	b2d1      	uxtb	r1, r2
 8001202:	4a30      	ldr	r2, [pc, #192]	; (80012c4 <ADC_Frame+0x194>)
 8001204:	54d1      	strb	r1, [r2, r3]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] & 0xff);
 8001206:	4a2d      	ldr	r2, [pc, #180]	; (80012bc <ADC_Frame+0x18c>)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	3301      	adds	r3, #1
 8001214:	b2d1      	uxtb	r1, r2
 8001216:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <ADC_Frame+0x194>)
 8001218:	54d1      	strb	r1, [r2, r3]
					SPI_PLUCK_TX[0] = j;
					SPI_PLUCK_TX[1] = (uint8_t) (didPlucked[j] >> 8); //low byte
					SPI_PLUCK_TX[2] = (uint8_t) (didPlucked[j] & 0xff); //low byte
					SPI_PLUCK_TX[3] = 0;
					*/
					changeHappened = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
					stringSounding[j] = 1;
 800121e:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <ADC_Frame+0x190>)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2101      	movs	r1, #1
 8001224:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					//HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 4);
				}

				if ((stringTouchRH[j]) && (stringSounding[j]))
 8001228:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <ADC_Frame+0x188>)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d017      	beq.n	8001264 <ADC_Frame+0x134>
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <ADC_Frame+0x190>)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d011      	beq.n	8001264 <ADC_Frame+0x134>
					SPI_PLUCK_TX[0] = j;
					SPI_PLUCK_TX[1] = 0;
					SPI_PLUCK_TX[2] = 0;
					SPI_PLUCK_TX[3] = 0;
					*/
					SPI_PLUCK_TX[(j * 2)] = 0;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <ADC_Frame+0x194>)
 8001246:	2100      	movs	r1, #0
 8001248:	54d1      	strb	r1, [r2, r3]
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	3301      	adds	r3, #1
 8001250:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <ADC_Frame+0x194>)
 8001252:	2100      	movs	r1, #0
 8001254:	54d1      	strb	r1, [r2, r3]
					//{
						//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);

					//}
					//HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
					changeHappened = 1;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
					stringSounding[j] = 0;
 800125a:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <ADC_Frame+0x190>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2100      	movs	r1, #0
 8001260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < 10; j++)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b09      	cmp	r3, #9
 800126e:	f77f af7a 	ble.w	8001166 <ADC_Frame+0x36>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	3301      	adds	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3304      	adds	r3, #4
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	429a      	cmp	r2, r3
 8001280:	f6ff af65 	blt.w	800114e <ADC_Frame+0x1e>
			}
*/
		}

	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128a:	4807      	ldr	r0, [pc, #28]	; (80012a8 <ADC_Frame+0x178>)
 800128c:	f004 fd8c 	bl	8005da8 <HAL_GPIO_WritePin>
	if (changeHappened)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <ADC_Frame+0x170>
	{
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 20);
 8001296:	2214      	movs	r2, #20
 8001298:	490a      	ldr	r1, [pc, #40]	; (80012c4 <ADC_Frame+0x194>)
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <ADC_Frame+0x198>)
 800129c:	f007 ffb8 	bl	8009210 <HAL_SPI_Transmit_DMA>
	}
}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58020000 	.word	0x58020000
 80012ac:	20000000 	.word	0x20000000
 80012b0:	30004060 	.word	0x30004060
 80012b4:	30000020 	.word	0x30000020
 80012b8:	200003cc 	.word	0x200003cc
 80012bc:	20000498 	.word	0x20000498
 80012c0:	200002b0 	.word	0x200002b0
 80012c4:	30000040 	.word	0x30000040
 80012c8:	20018cc0 	.word	0x20018cc0

080012cc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]


	ADC_Frame(ADC_FRAME_SIZE);
 80012d4:	2004      	movs	r0, #4
 80012d6:	f7ff ff2b 	bl	8001130 <ADC_Frame>


}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	ADC_Frame(0);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff ff20 	bl	8001130 <ADC_Frame>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_SPI_RxCpltCallback>:
{

}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_MspInit+0x30>)
 8001324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001328:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_MspInit+0x30>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x30>)
 8001334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	58024400 	.word	0x58024400

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4aaa      	ldr	r2, [pc, #680]	; (8001618 <HAL_ADC_MspInit+0x2c8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	f040 80a4 	bne.w	80014bc <HAL_ADC_MspInit+0x16c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001374:	4ba9      	ldr	r3, [pc, #676]	; (800161c <HAL_ADC_MspInit+0x2cc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4aa8      	ldr	r2, [pc, #672]	; (800161c <HAL_ADC_MspInit+0x2cc>)
 800137c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800137e:	4ba7      	ldr	r3, [pc, #668]	; (800161c <HAL_ADC_MspInit+0x2cc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d10e      	bne.n	80013a4 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001386:	4ba6      	ldr	r3, [pc, #664]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 8001388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800138c:	4aa4      	ldr	r2, [pc, #656]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 800138e:	f043 0320 	orr.w	r3, r3, #32
 8001392:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001396:	4ba2      	ldr	r3, [pc, #648]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 8001398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800139c:	f003 0320 	and.w	r3, r3, #32
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b9e      	ldr	r3, [pc, #632]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013aa:	4a9d      	ldr	r2, [pc, #628]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b4:	4b9a      	ldr	r3, [pc, #616]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b97      	ldr	r3, [pc, #604]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c8:	4a95      	ldr	r2, [pc, #596]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d2:	4b93      	ldr	r3, [pc, #588]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	623b      	str	r3, [r7, #32]
 80013de:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b8f      	ldr	r3, [pc, #572]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	4a8e      	ldr	r2, [pc, #568]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f0:	4b8b      	ldr	r3, [pc, #556]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	69fb      	ldr	r3, [r7, #28]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013fe:	23ff      	movs	r3, #255	; 0xff
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140e:	4619      	mov	r1, r3
 8001410:	4884      	ldr	r0, [pc, #528]	; (8001624 <HAL_ADC_MspInit+0x2d4>)
 8001412:	f004 fb19 	bl	8005a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001416:	2330      	movs	r3, #48	; 0x30
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001426:	4619      	mov	r1, r3
 8001428:	487f      	ldr	r0, [pc, #508]	; (8001628 <HAL_ADC_MspInit+0x2d8>)
 800142a:	f004 fb0d 	bl	8005a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800142e:	2303      	movs	r3, #3
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001432:	2303      	movs	r3, #3
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143e:	4619      	mov	r1, r3
 8001440:	487a      	ldr	r0, [pc, #488]	; (800162c <HAL_ADC_MspInit+0x2dc>)
 8001442:	f004 fb01 	bl	8005a48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001446:	4b7a      	ldr	r3, [pc, #488]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 8001448:	4a7a      	ldr	r2, [pc, #488]	; (8001634 <HAL_ADC_MspInit+0x2e4>)
 800144a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 800144e:	2209      	movs	r2, #9
 8001450:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001452:	4b77      	ldr	r3, [pc, #476]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001458:	4b75      	ldr	r3, [pc, #468]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800145e:	4b74      	ldr	r3, [pc, #464]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 8001460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001464:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001466:	4b72      	ldr	r3, [pc, #456]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 8001468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800146c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800146e:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 8001470:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001474:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001476:	4b6e      	ldr	r3, [pc, #440]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 8001478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800147e:	4b6c      	ldr	r3, [pc, #432]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 8001480:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001484:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001486:	4b6a      	ldr	r3, [pc, #424]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 8001488:	2204      	movs	r2, #4
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001492:	4b67      	ldr	r3, [pc, #412]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 8001494:	2200      	movs	r2, #0
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001498:	4b65      	ldr	r3, [pc, #404]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 800149a:	2200      	movs	r2, #0
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800149e:	4864      	ldr	r0, [pc, #400]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 80014a0:	f001 ffaa 	bl	80033f8 <HAL_DMA_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_ADC_MspInit+0x15e>
    {
      Error_Handler();
 80014aa:	f7ff ff2f 	bl	800130c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a5f      	ldr	r2, [pc, #380]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 80014b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80014b4:	4a5e      	ldr	r2, [pc, #376]	; (8001630 <HAL_ADC_MspInit+0x2e0>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014ba:	e0a8      	b.n	800160e <HAL_ADC_MspInit+0x2be>
  else if(hadc->Instance==ADC2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a5d      	ldr	r2, [pc, #372]	; (8001638 <HAL_ADC_MspInit+0x2e8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	f040 80a3 	bne.w	800160e <HAL_ADC_MspInit+0x2be>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014c8:	4b54      	ldr	r3, [pc, #336]	; (800161c <HAL_ADC_MspInit+0x2cc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a53      	ldr	r2, [pc, #332]	; (800161c <HAL_ADC_MspInit+0x2cc>)
 80014d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <HAL_ADC_MspInit+0x2cc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d10e      	bne.n	80014f8 <HAL_ADC_MspInit+0x1a8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014da:	4b51      	ldr	r3, [pc, #324]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80014dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014e0:	4a4f      	ldr	r2, [pc, #316]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80014e2:	f043 0320 	orr.w	r3, r3, #32
 80014e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014ea:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80014ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	4a48      	ldr	r2, [pc, #288]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001508:	4b45      	ldr	r3, [pc, #276]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b42      	ldr	r3, [pc, #264]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	4a40      	ldr	r2, [pc, #256]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001526:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	4a39      	ldr	r2, [pc, #228]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_ADC_MspInit+0x2d0>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001552:	23c0      	movs	r3, #192	; 0xc0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001556:	2303      	movs	r3, #3
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001562:	4619      	mov	r1, r3
 8001564:	482f      	ldr	r0, [pc, #188]	; (8001624 <HAL_ADC_MspInit+0x2d4>)
 8001566:	f004 fa6f 	bl	8005a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800156a:	2330      	movs	r3, #48	; 0x30
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157a:	4619      	mov	r1, r3
 800157c:	482a      	ldr	r0, [pc, #168]	; (8001628 <HAL_ADC_MspInit+0x2d8>)
 800157e:	f004 fa63 	bl	8005a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001582:	2303      	movs	r3, #3
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001586:	2303      	movs	r3, #3
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001592:	4619      	mov	r1, r3
 8001594:	4825      	ldr	r0, [pc, #148]	; (800162c <HAL_ADC_MspInit+0x2dc>)
 8001596:	f004 fa57 	bl	8005a48 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 800159c:	4a28      	ldr	r2, [pc, #160]	; (8001640 <HAL_ADC_MspInit+0x2f0>)
 800159e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015a2:	220a      	movs	r2, #10
 80015a4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015d8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015dc:	2204      	movs	r2, #4
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80015f2:	4812      	ldr	r0, [pc, #72]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 80015f4:	f001 ff00 	bl	80033f8 <HAL_DMA_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_ADC_MspInit+0x2b2>
      Error_Handler();
 80015fe:	f7ff fe85 	bl	800130c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <HAL_ADC_MspInit+0x2ec>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800160e:	bf00      	nop
 8001610:	3740      	adds	r7, #64	; 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40022000 	.word	0x40022000
 800161c:	200000ec 	.word	0x200000ec
 8001620:	58024400 	.word	0x58024400
 8001624:	58020000 	.word	0x58020000
 8001628:	58020800 	.word	0x58020800
 800162c:	58020400 	.word	0x58020400
 8001630:	200004c4 	.word	0x200004c4
 8001634:	40020010 	.word	0x40020010
 8001638:	40022100 	.word	0x40022100
 800163c:	20018d48 	.word	0x20018d48
 8001640:	40020028 	.word	0x40020028

08001644 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_HRTIM_MspInit+0x3c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10e      	bne.n	8001674 <HAL_HRTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_HRTIM_MspInit+0x40>)
 8001658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800165c:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_HRTIM_MspInit+0x40>)
 800165e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001662:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_HRTIM_MspInit+0x40>)
 8001668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800166c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40017400 	.word	0x40017400
 8001684:	58024400 	.word	0x58024400

08001688 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_RNG_MspInit+0x3c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10e      	bne.n	80016b8 <HAL_RNG_MspInit+0x30>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RNG_MspInit+0x40>)
 800169c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80016a0:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <HAL_RNG_MspInit+0x40>)
 80016a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_RNG_MspInit+0x40>)
 80016ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80016b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	48021800 	.word	0x48021800
 80016c8:	58024400 	.word	0x58024400

080016cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a84      	ldr	r2, [pc, #528]	; (80018fc <HAL_SPI_MspInit+0x230>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	f040 808e 	bne.w	800180c <HAL_SPI_MspInit+0x140>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f0:	4b83      	ldr	r3, [pc, #524]	; (8001900 <HAL_SPI_MspInit+0x234>)
 80016f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016f6:	4a82      	ldr	r2, [pc, #520]	; (8001900 <HAL_SPI_MspInit+0x234>)
 80016f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001700:	4b7f      	ldr	r3, [pc, #508]	; (8001900 <HAL_SPI_MspInit+0x234>)
 8001702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	4b7c      	ldr	r3, [pc, #496]	; (8001900 <HAL_SPI_MspInit+0x234>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <HAL_SPI_MspInit+0x234>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171e:	4b78      	ldr	r3, [pc, #480]	; (8001900 <HAL_SPI_MspInit+0x234>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800172c:	4b74      	ldr	r3, [pc, #464]	; (8001900 <HAL_SPI_MspInit+0x234>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	4a73      	ldr	r2, [pc, #460]	; (8001900 <HAL_SPI_MspInit+0x234>)
 8001734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173c:	4b70      	ldr	r3, [pc, #448]	; (8001900 <HAL_SPI_MspInit+0x234>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2302      	movs	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800175a:	2305      	movs	r3, #5
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4867      	ldr	r0, [pc, #412]	; (8001904 <HAL_SPI_MspInit+0x238>)
 8001766:	f004 f96f 	bl	8005a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800176a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001778:	2302      	movs	r3, #2
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177c:	2305      	movs	r3, #5
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4860      	ldr	r0, [pc, #384]	; (8001908 <HAL_SPI_MspInit+0x23c>)
 8001788:	f004 f95e 	bl	8005a48 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 800178c:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_SPI_MspInit+0x240>)
 800178e:	4a60      	ldr	r2, [pc, #384]	; (8001910 <HAL_SPI_MspInit+0x244>)
 8001790:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001792:	4b5e      	ldr	r3, [pc, #376]	; (800190c <HAL_SPI_MspInit+0x240>)
 8001794:	2226      	movs	r2, #38	; 0x26
 8001796:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001798:	4b5c      	ldr	r3, [pc, #368]	; (800190c <HAL_SPI_MspInit+0x240>)
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179e:	4b5b      	ldr	r3, [pc, #364]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017aa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ac:	4b57      	ldr	r3, [pc, #348]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017b8:	4b54      	ldr	r3, [pc, #336]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017c4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017c6:	4b51      	ldr	r3, [pc, #324]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017c8:	2204      	movs	r2, #4
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80017cc:	4b4f      	ldr	r3, [pc, #316]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017d8:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017da:	2200      	movs	r2, #0
 80017dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017de:	484b      	ldr	r0, [pc, #300]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017e0:	f001 fe0a 	bl	80033f8 <HAL_DMA_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_SPI_MspInit+0x122>
    {
      Error_Handler();
 80017ea:	f7ff fd8f 	bl	800130c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a46      	ldr	r2, [pc, #280]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017f2:	679a      	str	r2, [r3, #120]	; 0x78
 80017f4:	4a45      	ldr	r2, [pc, #276]	; (800190c <HAL_SPI_MspInit+0x240>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2023      	movs	r0, #35	; 0x23
 8001800:	f001 fdc5 	bl	800338e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001804:	2023      	movs	r0, #35	; 0x23
 8001806:	f001 fddc 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800180a:	e073      	b.n	80018f4 <HAL_SPI_MspInit+0x228>
  else if(hspi->Instance==SPI2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_SPI_MspInit+0x248>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d16e      	bne.n	80018f4 <HAL_SPI_MspInit+0x228>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001816:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <HAL_SPI_MspInit+0x234>)
 8001818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800181c:	4a38      	ldr	r2, [pc, #224]	; (8001900 <HAL_SPI_MspInit+0x234>)
 800181e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_SPI_MspInit+0x234>)
 8001828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800182c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <HAL_SPI_MspInit+0x234>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183a:	4a31      	ldr	r2, [pc, #196]	; (8001900 <HAL_SPI_MspInit+0x234>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_SPI_MspInit+0x234>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001852:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001860:	2302      	movs	r3, #2
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001864:	2305      	movs	r3, #5
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	482a      	ldr	r0, [pc, #168]	; (8001918 <HAL_SPI_MspInit+0x24c>)
 8001870:	f004 f8ea 	bl	8005a48 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <HAL_SPI_MspInit+0x250>)
 8001876:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <HAL_SPI_MspInit+0x254>)
 8001878:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_SPI_MspInit+0x250>)
 800187c:	2227      	movs	r2, #39	; 0x27
 800187e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_SPI_MspInit+0x250>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_SPI_MspInit+0x250>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_SPI_MspInit+0x250>)
 800188e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001892:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_SPI_MspInit+0x250>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_SPI_MspInit+0x250>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_SPI_MspInit+0x250>)
 80018a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <HAL_SPI_MspInit+0x250>)
 80018aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018ae:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_SPI_MspInit+0x250>)
 80018b2:	2204      	movs	r2, #4
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_SPI_MspInit+0x250>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_SPI_MspInit+0x250>)
 80018be:	2200      	movs	r2, #0
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_SPI_MspInit+0x250>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80018c8:	4814      	ldr	r0, [pc, #80]	; (800191c <HAL_SPI_MspInit+0x250>)
 80018ca:	f001 fd95 	bl	80033f8 <HAL_DMA_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_SPI_MspInit+0x20c>
      Error_Handler();
 80018d4:	f7ff fd1a 	bl	800130c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_SPI_MspInit+0x250>)
 80018dc:	67da      	str	r2, [r3, #124]	; 0x7c
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_SPI_MspInit+0x250>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2024      	movs	r0, #36	; 0x24
 80018ea:	f001 fd50 	bl	800338e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018ee:	2024      	movs	r0, #36	; 0x24
 80018f0:	f001 fd67 	bl	80033c2 <HAL_NVIC_EnableIRQ>
}
 80018f4:	bf00      	nop
 80018f6:	3730      	adds	r7, #48	; 0x30
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40013000 	.word	0x40013000
 8001900:	58024400 	.word	0x58024400
 8001904:	58020c00 	.word	0x58020c00
 8001908:	58021800 	.word	0x58021800
 800190c:	20018e9c 	.word	0x20018e9c
 8001910:	40020058 	.word	0x40020058
 8001914:	40003800 	.word	0x40003800
 8001918:	58020400 	.word	0x58020400
 800191c:	20000300 	.word	0x20000300
 8001920:	40020040 	.word	0x40020040

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 f966 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <DMA1_Stream0_IRQHandler+0x10>)
 8001986:	f002 fd41 	bl	800440c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200004c4 	.word	0x200004c4

08001994 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <DMA1_Stream1_IRQHandler+0x10>)
 800199a:	f002 fd37 	bl	800440c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20018d48 	.word	0x20018d48

080019a8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <DMA1_Stream2_IRQHandler+0x10>)
 80019ae:	f002 fd2d 	bl	800440c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000300 	.word	0x20000300

080019bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <DMA1_Stream3_IRQHandler+0x10>)
 80019c2:	f002 fd23 	bl	800440c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20018e9c 	.word	0x20018e9c

080019d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <SPI1_IRQHandler+0x10>)
 80019d6:	f008 f887 	bl	8009ae8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20018cc0 	.word	0x20018cc0

080019e4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <SPI2_IRQHandler+0x10>)
 80019ea:	f008 f87d 	bl	8009ae8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000104 	.word	0x20000104

080019f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <SystemInit+0xec>)
 80019fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a02:	4a38      	ldr	r2, [pc, #224]	; (8001ae4 <SystemInit+0xec>)
 8001a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <SystemInit+0xf0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	2b06      	cmp	r3, #6
 8001a16:	d807      	bhi.n	8001a28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <SystemInit+0xf0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 030f 	bic.w	r3, r3, #15
 8001a20:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <SystemInit+0xf0>)
 8001a22:	f043 0307 	orr.w	r3, r3, #7
 8001a26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a28:	4b30      	ldr	r3, [pc, #192]	; (8001aec <SystemInit+0xf4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2f      	ldr	r2, [pc, #188]	; (8001aec <SystemInit+0xf4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a34:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <SystemInit+0xf4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <SystemInit+0xf4>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	492b      	ldr	r1, [pc, #172]	; (8001aec <SystemInit+0xf4>)
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <SystemInit+0xf8>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <SystemInit+0xf0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	2b07      	cmp	r3, #7
 8001a50:	d907      	bls.n	8001a62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a52:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <SystemInit+0xf0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 030f 	bic.w	r3, r3, #15
 8001a5a:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <SystemInit+0xf0>)
 8001a5c:	f043 0307 	orr.w	r3, r3, #7
 8001a60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <SystemInit+0xf4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <SystemInit+0xf4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <SystemInit+0xf4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <SystemInit+0xf4>)
 8001a76:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <SystemInit+0xfc>)
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <SystemInit+0xf4>)
 8001a7c:	4a1e      	ldr	r2, [pc, #120]	; (8001af8 <SystemInit+0x100>)
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <SystemInit+0xf4>)
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <SystemInit+0x104>)
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <SystemInit+0xf4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <SystemInit+0xf4>)
 8001a8e:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <SystemInit+0x104>)
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <SystemInit+0xf4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <SystemInit+0xf4>)
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <SystemInit+0x104>)
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <SystemInit+0xf4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <SystemInit+0xf4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a10      	ldr	r2, [pc, #64]	; (8001aec <SystemInit+0xf4>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <SystemInit+0xf4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <SystemInit+0x108>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <SystemInit+0x10c>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac2:	d202      	bcs.n	8001aca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <SystemInit+0x110>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <SystemInit+0x114>)
 8001acc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SystemInit+0xec>)
 8001ad4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	52002000 	.word	0x52002000
 8001aec:	58024400 	.word	0x58024400
 8001af0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001af4:	02020200 	.word	0x02020200
 8001af8:	01ff0000 	.word	0x01ff0000
 8001afc:	01010280 	.word	0x01010280
 8001b00:	5c001000 	.word	0x5c001000
 8001b04:	ffff0000 	.word	0xffff0000
 8001b08:	51008108 	.word	0x51008108
 8001b0c:	52004000 	.word	0x52004000

08001b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b48 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b14:	f7ff ff70 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b1a:	e003      	b.n	8001b24 <LoopCopyDataInit>

08001b1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b22:	3104      	adds	r1, #4

08001b24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b24:	480a      	ldr	r0, [pc, #40]	; (8001b50 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b2c:	d3f6      	bcc.n	8001b1c <CopyDataInit>
  ldr  r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b30:	e002      	b.n	8001b38 <LoopFillZerobss>

08001b32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b34:	f842 3b04 	str.w	r3, [r2], #4

08001b38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b3c:	d3f9      	bcc.n	8001b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f009 fc5b 	bl	800b3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b42:	f7fe fc29 	bl	8000398 <main>
  bx  lr    
 8001b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b4c:	0800d2fc 	.word	0x0800d2fc
  ldr  r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b54:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001b58:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001b5c:	20018f40 	.word	0x20018f40

08001b60 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC3_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f001 fc04 	bl	8003378 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b70:	f005 f946 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 8001b74:	4601      	mov	r1, r0
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_Init+0x68>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_Init+0x6c>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	fa21 f303 	lsr.w	r3, r1, r3
 8001b8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_Init+0x68>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_Init+0x6c>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <HAL_Init+0x70>)
 8001ba6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <HAL_Init+0x74>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 f814 	bl	8001bdc <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e002      	b.n	8001bc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbe:	f7ff fbad 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	0800cb68 	.word	0x0800cb68
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_InitTick+0x60>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e021      	b.n	8001c34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_InitTick+0x64>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_InitTick+0x60>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 fbe9 	bl	80033de <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c24:	f001 fbb3 	bl	800338e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_InitTick+0x68>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	20000004 	.word	0x20000004
 8001c44:	2000000c 	.word	0x2000000c

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000010 	.word	0x20000010
 8001c6c:	20018f3c 	.word	0x20018f3c

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20018f3c 	.word	0x20018f3c

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_Delay+0x40>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000010 	.word	0x20000010

08001ccc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetREVID+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	5c001000 	.word	0x5c001000

08001ce4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3360      	adds	r3, #96	; 0x60
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d80:	bf00      	nop
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	611a      	str	r2, [r3, #16]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3360      	adds	r3, #96	; 0x60
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]
  }
}
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3330      	adds	r3, #48	; 0x30
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	4413      	add	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	211f      	movs	r1, #31
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0e9b      	lsrs	r3, r3, #26
 8001e52:	f003 011f 	and.w	r1, r3, #31
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	431a      	orrs	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f023 0203 	bic.w	r2, r3, #3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	60da      	str	r2, [r3, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3314      	adds	r3, #20
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	0e5b      	lsrs	r3, r3, #25
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	4413      	add	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	0d1b      	lsrs	r3, r3, #20
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2107      	movs	r1, #7
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0d1b      	lsrs	r3, r3, #20
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	431a      	orrs	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ee2:	bf00      	nop
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0318 	and.w	r3, r3, #24
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f14:	40d9      	lsrs	r1, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	400b      	ands	r3, r1
 8001f1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	000fffff 	.word	0x000fffff

08001f38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 031f 	and.w	r3, r3, #31
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6093      	str	r3, [r2, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	5fffffc0 	.word	0x5fffffc0

08001f78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f8c:	d101      	bne.n	8001f92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	6fffffc0 	.word	0x6fffffc0

08001fc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <LL_ADC_Enable+0x24>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	7fffffc0 	.word	0x7fffffc0

08002018 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <LL_ADC_IsEnabled+0x18>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <LL_ADC_IsEnabled+0x1a>
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <LL_ADC_REG_StartConversion+0x24>)
 800204e:	4013      	ands	r3, r2
 8002050:	f043 0204 	orr.w	r2, r3, #4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	7fffffc0 	.word	0x7fffffc0

08002068 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d101      	bne.n	8002080 <LL_ADC_REG_IsConversionOngoing+0x18>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e18e      	b.n	80023ec <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff f937 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff3f 	bl	8001f78 <LL_ADC_IsDeepPowerDownEnabled>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff25 	bl	8001f54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff5a 	bl	8001fc8 <LL_ADC_IsInternalRegulatorEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d113      	bne.n	8002142 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff3e 	bl	8001fa0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002124:	4b9a      	ldr	r3, [pc, #616]	; (8002390 <HAL_ADC_Init+0x2dc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	4a9a      	ldr	r2, [pc, #616]	; (8002394 <HAL_ADC_Init+0x2e0>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002134:	e002      	b.n	800213c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3b01      	subs	r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f9      	bne.n	8002136 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff3e 	bl	8001fc8 <LL_ADC_IsInternalRegulatorEnabled>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	f043 0210 	orr.w	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	f043 0201 	orr.w	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff78 	bl	8002068 <LL_ADC_REG_IsConversionOngoing>
 8002178:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 8129 	bne.w	80023da <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8125 	bne.w	80023da <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002198:	f043 0202 	orr.w	r2, r3, #2
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff37 	bl	8002018 <LL_ADC_IsEnabled>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d136      	bne.n	800221e <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a78      	ldr	r2, [pc, #480]	; (8002398 <HAL_ADC_Init+0x2e4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_ADC_Init+0x110>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a77      	ldr	r2, [pc, #476]	; (800239c <HAL_ADC_Init+0x2e8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10e      	bne.n	80021e2 <HAL_ADC_Init+0x12e>
 80021c4:	4874      	ldr	r0, [pc, #464]	; (8002398 <HAL_ADC_Init+0x2e4>)
 80021c6:	f7ff ff27 	bl	8002018 <LL_ADC_IsEnabled>
 80021ca:	4604      	mov	r4, r0
 80021cc:	4873      	ldr	r0, [pc, #460]	; (800239c <HAL_ADC_Init+0x2e8>)
 80021ce:	f7ff ff23 	bl	8002018 <LL_ADC_IsEnabled>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4323      	orrs	r3, r4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	bf0c      	ite	eq
 80021da:	2301      	moveq	r3, #1
 80021dc:	2300      	movne	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e008      	b.n	80021f4 <HAL_ADC_Init+0x140>
 80021e2:	486f      	ldr	r0, [pc, #444]	; (80023a0 <HAL_ADC_Init+0x2ec>)
 80021e4:	f7ff ff18 	bl	8002018 <LL_ADC_IsEnabled>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d012      	beq.n	800221e <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a66      	ldr	r2, [pc, #408]	; (8002398 <HAL_ADC_Init+0x2e4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_ADC_Init+0x158>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a65      	ldr	r2, [pc, #404]	; (800239c <HAL_ADC_Init+0x2e8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_ADC_Init+0x15c>
 800220c:	4a65      	ldr	r2, [pc, #404]	; (80023a4 <HAL_ADC_Init+0x2f0>)
 800220e:	e000      	b.n	8002212 <HAL_ADC_Init+0x15e>
 8002210:	4a65      	ldr	r2, [pc, #404]	; (80023a8 <HAL_ADC_Init+0x2f4>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f7ff fd63 	bl	8001ce4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800221e:	f7ff fd55 	bl	8001ccc <HAL_GetREVID>
 8002222:	4602      	mov	r2, r0
 8002224:	f241 0303 	movw	r3, #4099	; 0x1003
 8002228:	429a      	cmp	r2, r3
 800222a:	d914      	bls.n	8002256 <HAL_ADC_Init+0x1a2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b10      	cmp	r3, #16
 8002232:	d110      	bne.n	8002256 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7d5b      	ldrb	r3, [r3, #21]
 8002238:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800223e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002244:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7f1b      	ldrb	r3, [r3, #28]
 800224a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800224c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800224e:	f043 030c 	orr.w	r3, r3, #12
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	e00d      	b.n	8002272 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7d5b      	ldrb	r3, [r3, #21]
 800225a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002260:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002266:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7f1b      	ldrb	r3, [r3, #28]
 800226c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7f1b      	ldrb	r3, [r3, #28]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d106      	bne.n	8002288 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	3b01      	subs	r3, #1
 8002280:	045b      	lsls	r3, r3, #17
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_ADC_Init+0x2f8>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fed3 	bl	8002068 <LL_ADC_REG_IsConversionOngoing>
 80022c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fee0 	bl	800208e <LL_ADC_INJ_IsConversionOngoing>
 80022ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d14a      	bne.n	800236c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d147      	bne.n	800236c <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7d1b      	ldrb	r3, [r3, #20]
 80022e0:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_ADC_Init+0x2fc>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	430b      	orrs	r3, r1
 80022fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002304:	2b01      	cmp	r3, #1
 8002306:	d11b      	bne.n	8002340 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_ADC_Init+0x300>)
 8002316:	4013      	ands	r3, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800231c:	3a01      	subs	r2, #1
 800231e:	0411      	lsls	r1, r2, #16
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002324:	4311      	orrs	r1, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800232a:	4311      	orrs	r1, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002330:	430a      	orrs	r2, r1
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0201 	orr.w	r2, r2, #1
 800233c:	611a      	str	r2, [r3, #16]
 800233e:	e007      	b.n	8002350 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fd3e 	bl	8002de8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d121      	bne.n	80023b8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f023 010f 	bic.w	r1, r3, #15
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	1e5a      	subs	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
 800238c:	e01c      	b.n	80023c8 <HAL_ADC_Init+0x314>
 800238e:	bf00      	nop
 8002390:	20000004 	.word	0x20000004
 8002394:	053e2d63 	.word	0x053e2d63
 8002398:	40022000 	.word	0x40022000
 800239c:	40022100 	.word	0x40022100
 80023a0:	58026000 	.word	0x58026000
 80023a4:	40022300 	.word	0x40022300
 80023a8:	58026300 	.word	0x58026300
 80023ac:	fff0c003 	.word	0xfff0c003
 80023b0:	ffffbffc 	.word	0xffffbffc
 80023b4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 020f 	bic.w	r2, r2, #15
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f023 0303 	bic.w	r3, r3, #3
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54
 80023d8:	e007      	b.n	80023ea <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3724      	adds	r7, #36	; 0x24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}

080023f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a55      	ldr	r2, [pc, #340]	; (800255c <HAL_ADC_Start_DMA+0x168>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_ADC_Start_DMA+0x20>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a54      	ldr	r2, [pc, #336]	; (8002560 <HAL_ADC_Start_DMA+0x16c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <HAL_ADC_Start_DMA+0x24>
 8002414:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_ADC_Start_DMA+0x170>)
 8002416:	e000      	b.n	800241a <HAL_ADC_Start_DMA+0x26>
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_ADC_Start_DMA+0x174>)
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fd8c 	bl	8001f38 <LL_ADC_GetMultimode>
 8002420:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fe1e 	bl	8002068 <LL_ADC_REG_IsConversionOngoing>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 808c 	bne.w	800254c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Start_DMA+0x4e>
 800243e:	2302      	movs	r3, #2
 8002440:	e087      	b.n	8002552 <HAL_ADC_Start_DMA+0x15e>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	2b05      	cmp	r3, #5
 8002454:	d002      	beq.n	800245c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b09      	cmp	r3, #9
 800245a:	d170      	bne.n	800253e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fbab 	bl	8002bb8 <ADC_Enable>
 8002462:	4603      	mov	r3, r0
 8002464:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002466:	7dfb      	ldrb	r3, [r7, #23]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d163      	bne.n	8002534 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_ADC_Start_DMA+0x178>)
 8002472:	4013      	ands	r3, r2
 8002474:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a37      	ldr	r2, [pc, #220]	; (8002560 <HAL_ADC_Start_DMA+0x16c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d002      	beq.n	800248c <HAL_ADC_Start_DMA+0x98>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e000      	b.n	800248e <HAL_ADC_Start_DMA+0x9a>
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_ADC_Start_DMA+0x168>)
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4293      	cmp	r3, r2
 8002494:	d002      	beq.n	800249c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f023 0206 	bic.w	r2, r3, #6
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	659a      	str	r2, [r3, #88]	; 0x58
 80024c0:	e002      	b.n	80024c8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_ADC_Start_DMA+0x17c>)
 80024ce:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <HAL_ADC_Start_DMA+0x180>)
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	4a26      	ldr	r2, [pc, #152]	; (8002578 <HAL_ADC_Start_DMA+0x184>)
 80024de:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	221c      	movs	r2, #28
 80024e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0210 	orr.w	r2, r2, #16
 80024fe:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f7ff fcb1 	bl	8001e72 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3340      	adds	r3, #64	; 0x40
 800251a:	4619      	mov	r1, r3
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f001 fac6 	bl	8003ab0 <HAL_DMA_Start_IT>
 8002524:	4603      	mov	r3, r0
 8002526:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fd87 	bl	8002040 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002532:	e00d      	b.n	8002550 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800253c:	e008      	b.n	8002550 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800254a:	e001      	b.n	8002550 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800254c:	2302      	movs	r3, #2
 800254e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002550:	7dfb      	ldrb	r3, [r7, #23]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40022000 	.word	0x40022000
 8002560:	40022100 	.word	0x40022100
 8002564:	40022300 	.word	0x40022300
 8002568:	58026300 	.word	0x58026300
 800256c:	fffff0fe 	.word	0xfffff0fe
 8002570:	08002cc1 	.word	0x08002cc1
 8002574:	08002d99 	.word	0x08002d99
 8002578:	08002db5 	.word	0x08002db5

0800257c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b099      	sub	sp, #100	; 0x64
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a99      	ldr	r2, [pc, #612]	; (8002810 <HAL_ADC_ConfigChannel+0x280>)
 80025aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x2a>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e2e6      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x5f8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fd4e 	bl	8002068 <LL_ADC_REG_IsConversionOngoing>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 82cb 	bne.w	8002b6a <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d108      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x62>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2201      	movs	r2, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	e00f      	b.n	8002612 <HAL_ADC_ConfigChannel+0x82>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	2201      	movs	r2, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	69d1      	ldr	r1, [r2, #28]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	430b      	orrs	r3, r1
 800261e:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	f7ff fbf4 	bl	8001e1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fd16 	bl	8002068 <LL_ADC_REG_IsConversionOngoing>
 800263c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fd23 	bl	800208e <LL_ADC_INJ_IsConversionOngoing>
 8002648:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800264a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 80b3 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 80af 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	461a      	mov	r2, r3
 8002668:	f7ff fc16 	bl	8001e98 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800266c:	4b69      	ldr	r3, [pc, #420]	; (8002814 <HAL_ADC_ConfigChannel+0x284>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002678:	d10b      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x102>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	e01d      	b.n	80026ce <HAL_ADC_ConfigChannel+0x13e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x128>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	e00a      	b.n	80026ce <HAL_ADC_ConfigChannel+0x13e>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d027      	beq.n	8002728 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6919      	ldr	r1, [r3, #16]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e6:	f7ff fb31 	bl	8001d4c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6919      	ldr	r1, [r3, #16]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	7e5b      	ldrb	r3, [r3, #25]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x170>
 80026fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80026fe:	e000      	b.n	8002702 <HAL_ADC_ConfigChannel+0x172>
 8002700:	2300      	movs	r3, #0
 8002702:	461a      	mov	r2, r3
 8002704:	f7ff fb5b 	bl	8001dbe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6919      	ldr	r1, [r3, #16]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	7e1b      	ldrb	r3, [r3, #24]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d102      	bne.n	800271e <HAL_ADC_ConfigChannel+0x18e>
 8002718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800271c:	e000      	b.n	8002720 <HAL_ADC_ConfigChannel+0x190>
 800271e:	2300      	movs	r3, #0
 8002720:	461a      	mov	r2, r3
 8002722:	f7ff fb33 	bl	8001d8c <LL_ADC_SetDataRightShift>
 8002726:	e047      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	069b      	lsls	r3, r3, #26
 8002738:	429a      	cmp	r2, r3
 800273a:	d107      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800274a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	069b      	lsls	r3, r3, #26
 800275c:	429a      	cmp	r2, r3
 800275e:	d107      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800276e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	069b      	lsls	r3, r3, #26
 8002780:	429a      	cmp	r2, r3
 8002782:	d107      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002792:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800279a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	069b      	lsls	r3, r3, #26
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d107      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027b6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fc2b 	bl	8002018 <LL_ADC_IsEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 81d9 	bne.w	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f7ff fb8a 	bl	8001ef0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <HAL_ADC_ConfigChannel+0x280>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f040 8101 	bne.w	80029ea <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10f      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x288>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2b09      	cmp	r3, #9
 8002806:	bf94      	ite	ls
 8002808:	2301      	movls	r3, #1
 800280a:	2300      	movhi	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e016      	b.n	800283e <HAL_ADC_ConfigChannel+0x2ae>
 8002810:	47ff0000 	.word	0x47ff0000
 8002814:	5c001000 	.word	0x5c001000
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	2b09      	cmp	r3, #9
 8002836:	bf94      	ite	ls
 8002838:	2301      	movls	r3, #1
 800283a:	2300      	movhi	r3, #0
 800283c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800283e:	2b00      	cmp	r3, #0
 8002840:	d064      	beq.n	800290c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800284a:	2b00      	cmp	r3, #0
 800284c:	d107      	bne.n	800285e <HAL_ADC_ConfigChannel+0x2ce>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	3301      	adds	r3, #1
 8002856:	069b      	lsls	r3, r3, #26
 8002858:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285c:	e00e      	b.n	800287c <HAL_ADC_ConfigChannel+0x2ec>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3301      	adds	r3, #1
 8002876:	069b      	lsls	r3, r3, #26
 8002878:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <HAL_ADC_ConfigChannel+0x30c>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	3301      	adds	r3, #1
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	e010      	b.n	80028be <HAL_ADC_ConfigChannel+0x32e>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	ea42 0103 	orr.w	r1, r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x354>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	3301      	adds	r3, #1
 80028d6:	f003 021f 	and.w	r2, r3, #31
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	051b      	lsls	r3, r3, #20
 80028e2:	e011      	b.n	8002908 <HAL_ADC_ConfigChannel+0x378>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002908:	430b      	orrs	r3, r1
 800290a:	e069      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x398>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	3301      	adds	r3, #1
 8002920:	069b      	lsls	r3, r3, #26
 8002922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002926:	e00e      	b.n	8002946 <HAL_ADC_ConfigChannel+0x3b6>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	61fb      	str	r3, [r7, #28]
  return result;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	3301      	adds	r3, #1
 8002940:	069b      	lsls	r3, r3, #26
 8002942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x3d6>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	3301      	adds	r3, #1
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	e010      	b.n	8002988 <HAL_ADC_ConfigChannel+0x3f8>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	617b      	str	r3, [r7, #20]
  return result;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3301      	adds	r3, #1
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2101      	movs	r1, #1
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	ea42 0103 	orr.w	r1, r2, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10d      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x424>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0e9b      	lsrs	r3, r3, #26
 800299e:	3301      	adds	r3, #1
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	3b1e      	subs	r3, #30
 80029ac:	051b      	lsls	r3, r3, #20
 80029ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029b2:	e014      	b.n	80029de <HAL_ADC_ConfigChannel+0x44e>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	60fb      	str	r3, [r7, #12]
  return result;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	3b1e      	subs	r3, #30
 80029d8:	051b      	lsls	r3, r3, #20
 80029da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029de:	430b      	orrs	r3, r1
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	6892      	ldr	r2, [r2, #8]
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7ff fa57 	bl	8001e98 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f280 80c4 	bge.w	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a65      	ldr	r2, [pc, #404]	; (8002b90 <HAL_ADC_ConfigChannel+0x600>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_ADC_ConfigChannel+0x478>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a64      	ldr	r2, [pc, #400]	; (8002b94 <HAL_ADC_ConfigChannel+0x604>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d101      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x47c>
 8002a08:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_ADC_ConfigChannel+0x608>)
 8002a0a:	e000      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x47e>
 8002a0c:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_ADC_ConfigChannel+0x60c>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f98e 	bl	8001d30 <LL_ADC_GetCommonPathInternalCh>
 8002a14:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a5d      	ldr	r2, [pc, #372]	; (8002b90 <HAL_ADC_ConfigChannel+0x600>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x49a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5b      	ldr	r2, [pc, #364]	; (8002b94 <HAL_ADC_ConfigChannel+0x604>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10e      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x4b8>
 8002a2a:	4859      	ldr	r0, [pc, #356]	; (8002b90 <HAL_ADC_ConfigChannel+0x600>)
 8002a2c:	f7ff faf4 	bl	8002018 <LL_ADC_IsEnabled>
 8002a30:	4604      	mov	r4, r0
 8002a32:	4858      	ldr	r0, [pc, #352]	; (8002b94 <HAL_ADC_ConfigChannel+0x604>)
 8002a34:	f7ff faf0 	bl	8002018 <LL_ADC_IsEnabled>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4323      	orrs	r3, r4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e008      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x4ca>
 8002a48:	4855      	ldr	r0, [pc, #340]	; (8002ba0 <HAL_ADC_ConfigChannel+0x610>)
 8002a4a:	f7ff fae5 	bl	8002018 <LL_ADC_IsEnabled>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d07b      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a50      	ldr	r2, [pc, #320]	; (8002ba4 <HAL_ADC_ConfigChannel+0x614>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d12e      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x536>
 8002a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d129      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <HAL_ADC_ConfigChannel+0x610>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d17f      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a43      	ldr	r2, [pc, #268]	; (8002b90 <HAL_ADC_ConfigChannel+0x600>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x500>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <HAL_ADC_ConfigChannel+0x604>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x504>
 8002a90:	4a41      	ldr	r2, [pc, #260]	; (8002b98 <HAL_ADC_ConfigChannel+0x608>)
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x506>
 8002a94:	4a41      	ldr	r2, [pc, #260]	; (8002b9c <HAL_ADC_ConfigChannel+0x60c>)
 8002a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f7ff f933 	bl	8001d0a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002aa4:	4b40      	ldr	r3, [pc, #256]	; (8002ba8 <HAL_ADC_ConfigChannel+0x618>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	4a40      	ldr	r2, [pc, #256]	; (8002bac <HAL_ADC_ConfigChannel+0x61c>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ab6:	e002      	b.n	8002abe <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f9      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ac4:	e05a      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a39      	ldr	r2, [pc, #228]	; (8002bb0 <HAL_ADC_ConfigChannel+0x620>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d11e      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x57e>
 8002ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d119      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <HAL_ADC_ConfigChannel+0x610>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d14b      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <HAL_ADC_ConfigChannel+0x600>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_ADC_ConfigChannel+0x568>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <HAL_ADC_ConfigChannel+0x604>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x56c>
 8002af8:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <HAL_ADC_ConfigChannel+0x608>)
 8002afa:	e000      	b.n	8002afe <HAL_ADC_ConfigChannel+0x56e>
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <HAL_ADC_ConfigChannel+0x60c>)
 8002afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f7ff f8ff 	bl	8001d0a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b0c:	e036      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <HAL_ADC_ConfigChannel+0x624>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d131      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
 8002b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d12c      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_ADC_ConfigChannel+0x610>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d127      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HAL_ADC_ConfigChannel+0x600>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x5b0>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <HAL_ADC_ConfigChannel+0x604>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x5b4>
 8002b40:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <HAL_ADC_ConfigChannel+0x608>)
 8002b42:	e000      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x5b6>
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <HAL_ADC_ConfigChannel+0x60c>)
 8002b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f7ff f8db 	bl	8001d0a <LL_ADC_SetCommonPathInternalCh>
 8002b54:	e012      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b68:	e008      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3764      	adds	r7, #100	; 0x64
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd90      	pop	{r4, r7, pc}
 8002b90:	40022000 	.word	0x40022000
 8002b94:	40022100 	.word	0x40022100
 8002b98:	40022300 	.word	0x40022300
 8002b9c:	58026300 	.word	0x58026300
 8002ba0:	58026000 	.word	0x58026000
 8002ba4:	cb840000 	.word	0xcb840000
 8002ba8:	20000004 	.word	0x20000004
 8002bac:	053e2d63 	.word	0x053e2d63
 8002bb0:	c7520000 	.word	0xc7520000
 8002bb4:	cfb80000 	.word	0xcfb80000

08002bb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fa27 	bl	8002018 <LL_ADC_IsEnabled>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d167      	bne.n	8002ca0 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	4b35      	ldr	r3, [pc, #212]	; (8002cac <ADC_Enable+0xf4>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e053      	b.n	8002ca2 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f9f6 	bl	8001ff0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c04:	f7ff f834 	bl	8001c70 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <ADC_Enable+0xf8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <ADC_Enable+0x66>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <ADC_Enable+0xfc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <ADC_Enable+0x6a>
 8002c1e:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <ADC_Enable+0x100>)
 8002c20:	e000      	b.n	8002c24 <ADC_Enable+0x6c>
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <ADC_Enable+0x104>)
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff f987 	bl	8001f38 <LL_ADC_GetMultimode>
 8002c2a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <ADC_Enable+0xfc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d002      	beq.n	8002c3c <ADC_Enable+0x84>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	e000      	b.n	8002c3e <ADC_Enable+0x86>
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <ADC_Enable+0xf8>)
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d025      	beq.n	8002c92 <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d129      	bne.n	8002ca0 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c4c:	e021      	b.n	8002c92 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f9e0 	bl	8002018 <LL_ADC_IsEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff f9c4 	bl	8001ff0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c68:	f7ff f802 	bl	8001c70 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d90d      	bls.n	8002c92 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f043 0210 	orr.w	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	f043 0201 	orr.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e007      	b.n	8002ca2 <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d1d6      	bne.n	8002c4e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	8000003f 	.word	0x8000003f
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40022100 	.word	0x40022100
 8002cb8:	40022300 	.word	0x40022300
 8002cbc:	58026300 	.word	0x58026300

08002cc0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d14b      	bne.n	8002d72 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d021      	beq.n	8002d38 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f87b 	bl	8001df4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d032      	beq.n	8002d6a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d12b      	bne.n	8002d6a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11f      	bne.n	8002d6a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
 8002d36:	e018      	b.n	8002d6a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d111      	bne.n	8002d6a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7fe faae 	bl	80012cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d70:	e00e      	b.n	8002d90 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff fbfc 	bl	800257c <HAL_ADC_ErrorCallback>
}
 8002d84:	e004      	b.n	8002d90 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f7fe fa9b 	bl	80012e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	f043 0204 	orr.w	r2, r3, #4
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff fbce 	bl	800257c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a70      	ldr	r2, [pc, #448]	; (8002fb8 <ADC_ConfigureBoostMode+0x1d0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <ADC_ConfigureBoostMode+0x1c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6f      	ldr	r2, [pc, #444]	; (8002fbc <ADC_ConfigureBoostMode+0x1d4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d109      	bne.n	8002e18 <ADC_ConfigureBoostMode+0x30>
 8002e04:	4b6e      	ldr	r3, [pc, #440]	; (8002fc0 <ADC_ConfigureBoostMode+0x1d8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e008      	b.n	8002e2a <ADC_ConfigureBoostMode+0x42>
 8002e18:	4b6a      	ldr	r3, [pc, #424]	; (8002fc4 <ADC_ConfigureBoostMode+0x1dc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01a      	beq.n	8002e64 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e2e:	f004 f959 	bl	80070e4 <HAL_RCC_GetHCLKFreq>
 8002e32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e3c:	d006      	beq.n	8002e4c <ADC_ConfigureBoostMode+0x64>
 8002e3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e42:	d00b      	beq.n	8002e5c <ADC_ConfigureBoostMode+0x74>
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e48:	d000      	beq.n	8002e4c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002e4a:	e05d      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	60fb      	str	r3, [r7, #12]
        break;
 8002e5a:	e055      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	60fb      	str	r3, [r7, #12]
        break;
 8002e62:	e051      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e68:	f005 f85a 	bl	8007f20 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e6c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e76:	d02a      	beq.n	8002ece <ADC_ConfigureBoostMode+0xe6>
 8002e78:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e7c:	d813      	bhi.n	8002ea6 <ADC_ConfigureBoostMode+0xbe>
 8002e7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e82:	d024      	beq.n	8002ece <ADC_ConfigureBoostMode+0xe6>
 8002e84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e88:	d806      	bhi.n	8002e98 <ADC_ConfigureBoostMode+0xb0>
 8002e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e8e:	d01e      	beq.n	8002ece <ADC_ConfigureBoostMode+0xe6>
 8002e90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e94:	d01b      	beq.n	8002ece <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002e96:	e037      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9c:	d017      	beq.n	8002ece <ADC_ConfigureBoostMode+0xe6>
 8002e9e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ea2:	d014      	beq.n	8002ece <ADC_ConfigureBoostMode+0xe6>
        break;
 8002ea4:	e030      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002ea6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002eaa:	d021      	beq.n	8002ef0 <ADC_ConfigureBoostMode+0x108>
 8002eac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002eb0:	d806      	bhi.n	8002ec0 <ADC_ConfigureBoostMode+0xd8>
 8002eb2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002eb6:	d013      	beq.n	8002ee0 <ADC_ConfigureBoostMode+0xf8>
 8002eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ebc:	d014      	beq.n	8002ee8 <ADC_ConfigureBoostMode+0x100>
        break;
 8002ebe:	e023      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002ec0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002ec4:	d018      	beq.n	8002ef8 <ADC_ConfigureBoostMode+0x110>
 8002ec6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002eca:	d019      	beq.n	8002f00 <ADC_ConfigureBoostMode+0x118>
        break;
 8002ecc:	e01c      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	0c9b      	lsrs	r3, r3, #18
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	60fb      	str	r3, [r7, #12]
        break;
 8002ede:	e013      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]
        break;
 8002ee6:	e00f      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	60fb      	str	r3, [r7, #12]
        break;
 8002eee:	e00b      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	60fb      	str	r3, [r7, #12]
        break;
 8002ef6:	e007      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	09db      	lsrs	r3, r3, #7
 8002efc:	60fb      	str	r3, [r7, #12]
        break;
 8002efe:	e003      	b.n	8002f08 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	60fb      	str	r3, [r7, #12]
        break;
 8002f06:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f08:	f7fe fee0 	bl	8001ccc <HAL_GetREVID>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d815      	bhi.n	8002f42 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <ADC_ConfigureBoostMode+0x1e0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d908      	bls.n	8002f30 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f2e:	e03e      	b.n	8002fae <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	e035      	b.n	8002fae <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <ADC_ConfigureBoostMode+0x1e4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d808      	bhi.n	8002f62 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	e025      	b.n	8002fae <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <ADC_ConfigureBoostMode+0x1e8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d80a      	bhi.n	8002f80 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	e016      	b.n	8002fae <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <ADC_ConfigureBoostMode+0x1ec>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d80a      	bhi.n	8002f9e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	e007      	b.n	8002fae <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002fac:	609a      	str	r2, [r3, #8]
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40022100 	.word	0x40022100
 8002fc0:	40022300 	.word	0x40022300
 8002fc4:	58026300 	.word	0x58026300
 8002fc8:	01312d00 	.word	0x01312d00
 8002fcc:	005f5e10 	.word	0x005f5e10
 8002fd0:	00bebc20 	.word	0x00bebc20
 8002fd4:	017d7840 	.word	0x017d7840

08002fd8 <LL_ADC_IsEnabled>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <LL_ADC_IsEnabled+0x18>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_ADC_IsEnabled+0x1a>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_ADC_REG_IsConversionOngoing>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d101      	bne.n	8003016 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b09f      	sub	sp, #124	; 0x7c
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0ba      	b.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5c      	ldr	r2, [pc, #368]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d102      	bne.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003054:	4b5b      	ldr	r3, [pc, #364]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	e001      	b.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e09d      	b.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ffbd 	bl	8002ffe <LL_ADC_REG_IsConversionOngoing>
 8003084:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ffb7 	bl	8002ffe <LL_ADC_REG_IsConversionOngoing>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d17f      	bne.n	8003196 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003098:	2b00      	cmp	r3, #0
 800309a:	d17c      	bne.n	8003196 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a47      	ldr	r2, [pc, #284]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a46      	ldr	r2, [pc, #280]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80030b0:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030b2:	e000      	b.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80030b4:	4b45      	ldr	r3, [pc, #276]	; (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030b6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d039      	beq.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80030c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3a      	ldr	r2, [pc, #232]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a38      	ldr	r2, [pc, #224]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10e      	bne.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80030e6:	4836      	ldr	r0, [pc, #216]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80030e8:	f7ff ff76 	bl	8002fd8 <LL_ADC_IsEnabled>
 80030ec:	4604      	mov	r4, r0
 80030ee:	4835      	ldr	r0, [pc, #212]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030f0:	f7ff ff72 	bl	8002fd8 <LL_ADC_IsEnabled>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4323      	orrs	r3, r4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e008      	b.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003104:	4832      	ldr	r0, [pc, #200]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003106:	f7ff ff67 	bl	8002fd8 <LL_ADC_IsEnabled>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d047      	beq.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800311a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003120:	4013      	ands	r3, r2
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	6811      	ldr	r1, [r2, #0]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	6892      	ldr	r2, [r2, #8]
 800312a:	430a      	orrs	r2, r1
 800312c:	431a      	orrs	r2, r3
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003132:	e03a      	b.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800313c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10e      	bne.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003154:	481a      	ldr	r0, [pc, #104]	; (80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003156:	f7ff ff3f 	bl	8002fd8 <LL_ADC_IsEnabled>
 800315a:	4604      	mov	r4, r0
 800315c:	4819      	ldr	r0, [pc, #100]	; (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800315e:	f7ff ff3b 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	4323      	orrs	r3, r4
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf0c      	ite	eq
 800316a:	2301      	moveq	r3, #1
 800316c:	2300      	movne	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e008      	b.n	8003184 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003172:	4817      	ldr	r0, [pc, #92]	; (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003174:	f7ff ff30 	bl	8002fd8 <LL_ADC_IsEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800318e:	4013      	ands	r3, r2
 8003190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003192:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003194:	e009      	b.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80031a8:	e000      	b.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031aa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	377c      	adds	r7, #124	; 0x7c
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}
 80031c0:	40022000 	.word	0x40022000
 80031c4:	40022100 	.word	0x40022100
 80031c8:	40022300 	.word	0x40022300
 80031cc:	58026300 	.word	0x58026300
 80031d0:	58026000 	.word	0x58026000
 80031d4:	fffff0e0 	.word	0xfffff0e0

080031d8 <__NVIC_SetPriorityGrouping>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <__NVIC_SetPriorityGrouping+0x40>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f4:	4013      	ands	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <__NVIC_SetPriorityGrouping+0x44>)
 8003202:	4313      	orrs	r3, r2
 8003204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003206:	4a04      	ldr	r2, [pc, #16]	; (8003218 <__NVIC_SetPriorityGrouping+0x40>)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60d3      	str	r3, [r2, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00
 800321c:	05fa0000 	.word	0x05fa0000

08003220 <__NVIC_GetPriorityGrouping>:
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <__NVIC_GetPriorityGrouping+0x18>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 0307 	and.w	r3, r3, #7
}
 800322e:	4618      	mov	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <__NVIC_EnableIRQ>:
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324a:	2b00      	cmp	r3, #0
 800324c:	db0b      	blt.n	8003266 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	f003 021f 	and.w	r2, r3, #31
 8003254:	4907      	ldr	r1, [pc, #28]	; (8003274 <__NVIC_EnableIRQ+0x38>)
 8003256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	2001      	movs	r0, #1
 800325e:	fa00 f202 	lsl.w	r2, r0, r2
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000e100 	.word	0xe000e100

08003278 <__NVIC_SetPriority>:
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003288:	2b00      	cmp	r3, #0
 800328a:	db0a      	blt.n	80032a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	490c      	ldr	r1, [pc, #48]	; (80032c4 <__NVIC_SetPriority+0x4c>)
 8003292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	440b      	add	r3, r1
 800329c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032a0:	e00a      	b.n	80032b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4908      	ldr	r1, [pc, #32]	; (80032c8 <__NVIC_SetPriority+0x50>)
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	3b04      	subs	r3, #4
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	440b      	add	r3, r1
 80032b6:	761a      	strb	r2, [r3, #24]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000e100 	.word	0xe000e100
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <NVIC_EncodePriority>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	; 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f1c3 0307 	rsb	r3, r3, #7
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	bf28      	it	cs
 80032ea:	2304      	movcs	r3, #4
 80032ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d902      	bls.n	80032fc <NVIC_EncodePriority+0x30>
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3b03      	subs	r3, #3
 80032fa:	e000      	b.n	80032fe <NVIC_EncodePriority+0x32>
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	401a      	ands	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	43d9      	mvns	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003324:	4313      	orrs	r3, r2
}
 8003326:	4618      	mov	r0, r3
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003344:	d301      	bcc.n	800334a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003346:	2301      	movs	r3, #1
 8003348:	e00f      	b.n	800336a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <SysTick_Config+0x40>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003352:	210f      	movs	r1, #15
 8003354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003358:	f7ff ff8e 	bl	8003278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <SysTick_Config+0x40>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <SysTick_Config+0x40>)
 8003364:	2207      	movs	r2, #7
 8003366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	e000e010 	.word	0xe000e010

08003378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff29 	bl	80031d8 <__NVIC_SetPriorityGrouping>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800339c:	f7ff ff40 	bl	8003220 <__NVIC_GetPriorityGrouping>
 80033a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	6978      	ldr	r0, [r7, #20]
 80033a8:	f7ff ff90 	bl	80032cc <NVIC_EncodePriority>
 80033ac:	4602      	mov	r2, r0
 80033ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff5f 	bl	8003278 <__NVIC_SetPriority>
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff33 	bl	800323c <__NVIC_EnableIRQ>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffa4 	bl	8003334 <SysTick_Config>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7fe fc36 	bl	8001c70 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e316      	b.n	8003a3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a66      	ldr	r2, [pc, #408]	; (80035b0 <HAL_DMA_Init+0x1b8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d04a      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a65      	ldr	r2, [pc, #404]	; (80035b4 <HAL_DMA_Init+0x1bc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d045      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_DMA_Init+0x1c0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d040      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a62      	ldr	r2, [pc, #392]	; (80035bc <HAL_DMA_Init+0x1c4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d03b      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a60      	ldr	r2, [pc, #384]	; (80035c0 <HAL_DMA_Init+0x1c8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d036      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a5f      	ldr	r2, [pc, #380]	; (80035c4 <HAL_DMA_Init+0x1cc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d031      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5d      	ldr	r2, [pc, #372]	; (80035c8 <HAL_DMA_Init+0x1d0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d02c      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a5c      	ldr	r2, [pc, #368]	; (80035cc <HAL_DMA_Init+0x1d4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d027      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5a      	ldr	r2, [pc, #360]	; (80035d0 <HAL_DMA_Init+0x1d8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d022      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a59      	ldr	r2, [pc, #356]	; (80035d4 <HAL_DMA_Init+0x1dc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01d      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a57      	ldr	r2, [pc, #348]	; (80035d8 <HAL_DMA_Init+0x1e0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d018      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a56      	ldr	r2, [pc, #344]	; (80035dc <HAL_DMA_Init+0x1e4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a54      	ldr	r2, [pc, #336]	; (80035e0 <HAL_DMA_Init+0x1e8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a53      	ldr	r2, [pc, #332]	; (80035e4 <HAL_DMA_Init+0x1ec>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a51      	ldr	r2, [pc, #324]	; (80035e8 <HAL_DMA_Init+0x1f0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_DMA_Init+0xb8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a50      	ldr	r2, [pc, #320]	; (80035ec <HAL_DMA_Init+0x1f4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_Init+0xbc>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_Init+0xbe>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 813b 	beq.w	8003732 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a37      	ldr	r2, [pc, #220]	; (80035b0 <HAL_DMA_Init+0x1b8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d04a      	beq.n	800356c <HAL_DMA_Init+0x174>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a36      	ldr	r2, [pc, #216]	; (80035b4 <HAL_DMA_Init+0x1bc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d045      	beq.n	800356c <HAL_DMA_Init+0x174>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a34      	ldr	r2, [pc, #208]	; (80035b8 <HAL_DMA_Init+0x1c0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d040      	beq.n	800356c <HAL_DMA_Init+0x174>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a33      	ldr	r2, [pc, #204]	; (80035bc <HAL_DMA_Init+0x1c4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d03b      	beq.n	800356c <HAL_DMA_Init+0x174>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a31      	ldr	r2, [pc, #196]	; (80035c0 <HAL_DMA_Init+0x1c8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d036      	beq.n	800356c <HAL_DMA_Init+0x174>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <HAL_DMA_Init+0x1cc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d031      	beq.n	800356c <HAL_DMA_Init+0x174>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a2e      	ldr	r2, [pc, #184]	; (80035c8 <HAL_DMA_Init+0x1d0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02c      	beq.n	800356c <HAL_DMA_Init+0x174>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2d      	ldr	r2, [pc, #180]	; (80035cc <HAL_DMA_Init+0x1d4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d027      	beq.n	800356c <HAL_DMA_Init+0x174>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <HAL_DMA_Init+0x1d8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d022      	beq.n	800356c <HAL_DMA_Init+0x174>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <HAL_DMA_Init+0x1dc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d01d      	beq.n	800356c <HAL_DMA_Init+0x174>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a28      	ldr	r2, [pc, #160]	; (80035d8 <HAL_DMA_Init+0x1e0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_DMA_Init+0x174>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a27      	ldr	r2, [pc, #156]	; (80035dc <HAL_DMA_Init+0x1e4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_DMA_Init+0x174>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <HAL_DMA_Init+0x1e8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_DMA_Init+0x174>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <HAL_DMA_Init+0x1ec>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_DMA_Init+0x174>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <HAL_DMA_Init+0x1f0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_DMA_Init+0x174>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a21      	ldr	r2, [pc, #132]	; (80035ec <HAL_DMA_Init+0x1f4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d108      	bne.n	800357e <HAL_DMA_Init+0x186>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e007      	b.n	800358e <HAL_DMA_Init+0x196>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800358e:	e02f      	b.n	80035f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003590:	f7fe fb6e 	bl	8001c70 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b05      	cmp	r3, #5
 800359c:	d928      	bls.n	80035f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2203      	movs	r2, #3
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e246      	b.n	8003a3e <HAL_DMA_Init+0x646>
 80035b0:	40020010 	.word	0x40020010
 80035b4:	40020028 	.word	0x40020028
 80035b8:	40020040 	.word	0x40020040
 80035bc:	40020058 	.word	0x40020058
 80035c0:	40020070 	.word	0x40020070
 80035c4:	40020088 	.word	0x40020088
 80035c8:	400200a0 	.word	0x400200a0
 80035cc:	400200b8 	.word	0x400200b8
 80035d0:	40020410 	.word	0x40020410
 80035d4:	40020428 	.word	0x40020428
 80035d8:	40020440 	.word	0x40020440
 80035dc:	40020458 	.word	0x40020458
 80035e0:	40020470 	.word	0x40020470
 80035e4:	40020488 	.word	0x40020488
 80035e8:	400204a0 	.word	0x400204a0
 80035ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1c8      	bne.n	8003590 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4b83      	ldr	r3, [pc, #524]	; (8003818 <HAL_DMA_Init+0x420>)
 800360a:	4013      	ands	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003616:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003622:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2b04      	cmp	r3, #4
 8003642:	d107      	bne.n	8003654 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	4313      	orrs	r3, r2
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003654:	4b71      	ldr	r3, [pc, #452]	; (800381c <HAL_DMA_Init+0x424>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b71      	ldr	r3, [pc, #452]	; (8003820 <HAL_DMA_Init+0x428>)
 800365a:	4013      	ands	r3, r2
 800365c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003660:	d328      	bcc.n	80036b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b28      	cmp	r3, #40	; 0x28
 8003668:	d903      	bls.n	8003672 <HAL_DMA_Init+0x27a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b2e      	cmp	r3, #46	; 0x2e
 8003670:	d917      	bls.n	80036a2 <HAL_DMA_Init+0x2aa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b3e      	cmp	r3, #62	; 0x3e
 8003678:	d903      	bls.n	8003682 <HAL_DMA_Init+0x28a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b42      	cmp	r3, #66	; 0x42
 8003680:	d90f      	bls.n	80036a2 <HAL_DMA_Init+0x2aa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b46      	cmp	r3, #70	; 0x46
 8003688:	d903      	bls.n	8003692 <HAL_DMA_Init+0x29a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b48      	cmp	r3, #72	; 0x48
 8003690:	d907      	bls.n	80036a2 <HAL_DMA_Init+0x2aa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b4e      	cmp	r3, #78	; 0x4e
 8003698:	d905      	bls.n	80036a6 <HAL_DMA_Init+0x2ae>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b52      	cmp	r3, #82	; 0x52
 80036a0:	d801      	bhi.n	80036a6 <HAL_DMA_Init+0x2ae>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_DMA_Init+0x2b0>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d117      	bne.n	800370e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f002 f81f 	bl	8005734 <DMA_CheckFifoParam>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2240      	movs	r2, #64	; 0x40
 8003700:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e197      	b.n	8003a3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 ff5a 	bl	80055d0 <DMA_CalcBaseAndBitshift>
 800371c:	4603      	mov	r3, r0
 800371e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	223f      	movs	r2, #63	; 0x3f
 800372a:	409a      	lsls	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	e0cd      	b.n	80038ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <HAL_DMA_Init+0x42c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d022      	beq.n	8003782 <HAL_DMA_Init+0x38a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a39      	ldr	r2, [pc, #228]	; (8003828 <HAL_DMA_Init+0x430>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01d      	beq.n	8003782 <HAL_DMA_Init+0x38a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a38      	ldr	r2, [pc, #224]	; (800382c <HAL_DMA_Init+0x434>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_DMA_Init+0x38a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a36      	ldr	r2, [pc, #216]	; (8003830 <HAL_DMA_Init+0x438>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_DMA_Init+0x38a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a35      	ldr	r2, [pc, #212]	; (8003834 <HAL_DMA_Init+0x43c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_DMA_Init+0x38a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a33      	ldr	r2, [pc, #204]	; (8003838 <HAL_DMA_Init+0x440>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_DMA_Init+0x38a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a32      	ldr	r2, [pc, #200]	; (800383c <HAL_DMA_Init+0x444>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_DMA_Init+0x38a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a30      	ldr	r2, [pc, #192]	; (8003840 <HAL_DMA_Init+0x448>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d101      	bne.n	8003786 <HAL_DMA_Init+0x38e>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_DMA_Init+0x390>
 8003786:	2300      	movs	r3, #0
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8097 	beq.w	80038bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a24      	ldr	r2, [pc, #144]	; (8003824 <HAL_DMA_Init+0x42c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d021      	beq.n	80037dc <HAL_DMA_Init+0x3e4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a22      	ldr	r2, [pc, #136]	; (8003828 <HAL_DMA_Init+0x430>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01c      	beq.n	80037dc <HAL_DMA_Init+0x3e4>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a21      	ldr	r2, [pc, #132]	; (800382c <HAL_DMA_Init+0x434>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d017      	beq.n	80037dc <HAL_DMA_Init+0x3e4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_DMA_Init+0x438>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d012      	beq.n	80037dc <HAL_DMA_Init+0x3e4>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_DMA_Init+0x43c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00d      	beq.n	80037dc <HAL_DMA_Init+0x3e4>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_DMA_Init+0x440>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d008      	beq.n	80037dc <HAL_DMA_Init+0x3e4>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1b      	ldr	r2, [pc, #108]	; (800383c <HAL_DMA_Init+0x444>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <HAL_DMA_Init+0x3e4>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_DMA_Init+0x448>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_DMA_Init+0x44c>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d020      	beq.n	8003848 <HAL_DMA_Init+0x450>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d102      	bne.n	8003814 <HAL_DMA_Init+0x41c>
 800380e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003812:	e01a      	b.n	800384a <HAL_DMA_Init+0x452>
 8003814:	2300      	movs	r3, #0
 8003816:	e018      	b.n	800384a <HAL_DMA_Init+0x452>
 8003818:	fe10803f 	.word	0xfe10803f
 800381c:	5c001000 	.word	0x5c001000
 8003820:	ffff0000 	.word	0xffff0000
 8003824:	58025408 	.word	0x58025408
 8003828:	5802541c 	.word	0x5802541c
 800382c:	58025430 	.word	0x58025430
 8003830:	58025444 	.word	0x58025444
 8003834:	58025458 	.word	0x58025458
 8003838:	5802546c 	.word	0x5802546c
 800383c:	58025480 	.word	0x58025480
 8003840:	58025494 	.word	0x58025494
 8003844:	fffe000f 	.word	0xfffe000f
 8003848:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68d2      	ldr	r2, [r2, #12]
 800384e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003858:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003860:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003878:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	4b6e      	ldr	r3, [pc, #440]	; (8003a48 <HAL_DMA_Init+0x650>)
 8003890:	4413      	add	r3, r2
 8003892:	4a6e      	ldr	r2, [pc, #440]	; (8003a4c <HAL_DMA_Init+0x654>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	009a      	lsls	r2, r3, #2
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f001 fe95 	bl	80055d0 <DMA_CalcBaseAndBitshift>
 80038a6:	4603      	mov	r3, r0
 80038a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2201      	movs	r2, #1
 80038b4:	409a      	lsls	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	e008      	b.n	80038ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2240      	movs	r2, #64	; 0x40
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2203      	movs	r2, #3
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0b7      	b.n	8003a3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a5f      	ldr	r2, [pc, #380]	; (8003a50 <HAL_DMA_Init+0x658>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d072      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_DMA_Init+0x65c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d06d      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a5c      	ldr	r2, [pc, #368]	; (8003a58 <HAL_DMA_Init+0x660>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d068      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a5a      	ldr	r2, [pc, #360]	; (8003a5c <HAL_DMA_Init+0x664>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d063      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a59      	ldr	r2, [pc, #356]	; (8003a60 <HAL_DMA_Init+0x668>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d05e      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a57      	ldr	r2, [pc, #348]	; (8003a64 <HAL_DMA_Init+0x66c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d059      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a56      	ldr	r2, [pc, #344]	; (8003a68 <HAL_DMA_Init+0x670>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d054      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a54      	ldr	r2, [pc, #336]	; (8003a6c <HAL_DMA_Init+0x674>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d04f      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a53      	ldr	r2, [pc, #332]	; (8003a70 <HAL_DMA_Init+0x678>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d04a      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a51      	ldr	r2, [pc, #324]	; (8003a74 <HAL_DMA_Init+0x67c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d045      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a50      	ldr	r2, [pc, #320]	; (8003a78 <HAL_DMA_Init+0x680>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d040      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a4e      	ldr	r2, [pc, #312]	; (8003a7c <HAL_DMA_Init+0x684>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d03b      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a4d      	ldr	r2, [pc, #308]	; (8003a80 <HAL_DMA_Init+0x688>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d036      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <HAL_DMA_Init+0x68c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d031      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4a      	ldr	r2, [pc, #296]	; (8003a88 <HAL_DMA_Init+0x690>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d02c      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a48      	ldr	r2, [pc, #288]	; (8003a8c <HAL_DMA_Init+0x694>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d027      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a47      	ldr	r2, [pc, #284]	; (8003a90 <HAL_DMA_Init+0x698>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d022      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a45      	ldr	r2, [pc, #276]	; (8003a94 <HAL_DMA_Init+0x69c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01d      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a44      	ldr	r2, [pc, #272]	; (8003a98 <HAL_DMA_Init+0x6a0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d018      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <HAL_DMA_Init+0x6a4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a41      	ldr	r2, [pc, #260]	; (8003aa0 <HAL_DMA_Init+0x6a8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00e      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3f      	ldr	r2, [pc, #252]	; (8003aa4 <HAL_DMA_Init+0x6ac>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a3e      	ldr	r2, [pc, #248]	; (8003aa8 <HAL_DMA_Init+0x6b0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d004      	beq.n	80039be <HAL_DMA_Init+0x5c6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <HAL_DMA_Init+0x6b4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_DMA_Init+0x5ca>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_DMA_Init+0x5cc>
 80039c2:	2300      	movs	r3, #0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d032      	beq.n	8003a2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f001 ff2f 	bl	800582c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b80      	cmp	r3, #128	; 0x80
 80039d4:	d102      	bne.n	80039dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <HAL_DMA_Init+0x624>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d80c      	bhi.n	8003a1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f001 ffac 	bl	8005960 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	e008      	b.n	8003a2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	a7fdabf8 	.word	0xa7fdabf8
 8003a4c:	cccccccd 	.word	0xcccccccd
 8003a50:	40020010 	.word	0x40020010
 8003a54:	40020028 	.word	0x40020028
 8003a58:	40020040 	.word	0x40020040
 8003a5c:	40020058 	.word	0x40020058
 8003a60:	40020070 	.word	0x40020070
 8003a64:	40020088 	.word	0x40020088
 8003a68:	400200a0 	.word	0x400200a0
 8003a6c:	400200b8 	.word	0x400200b8
 8003a70:	40020410 	.word	0x40020410
 8003a74:	40020428 	.word	0x40020428
 8003a78:	40020440 	.word	0x40020440
 8003a7c:	40020458 	.word	0x40020458
 8003a80:	40020470 	.word	0x40020470
 8003a84:	40020488 	.word	0x40020488
 8003a88:	400204a0 	.word	0x400204a0
 8003a8c:	400204b8 	.word	0x400204b8
 8003a90:	58025408 	.word	0x58025408
 8003a94:	5802541c 	.word	0x5802541c
 8003a98:	58025430 	.word	0x58025430
 8003a9c:	58025444 	.word	0x58025444
 8003aa0:	58025458 	.word	0x58025458
 8003aa4:	5802546c 	.word	0x5802546c
 8003aa8:	58025480 	.word	0x58025480
 8003aac:	58025494 	.word	0x58025494

08003ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e226      	b.n	8003f1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_DMA_Start_IT+0x2a>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e21f      	b.n	8003f1a <HAL_DMA_Start_IT+0x46a>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	f040 820a 	bne.w	8003f04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a68      	ldr	r2, [pc, #416]	; (8003ca4 <HAL_DMA_Start_IT+0x1f4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d04a      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a66      	ldr	r2, [pc, #408]	; (8003ca8 <HAL_DMA_Start_IT+0x1f8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d045      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a65      	ldr	r2, [pc, #404]	; (8003cac <HAL_DMA_Start_IT+0x1fc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d040      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a63      	ldr	r2, [pc, #396]	; (8003cb0 <HAL_DMA_Start_IT+0x200>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d03b      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a62      	ldr	r2, [pc, #392]	; (8003cb4 <HAL_DMA_Start_IT+0x204>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d036      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a60      	ldr	r2, [pc, #384]	; (8003cb8 <HAL_DMA_Start_IT+0x208>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d031      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a5f      	ldr	r2, [pc, #380]	; (8003cbc <HAL_DMA_Start_IT+0x20c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d02c      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a5d      	ldr	r2, [pc, #372]	; (8003cc0 <HAL_DMA_Start_IT+0x210>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d027      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5c      	ldr	r2, [pc, #368]	; (8003cc4 <HAL_DMA_Start_IT+0x214>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d022      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5a      	ldr	r2, [pc, #360]	; (8003cc8 <HAL_DMA_Start_IT+0x218>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01d      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a59      	ldr	r2, [pc, #356]	; (8003ccc <HAL_DMA_Start_IT+0x21c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d018      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a57      	ldr	r2, [pc, #348]	; (8003cd0 <HAL_DMA_Start_IT+0x220>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a56      	ldr	r2, [pc, #344]	; (8003cd4 <HAL_DMA_Start_IT+0x224>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a54      	ldr	r2, [pc, #336]	; (8003cd8 <HAL_DMA_Start_IT+0x228>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a53      	ldr	r2, [pc, #332]	; (8003cdc <HAL_DMA_Start_IT+0x22c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_DMA_Start_IT+0xee>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a51      	ldr	r2, [pc, #324]	; (8003ce0 <HAL_DMA_Start_IT+0x230>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d108      	bne.n	8003bb0 <HAL_DMA_Start_IT+0x100>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e007      	b.n	8003bc0 <HAL_DMA_Start_IT+0x110>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f001 fb56 	bl	8005278 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a34      	ldr	r2, [pc, #208]	; (8003ca4 <HAL_DMA_Start_IT+0x1f4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d04a      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <HAL_DMA_Start_IT+0x1f8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d045      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a31      	ldr	r2, [pc, #196]	; (8003cac <HAL_DMA_Start_IT+0x1fc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d040      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a30      	ldr	r2, [pc, #192]	; (8003cb0 <HAL_DMA_Start_IT+0x200>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d03b      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2e      	ldr	r2, [pc, #184]	; (8003cb4 <HAL_DMA_Start_IT+0x204>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d036      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2d      	ldr	r2, [pc, #180]	; (8003cb8 <HAL_DMA_Start_IT+0x208>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d031      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <HAL_DMA_Start_IT+0x20c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d02c      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <HAL_DMA_Start_IT+0x210>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d027      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a28      	ldr	r2, [pc, #160]	; (8003cc4 <HAL_DMA_Start_IT+0x214>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d022      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a27      	ldr	r2, [pc, #156]	; (8003cc8 <HAL_DMA_Start_IT+0x218>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d01d      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <HAL_DMA_Start_IT+0x21c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d018      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <HAL_DMA_Start_IT+0x220>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <HAL_DMA_Start_IT+0x224>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00e      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <HAL_DMA_Start_IT+0x228>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d009      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_DMA_Start_IT+0x22c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_DMA_Start_IT+0x1bc>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <HAL_DMA_Start_IT+0x230>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <HAL_DMA_Start_IT+0x1c0>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_DMA_Start_IT+0x1c2>
 8003c70:	2300      	movs	r3, #0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d036      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 021e 	bic.w	r2, r3, #30
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0216 	orr.w	r2, r2, #22
 8003c88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d03e      	beq.n	8003d10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0208 	orr.w	r2, r2, #8
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e035      	b.n	8003d10 <HAL_DMA_Start_IT+0x260>
 8003ca4:	40020010 	.word	0x40020010
 8003ca8:	40020028 	.word	0x40020028
 8003cac:	40020040 	.word	0x40020040
 8003cb0:	40020058 	.word	0x40020058
 8003cb4:	40020070 	.word	0x40020070
 8003cb8:	40020088 	.word	0x40020088
 8003cbc:	400200a0 	.word	0x400200a0
 8003cc0:	400200b8 	.word	0x400200b8
 8003cc4:	40020410 	.word	0x40020410
 8003cc8:	40020428 	.word	0x40020428
 8003ccc:	40020440 	.word	0x40020440
 8003cd0:	40020458 	.word	0x40020458
 8003cd4:	40020470 	.word	0x40020470
 8003cd8:	40020488 	.word	0x40020488
 8003cdc:	400204a0 	.word	0x400204a0
 8003ce0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 020e 	bic.w	r2, r3, #14
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 020a 	orr.w	r2, r2, #10
 8003cf6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0204 	orr.w	r2, r2, #4
 8003d0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a83      	ldr	r2, [pc, #524]	; (8003f24 <HAL_DMA_Start_IT+0x474>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d072      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a82      	ldr	r2, [pc, #520]	; (8003f28 <HAL_DMA_Start_IT+0x478>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d06d      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a80      	ldr	r2, [pc, #512]	; (8003f2c <HAL_DMA_Start_IT+0x47c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d068      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a7f      	ldr	r2, [pc, #508]	; (8003f30 <HAL_DMA_Start_IT+0x480>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d063      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a7d      	ldr	r2, [pc, #500]	; (8003f34 <HAL_DMA_Start_IT+0x484>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d05e      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7c      	ldr	r2, [pc, #496]	; (8003f38 <HAL_DMA_Start_IT+0x488>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d059      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a7a      	ldr	r2, [pc, #488]	; (8003f3c <HAL_DMA_Start_IT+0x48c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d054      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a79      	ldr	r2, [pc, #484]	; (8003f40 <HAL_DMA_Start_IT+0x490>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d04f      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a77      	ldr	r2, [pc, #476]	; (8003f44 <HAL_DMA_Start_IT+0x494>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d04a      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a76      	ldr	r2, [pc, #472]	; (8003f48 <HAL_DMA_Start_IT+0x498>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d045      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a74      	ldr	r2, [pc, #464]	; (8003f4c <HAL_DMA_Start_IT+0x49c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d040      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a73      	ldr	r2, [pc, #460]	; (8003f50 <HAL_DMA_Start_IT+0x4a0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d03b      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a71      	ldr	r2, [pc, #452]	; (8003f54 <HAL_DMA_Start_IT+0x4a4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d036      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a70      	ldr	r2, [pc, #448]	; (8003f58 <HAL_DMA_Start_IT+0x4a8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d031      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6e      	ldr	r2, [pc, #440]	; (8003f5c <HAL_DMA_Start_IT+0x4ac>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02c      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a6d      	ldr	r2, [pc, #436]	; (8003f60 <HAL_DMA_Start_IT+0x4b0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d027      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6b      	ldr	r2, [pc, #428]	; (8003f64 <HAL_DMA_Start_IT+0x4b4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d022      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6a      	ldr	r2, [pc, #424]	; (8003f68 <HAL_DMA_Start_IT+0x4b8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d01d      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a68      	ldr	r2, [pc, #416]	; (8003f6c <HAL_DMA_Start_IT+0x4bc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d018      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a67      	ldr	r2, [pc, #412]	; (8003f70 <HAL_DMA_Start_IT+0x4c0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a65      	ldr	r2, [pc, #404]	; (8003f74 <HAL_DMA_Start_IT+0x4c4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00e      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a64      	ldr	r2, [pc, #400]	; (8003f78 <HAL_DMA_Start_IT+0x4c8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a62      	ldr	r2, [pc, #392]	; (8003f7c <HAL_DMA_Start_IT+0x4cc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_DMA_Start_IT+0x350>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a61      	ldr	r2, [pc, #388]	; (8003f80 <HAL_DMA_Start_IT+0x4d0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d101      	bne.n	8003e04 <HAL_DMA_Start_IT+0x354>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_DMA_Start_IT+0x356>
 8003e04:	2300      	movs	r3, #0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01a      	beq.n	8003e40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a37      	ldr	r2, [pc, #220]	; (8003f24 <HAL_DMA_Start_IT+0x474>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d04a      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a36      	ldr	r2, [pc, #216]	; (8003f28 <HAL_DMA_Start_IT+0x478>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d045      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a34      	ldr	r2, [pc, #208]	; (8003f2c <HAL_DMA_Start_IT+0x47c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d040      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a33      	ldr	r2, [pc, #204]	; (8003f30 <HAL_DMA_Start_IT+0x480>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d03b      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a31      	ldr	r2, [pc, #196]	; (8003f34 <HAL_DMA_Start_IT+0x484>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d036      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a30      	ldr	r2, [pc, #192]	; (8003f38 <HAL_DMA_Start_IT+0x488>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d031      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2e      	ldr	r2, [pc, #184]	; (8003f3c <HAL_DMA_Start_IT+0x48c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d02c      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <HAL_DMA_Start_IT+0x490>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d027      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a2b      	ldr	r2, [pc, #172]	; (8003f44 <HAL_DMA_Start_IT+0x494>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d022      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <HAL_DMA_Start_IT+0x498>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d01d      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a28      	ldr	r2, [pc, #160]	; (8003f4c <HAL_DMA_Start_IT+0x49c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d018      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a27      	ldr	r2, [pc, #156]	; (8003f50 <HAL_DMA_Start_IT+0x4a0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a25      	ldr	r2, [pc, #148]	; (8003f54 <HAL_DMA_Start_IT+0x4a4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <HAL_DMA_Start_IT+0x4a8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d009      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <HAL_DMA_Start_IT+0x4ac>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_DMA_Start_IT+0x430>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <HAL_DMA_Start_IT+0x4b0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d108      	bne.n	8003ef2 <HAL_DMA_Start_IT+0x442>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e012      	b.n	8003f18 <HAL_DMA_Start_IT+0x468>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e009      	b.n	8003f18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40020010 	.word	0x40020010
 8003f28:	40020028 	.word	0x40020028
 8003f2c:	40020040 	.word	0x40020040
 8003f30:	40020058 	.word	0x40020058
 8003f34:	40020070 	.word	0x40020070
 8003f38:	40020088 	.word	0x40020088
 8003f3c:	400200a0 	.word	0x400200a0
 8003f40:	400200b8 	.word	0x400200b8
 8003f44:	40020410 	.word	0x40020410
 8003f48:	40020428 	.word	0x40020428
 8003f4c:	40020440 	.word	0x40020440
 8003f50:	40020458 	.word	0x40020458
 8003f54:	40020470 	.word	0x40020470
 8003f58:	40020488 	.word	0x40020488
 8003f5c:	400204a0 	.word	0x400204a0
 8003f60:	400204b8 	.word	0x400204b8
 8003f64:	58025408 	.word	0x58025408
 8003f68:	5802541c 	.word	0x5802541c
 8003f6c:	58025430 	.word	0x58025430
 8003f70:	58025444 	.word	0x58025444
 8003f74:	58025458 	.word	0x58025458
 8003f78:	5802546c 	.word	0x5802546c
 8003f7c:	58025480 	.word	0x58025480
 8003f80:	58025494 	.word	0x58025494

08003f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e205      	b.n	80043a2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d004      	beq.n	8003fac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e1fa      	b.n	80043a2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a8c      	ldr	r2, [pc, #560]	; (80041e4 <HAL_DMA_Abort_IT+0x260>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d04a      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a8b      	ldr	r2, [pc, #556]	; (80041e8 <HAL_DMA_Abort_IT+0x264>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d045      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a89      	ldr	r2, [pc, #548]	; (80041ec <HAL_DMA_Abort_IT+0x268>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d040      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a88      	ldr	r2, [pc, #544]	; (80041f0 <HAL_DMA_Abort_IT+0x26c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d03b      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a86      	ldr	r2, [pc, #536]	; (80041f4 <HAL_DMA_Abort_IT+0x270>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d036      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a85      	ldr	r2, [pc, #532]	; (80041f8 <HAL_DMA_Abort_IT+0x274>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d031      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a83      	ldr	r2, [pc, #524]	; (80041fc <HAL_DMA_Abort_IT+0x278>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d02c      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a82      	ldr	r2, [pc, #520]	; (8004200 <HAL_DMA_Abort_IT+0x27c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d027      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a80      	ldr	r2, [pc, #512]	; (8004204 <HAL_DMA_Abort_IT+0x280>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d022      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7f      	ldr	r2, [pc, #508]	; (8004208 <HAL_DMA_Abort_IT+0x284>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d01d      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a7d      	ldr	r2, [pc, #500]	; (800420c <HAL_DMA_Abort_IT+0x288>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d018      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7c      	ldr	r2, [pc, #496]	; (8004210 <HAL_DMA_Abort_IT+0x28c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d013      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a7a      	ldr	r2, [pc, #488]	; (8004214 <HAL_DMA_Abort_IT+0x290>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00e      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a79      	ldr	r2, [pc, #484]	; (8004218 <HAL_DMA_Abort_IT+0x294>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d009      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <HAL_DMA_Abort_IT+0x298>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_DMA_Abort_IT+0xc8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a76      	ldr	r2, [pc, #472]	; (8004220 <HAL_DMA_Abort_IT+0x29c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_DMA_Abort_IT+0xcc>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <HAL_DMA_Abort_IT+0xce>
 8004050:	2300      	movs	r3, #0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d065      	beq.n	8004122 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2204      	movs	r2, #4
 800405a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a60      	ldr	r2, [pc, #384]	; (80041e4 <HAL_DMA_Abort_IT+0x260>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d04a      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a5e      	ldr	r2, [pc, #376]	; (80041e8 <HAL_DMA_Abort_IT+0x264>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d045      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a5d      	ldr	r2, [pc, #372]	; (80041ec <HAL_DMA_Abort_IT+0x268>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d040      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a5b      	ldr	r2, [pc, #364]	; (80041f0 <HAL_DMA_Abort_IT+0x26c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d03b      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a5a      	ldr	r2, [pc, #360]	; (80041f4 <HAL_DMA_Abort_IT+0x270>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d036      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a58      	ldr	r2, [pc, #352]	; (80041f8 <HAL_DMA_Abort_IT+0x274>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d031      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a57      	ldr	r2, [pc, #348]	; (80041fc <HAL_DMA_Abort_IT+0x278>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d02c      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a55      	ldr	r2, [pc, #340]	; (8004200 <HAL_DMA_Abort_IT+0x27c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d027      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a54      	ldr	r2, [pc, #336]	; (8004204 <HAL_DMA_Abort_IT+0x280>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d022      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a52      	ldr	r2, [pc, #328]	; (8004208 <HAL_DMA_Abort_IT+0x284>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01d      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a51      	ldr	r2, [pc, #324]	; (800420c <HAL_DMA_Abort_IT+0x288>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d018      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a4f      	ldr	r2, [pc, #316]	; (8004210 <HAL_DMA_Abort_IT+0x28c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a4e      	ldr	r2, [pc, #312]	; (8004214 <HAL_DMA_Abort_IT+0x290>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00e      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a4c      	ldr	r2, [pc, #304]	; (8004218 <HAL_DMA_Abort_IT+0x294>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a4b      	ldr	r2, [pc, #300]	; (800421c <HAL_DMA_Abort_IT+0x298>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_DMA_Abort_IT+0x17a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a49      	ldr	r2, [pc, #292]	; (8004220 <HAL_DMA_Abort_IT+0x29c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d108      	bne.n	8004110 <HAL_DMA_Abort_IT+0x18c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e147      	b.n	80043a0 <HAL_DMA_Abort_IT+0x41c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e13e      	b.n	80043a0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 020e 	bic.w	r2, r2, #14
 8004130:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <HAL_DMA_Abort_IT+0x260>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d04a      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <HAL_DMA_Abort_IT+0x264>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d045      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a28      	ldr	r2, [pc, #160]	; (80041ec <HAL_DMA_Abort_IT+0x268>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d040      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a26      	ldr	r2, [pc, #152]	; (80041f0 <HAL_DMA_Abort_IT+0x26c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d03b      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a25      	ldr	r2, [pc, #148]	; (80041f4 <HAL_DMA_Abort_IT+0x270>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d036      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <HAL_DMA_Abort_IT+0x274>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d031      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a22      	ldr	r2, [pc, #136]	; (80041fc <HAL_DMA_Abort_IT+0x278>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d02c      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a20      	ldr	r2, [pc, #128]	; (8004200 <HAL_DMA_Abort_IT+0x27c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d027      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_DMA_Abort_IT+0x280>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <HAL_DMA_Abort_IT+0x284>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01d      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <HAL_DMA_Abort_IT+0x288>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d018      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <HAL_DMA_Abort_IT+0x28c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_DMA_Abort_IT+0x290>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_DMA_Abort_IT+0x294>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <HAL_DMA_Abort_IT+0x298>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x24e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <HAL_DMA_Abort_IT+0x29c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d128      	bne.n	8004224 <HAL_DMA_Abort_IT+0x2a0>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e027      	b.n	8004234 <HAL_DMA_Abort_IT+0x2b0>
 80041e4:	40020010 	.word	0x40020010
 80041e8:	40020028 	.word	0x40020028
 80041ec:	40020040 	.word	0x40020040
 80041f0:	40020058 	.word	0x40020058
 80041f4:	40020070 	.word	0x40020070
 80041f8:	40020088 	.word	0x40020088
 80041fc:	400200a0 	.word	0x400200a0
 8004200:	400200b8 	.word	0x400200b8
 8004204:	40020410 	.word	0x40020410
 8004208:	40020428 	.word	0x40020428
 800420c:	40020440 	.word	0x40020440
 8004210:	40020458 	.word	0x40020458
 8004214:	40020470 	.word	0x40020470
 8004218:	40020488 	.word	0x40020488
 800421c:	400204a0 	.word	0x400204a0
 8004220:	400204b8 	.word	0x400204b8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a5c      	ldr	r2, [pc, #368]	; (80043ac <HAL_DMA_Abort_IT+0x428>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d072      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a5b      	ldr	r2, [pc, #364]	; (80043b0 <HAL_DMA_Abort_IT+0x42c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d06d      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a59      	ldr	r2, [pc, #356]	; (80043b4 <HAL_DMA_Abort_IT+0x430>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d068      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a58      	ldr	r2, [pc, #352]	; (80043b8 <HAL_DMA_Abort_IT+0x434>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d063      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a56      	ldr	r2, [pc, #344]	; (80043bc <HAL_DMA_Abort_IT+0x438>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d05e      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a55      	ldr	r2, [pc, #340]	; (80043c0 <HAL_DMA_Abort_IT+0x43c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d059      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a53      	ldr	r2, [pc, #332]	; (80043c4 <HAL_DMA_Abort_IT+0x440>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d054      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a52      	ldr	r2, [pc, #328]	; (80043c8 <HAL_DMA_Abort_IT+0x444>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d04f      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a50      	ldr	r2, [pc, #320]	; (80043cc <HAL_DMA_Abort_IT+0x448>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d04a      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a4f      	ldr	r2, [pc, #316]	; (80043d0 <HAL_DMA_Abort_IT+0x44c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d045      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a4d      	ldr	r2, [pc, #308]	; (80043d4 <HAL_DMA_Abort_IT+0x450>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d040      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a4c      	ldr	r2, [pc, #304]	; (80043d8 <HAL_DMA_Abort_IT+0x454>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d03b      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a4a      	ldr	r2, [pc, #296]	; (80043dc <HAL_DMA_Abort_IT+0x458>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d036      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a49      	ldr	r2, [pc, #292]	; (80043e0 <HAL_DMA_Abort_IT+0x45c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d031      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a47      	ldr	r2, [pc, #284]	; (80043e4 <HAL_DMA_Abort_IT+0x460>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d02c      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a46      	ldr	r2, [pc, #280]	; (80043e8 <HAL_DMA_Abort_IT+0x464>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d027      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a44      	ldr	r2, [pc, #272]	; (80043ec <HAL_DMA_Abort_IT+0x468>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d022      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a43      	ldr	r2, [pc, #268]	; (80043f0 <HAL_DMA_Abort_IT+0x46c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d01d      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a41      	ldr	r2, [pc, #260]	; (80043f4 <HAL_DMA_Abort_IT+0x470>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a40      	ldr	r2, [pc, #256]	; (80043f8 <HAL_DMA_Abort_IT+0x474>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3e      	ldr	r2, [pc, #248]	; (80043fc <HAL_DMA_Abort_IT+0x478>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3d      	ldr	r2, [pc, #244]	; (8004400 <HAL_DMA_Abort_IT+0x47c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a3b      	ldr	r2, [pc, #236]	; (8004404 <HAL_DMA_Abort_IT+0x480>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_DMA_Abort_IT+0x3a0>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3a      	ldr	r2, [pc, #232]	; (8004408 <HAL_DMA_Abort_IT+0x484>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <HAL_DMA_Abort_IT+0x3a4>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <HAL_DMA_Abort_IT+0x3a6>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d028      	beq.n	8004380 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800433c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2201      	movs	r2, #1
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800435c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00c      	beq.n	8004380 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004374:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800437e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40020010 	.word	0x40020010
 80043b0:	40020028 	.word	0x40020028
 80043b4:	40020040 	.word	0x40020040
 80043b8:	40020058 	.word	0x40020058
 80043bc:	40020070 	.word	0x40020070
 80043c0:	40020088 	.word	0x40020088
 80043c4:	400200a0 	.word	0x400200a0
 80043c8:	400200b8 	.word	0x400200b8
 80043cc:	40020410 	.word	0x40020410
 80043d0:	40020428 	.word	0x40020428
 80043d4:	40020440 	.word	0x40020440
 80043d8:	40020458 	.word	0x40020458
 80043dc:	40020470 	.word	0x40020470
 80043e0:	40020488 	.word	0x40020488
 80043e4:	400204a0 	.word	0x400204a0
 80043e8:	400204b8 	.word	0x400204b8
 80043ec:	58025408 	.word	0x58025408
 80043f0:	5802541c 	.word	0x5802541c
 80043f4:	58025430 	.word	0x58025430
 80043f8:	58025444 	.word	0x58025444
 80043fc:	58025458 	.word	0x58025458
 8004400:	5802546c 	.word	0x5802546c
 8004404:	58025480 	.word	0x58025480
 8004408:	58025494 	.word	0x58025494

0800440c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004418:	4b67      	ldr	r3, [pc, #412]	; (80045b8 <HAL_DMA_IRQHandler+0x1ac>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a67      	ldr	r2, [pc, #412]	; (80045bc <HAL_DMA_IRQHandler+0x1b0>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	0a9b      	lsrs	r3, r3, #10
 8004424:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a5f      	ldr	r2, [pc, #380]	; (80045c0 <HAL_DMA_IRQHandler+0x1b4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d04a      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a5d      	ldr	r2, [pc, #372]	; (80045c4 <HAL_DMA_IRQHandler+0x1b8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d045      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5c      	ldr	r2, [pc, #368]	; (80045c8 <HAL_DMA_IRQHandler+0x1bc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d040      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a5a      	ldr	r2, [pc, #360]	; (80045cc <HAL_DMA_IRQHandler+0x1c0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d03b      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a59      	ldr	r2, [pc, #356]	; (80045d0 <HAL_DMA_IRQHandler+0x1c4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d036      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a57      	ldr	r2, [pc, #348]	; (80045d4 <HAL_DMA_IRQHandler+0x1c8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d031      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a56      	ldr	r2, [pc, #344]	; (80045d8 <HAL_DMA_IRQHandler+0x1cc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d02c      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a54      	ldr	r2, [pc, #336]	; (80045dc <HAL_DMA_IRQHandler+0x1d0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d027      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a53      	ldr	r2, [pc, #332]	; (80045e0 <HAL_DMA_IRQHandler+0x1d4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d022      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a51      	ldr	r2, [pc, #324]	; (80045e4 <HAL_DMA_IRQHandler+0x1d8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01d      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a50      	ldr	r2, [pc, #320]	; (80045e8 <HAL_DMA_IRQHandler+0x1dc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d018      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a4e      	ldr	r2, [pc, #312]	; (80045ec <HAL_DMA_IRQHandler+0x1e0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a4d      	ldr	r2, [pc, #308]	; (80045f0 <HAL_DMA_IRQHandler+0x1e4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00e      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a4b      	ldr	r2, [pc, #300]	; (80045f4 <HAL_DMA_IRQHandler+0x1e8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a4a      	ldr	r2, [pc, #296]	; (80045f8 <HAL_DMA_IRQHandler+0x1ec>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_DMA_IRQHandler+0xd2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a48      	ldr	r2, [pc, #288]	; (80045fc <HAL_DMA_IRQHandler+0x1f0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d101      	bne.n	80044e2 <HAL_DMA_IRQHandler+0xd6>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <HAL_DMA_IRQHandler+0xd8>
 80044e2:	2300      	movs	r3, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 842b 	beq.w	8004d40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	2208      	movs	r2, #8
 80044f4:	409a      	lsls	r2, r3
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80a2 	beq.w	8004644 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2e      	ldr	r2, [pc, #184]	; (80045c0 <HAL_DMA_IRQHandler+0x1b4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d04a      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <HAL_DMA_IRQHandler+0x1b8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d045      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2b      	ldr	r2, [pc, #172]	; (80045c8 <HAL_DMA_IRQHandler+0x1bc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d040      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <HAL_DMA_IRQHandler+0x1c0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d03b      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a28      	ldr	r2, [pc, #160]	; (80045d0 <HAL_DMA_IRQHandler+0x1c4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d036      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <HAL_DMA_IRQHandler+0x1c8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d031      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a25      	ldr	r2, [pc, #148]	; (80045d8 <HAL_DMA_IRQHandler+0x1cc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d02c      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a24      	ldr	r2, [pc, #144]	; (80045dc <HAL_DMA_IRQHandler+0x1d0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d027      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <HAL_DMA_IRQHandler+0x1d4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <HAL_DMA_IRQHandler+0x1d8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d01d      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <HAL_DMA_IRQHandler+0x1dc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_DMA_IRQHandler+0x1e0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <HAL_DMA_IRQHandler+0x1e4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_DMA_IRQHandler+0x1e8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <HAL_DMA_IRQHandler+0x1ec>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x194>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a18      	ldr	r2, [pc, #96]	; (80045fc <HAL_DMA_IRQHandler+0x1f0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d12f      	bne.n	8004600 <HAL_DMA_IRQHandler+0x1f4>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf14      	ite	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	2300      	moveq	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	e02e      	b.n	8004614 <HAL_DMA_IRQHandler+0x208>
 80045b6:	bf00      	nop
 80045b8:	20000004 	.word	0x20000004
 80045bc:	1b4e81b5 	.word	0x1b4e81b5
 80045c0:	40020010 	.word	0x40020010
 80045c4:	40020028 	.word	0x40020028
 80045c8:	40020040 	.word	0x40020040
 80045cc:	40020058 	.word	0x40020058
 80045d0:	40020070 	.word	0x40020070
 80045d4:	40020088 	.word	0x40020088
 80045d8:	400200a0 	.word	0x400200a0
 80045dc:	400200b8 	.word	0x400200b8
 80045e0:	40020410 	.word	0x40020410
 80045e4:	40020428 	.word	0x40020428
 80045e8:	40020440 	.word	0x40020440
 80045ec:	40020458 	.word	0x40020458
 80045f0:	40020470 	.word	0x40020470
 80045f4:	40020488 	.word	0x40020488
 80045f8:	400204a0 	.word	0x400204a0
 80045fc:	400204b8 	.word	0x400204b8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf14      	ite	ne
 800460e:	2301      	movne	r3, #1
 8004610:	2300      	moveq	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0204 	bic.w	r2, r2, #4
 8004626:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2208      	movs	r2, #8
 8004632:	409a      	lsls	r2, r3
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	f043 0201 	orr.w	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	fa22 f303 	lsr.w	r3, r2, r3
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d06e      	beq.n	8004738 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a69      	ldr	r2, [pc, #420]	; (8004804 <HAL_DMA_IRQHandler+0x3f8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d04a      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a67      	ldr	r2, [pc, #412]	; (8004808 <HAL_DMA_IRQHandler+0x3fc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d045      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a66      	ldr	r2, [pc, #408]	; (800480c <HAL_DMA_IRQHandler+0x400>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d040      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a64      	ldr	r2, [pc, #400]	; (8004810 <HAL_DMA_IRQHandler+0x404>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d03b      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a63      	ldr	r2, [pc, #396]	; (8004814 <HAL_DMA_IRQHandler+0x408>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d036      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a61      	ldr	r2, [pc, #388]	; (8004818 <HAL_DMA_IRQHandler+0x40c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d031      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a60      	ldr	r2, [pc, #384]	; (800481c <HAL_DMA_IRQHandler+0x410>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d02c      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a5e      	ldr	r2, [pc, #376]	; (8004820 <HAL_DMA_IRQHandler+0x414>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d027      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a5d      	ldr	r2, [pc, #372]	; (8004824 <HAL_DMA_IRQHandler+0x418>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d022      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5b      	ldr	r2, [pc, #364]	; (8004828 <HAL_DMA_IRQHandler+0x41c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01d      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a5a      	ldr	r2, [pc, #360]	; (800482c <HAL_DMA_IRQHandler+0x420>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d018      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a58      	ldr	r2, [pc, #352]	; (8004830 <HAL_DMA_IRQHandler+0x424>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a57      	ldr	r2, [pc, #348]	; (8004834 <HAL_DMA_IRQHandler+0x428>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a55      	ldr	r2, [pc, #340]	; (8004838 <HAL_DMA_IRQHandler+0x42c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a54      	ldr	r2, [pc, #336]	; (800483c <HAL_DMA_IRQHandler+0x430>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2ee>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a52      	ldr	r2, [pc, #328]	; (8004840 <HAL_DMA_IRQHandler+0x434>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d10a      	bne.n	8004710 <HAL_DMA_IRQHandler+0x304>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e003      	b.n	8004718 <HAL_DMA_IRQHandler+0x30c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2300      	movs	r3, #0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f043 0202 	orr.w	r2, r3, #2
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	2204      	movs	r2, #4
 8004742:	409a      	lsls	r2, r3
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 808f 	beq.w	800486c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2c      	ldr	r2, [pc, #176]	; (8004804 <HAL_DMA_IRQHandler+0x3f8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d04a      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2a      	ldr	r2, [pc, #168]	; (8004808 <HAL_DMA_IRQHandler+0x3fc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d045      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a29      	ldr	r2, [pc, #164]	; (800480c <HAL_DMA_IRQHandler+0x400>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d040      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <HAL_DMA_IRQHandler+0x404>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d03b      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a26      	ldr	r2, [pc, #152]	; (8004814 <HAL_DMA_IRQHandler+0x408>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d036      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a24      	ldr	r2, [pc, #144]	; (8004818 <HAL_DMA_IRQHandler+0x40c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d031      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a23      	ldr	r2, [pc, #140]	; (800481c <HAL_DMA_IRQHandler+0x410>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d02c      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a21      	ldr	r2, [pc, #132]	; (8004820 <HAL_DMA_IRQHandler+0x414>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d027      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a20      	ldr	r2, [pc, #128]	; (8004824 <HAL_DMA_IRQHandler+0x418>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <HAL_DMA_IRQHandler+0x41c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01d      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1d      	ldr	r2, [pc, #116]	; (800482c <HAL_DMA_IRQHandler+0x420>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_DMA_IRQHandler+0x424>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <HAL_DMA_IRQHandler+0x428>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_DMA_IRQHandler+0x42c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a17      	ldr	r2, [pc, #92]	; (800483c <HAL_DMA_IRQHandler+0x430>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_DMA_IRQHandler+0x3e2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_DMA_IRQHandler+0x434>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d12a      	bne.n	8004844 <HAL_DMA_IRQHandler+0x438>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e023      	b.n	800484c <HAL_DMA_IRQHandler+0x440>
 8004804:	40020010 	.word	0x40020010
 8004808:	40020028 	.word	0x40020028
 800480c:	40020040 	.word	0x40020040
 8004810:	40020058 	.word	0x40020058
 8004814:	40020070 	.word	0x40020070
 8004818:	40020088 	.word	0x40020088
 800481c:	400200a0 	.word	0x400200a0
 8004820:	400200b8 	.word	0x400200b8
 8004824:	40020410 	.word	0x40020410
 8004828:	40020428 	.word	0x40020428
 800482c:	40020440 	.word	0x40020440
 8004830:	40020458 	.word	0x40020458
 8004834:	40020470 	.word	0x40020470
 8004838:	40020488 	.word	0x40020488
 800483c:	400204a0 	.word	0x400204a0
 8004840:	400204b8 	.word	0x400204b8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00d      	beq.n	800486c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2204      	movs	r2, #4
 800485a:	409a      	lsls	r2, r3
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f043 0204 	orr.w	r2, r3, #4
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2210      	movs	r2, #16
 8004876:	409a      	lsls	r2, r3
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a6 	beq.w	80049ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a85      	ldr	r2, [pc, #532]	; (8004a9c <HAL_DMA_IRQHandler+0x690>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d04a      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a83      	ldr	r2, [pc, #524]	; (8004aa0 <HAL_DMA_IRQHandler+0x694>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d045      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a82      	ldr	r2, [pc, #520]	; (8004aa4 <HAL_DMA_IRQHandler+0x698>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d040      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a80      	ldr	r2, [pc, #512]	; (8004aa8 <HAL_DMA_IRQHandler+0x69c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d03b      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a7f      	ldr	r2, [pc, #508]	; (8004aac <HAL_DMA_IRQHandler+0x6a0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d036      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a7d      	ldr	r2, [pc, #500]	; (8004ab0 <HAL_DMA_IRQHandler+0x6a4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d031      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a7c      	ldr	r2, [pc, #496]	; (8004ab4 <HAL_DMA_IRQHandler+0x6a8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d02c      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a7a      	ldr	r2, [pc, #488]	; (8004ab8 <HAL_DMA_IRQHandler+0x6ac>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d027      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a79      	ldr	r2, [pc, #484]	; (8004abc <HAL_DMA_IRQHandler+0x6b0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d022      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a77      	ldr	r2, [pc, #476]	; (8004ac0 <HAL_DMA_IRQHandler+0x6b4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01d      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a76      	ldr	r2, [pc, #472]	; (8004ac4 <HAL_DMA_IRQHandler+0x6b8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d018      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a74      	ldr	r2, [pc, #464]	; (8004ac8 <HAL_DMA_IRQHandler+0x6bc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a73      	ldr	r2, [pc, #460]	; (8004acc <HAL_DMA_IRQHandler+0x6c0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a71      	ldr	r2, [pc, #452]	; (8004ad0 <HAL_DMA_IRQHandler+0x6c4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a70      	ldr	r2, [pc, #448]	; (8004ad4 <HAL_DMA_IRQHandler+0x6c8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_DMA_IRQHandler+0x516>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a6e      	ldr	r2, [pc, #440]	; (8004ad8 <HAL_DMA_IRQHandler+0x6cc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d10a      	bne.n	8004938 <HAL_DMA_IRQHandler+0x52c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e009      	b.n	800494c <HAL_DMA_IRQHandler+0x540>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d03e      	beq.n	80049ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	2210      	movs	r2, #16
 800495a:	409a      	lsls	r2, r3
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d018      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d108      	bne.n	800498e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d024      	beq.n	80049ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
 800498c:	e01f      	b.n	80049ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01b      	beq.n	80049ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
 800499e:	e016      	b.n	80049ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d107      	bne.n	80049be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0208 	bic.w	r2, r2, #8
 80049bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2220      	movs	r2, #32
 80049d8:	409a      	lsls	r2, r3
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8110 	beq.w	8004c04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a2c      	ldr	r2, [pc, #176]	; (8004a9c <HAL_DMA_IRQHandler+0x690>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d04a      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2b      	ldr	r2, [pc, #172]	; (8004aa0 <HAL_DMA_IRQHandler+0x694>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d045      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <HAL_DMA_IRQHandler+0x698>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d040      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a28      	ldr	r2, [pc, #160]	; (8004aa8 <HAL_DMA_IRQHandler+0x69c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d03b      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a26      	ldr	r2, [pc, #152]	; (8004aac <HAL_DMA_IRQHandler+0x6a0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d036      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <HAL_DMA_IRQHandler+0x6a4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d031      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a23      	ldr	r2, [pc, #140]	; (8004ab4 <HAL_DMA_IRQHandler+0x6a8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d02c      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a22      	ldr	r2, [pc, #136]	; (8004ab8 <HAL_DMA_IRQHandler+0x6ac>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d027      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a20      	ldr	r2, [pc, #128]	; (8004abc <HAL_DMA_IRQHandler+0x6b0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d022      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <HAL_DMA_IRQHandler+0x6b4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d01d      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <HAL_DMA_IRQHandler+0x6b8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d018      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1c      	ldr	r2, [pc, #112]	; (8004ac8 <HAL_DMA_IRQHandler+0x6bc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d013      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <HAL_DMA_IRQHandler+0x6c0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00e      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <HAL_DMA_IRQHandler+0x6c4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <HAL_DMA_IRQHandler+0x6c8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x678>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <HAL_DMA_IRQHandler+0x6cc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d12b      	bne.n	8004adc <HAL_DMA_IRQHandler+0x6d0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e02a      	b.n	8004af0 <HAL_DMA_IRQHandler+0x6e4>
 8004a9a:	bf00      	nop
 8004a9c:	40020010 	.word	0x40020010
 8004aa0:	40020028 	.word	0x40020028
 8004aa4:	40020040 	.word	0x40020040
 8004aa8:	40020058 	.word	0x40020058
 8004aac:	40020070 	.word	0x40020070
 8004ab0:	40020088 	.word	0x40020088
 8004ab4:	400200a0 	.word	0x400200a0
 8004ab8:	400200b8 	.word	0x400200b8
 8004abc:	40020410 	.word	0x40020410
 8004ac0:	40020428 	.word	0x40020428
 8004ac4:	40020440 	.word	0x40020440
 8004ac8:	40020458 	.word	0x40020458
 8004acc:	40020470 	.word	0x40020470
 8004ad0:	40020488 	.word	0x40020488
 8004ad4:	400204a0 	.word	0x400204a0
 8004ad8:	400204b8 	.word	0x400204b8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf14      	ite	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	2300      	moveq	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8087 	beq.w	8004c04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2220      	movs	r2, #32
 8004b00:	409a      	lsls	r2, r3
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d139      	bne.n	8004b86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0216 	bic.w	r2, r2, #22
 8004b20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <HAL_DMA_IRQHandler+0x736>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0208 	bic.w	r2, r2, #8
 8004b50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	223f      	movs	r2, #63	; 0x3f
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 834a 	beq.w	8005210 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
          }
          return;
 8004b84:	e344      	b.n	8005210 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d018      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d108      	bne.n	8004bb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d02c      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
 8004bb2:	e027      	b.n	8004c04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d023      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
 8004bc4:	e01e      	b.n	8004c04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10f      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0210 	bic.w	r2, r2, #16
 8004be2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8306 	beq.w	800521a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8088 	beq.w	8004d2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2204      	movs	r2, #4
 8004c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a7a      	ldr	r2, [pc, #488]	; (8004e14 <HAL_DMA_IRQHandler+0xa08>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d04a      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a79      	ldr	r2, [pc, #484]	; (8004e18 <HAL_DMA_IRQHandler+0xa0c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d045      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a77      	ldr	r2, [pc, #476]	; (8004e1c <HAL_DMA_IRQHandler+0xa10>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d040      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a76      	ldr	r2, [pc, #472]	; (8004e20 <HAL_DMA_IRQHandler+0xa14>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d03b      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a74      	ldr	r2, [pc, #464]	; (8004e24 <HAL_DMA_IRQHandler+0xa18>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d036      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a73      	ldr	r2, [pc, #460]	; (8004e28 <HAL_DMA_IRQHandler+0xa1c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d031      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a71      	ldr	r2, [pc, #452]	; (8004e2c <HAL_DMA_IRQHandler+0xa20>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d02c      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a70      	ldr	r2, [pc, #448]	; (8004e30 <HAL_DMA_IRQHandler+0xa24>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d027      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a6e      	ldr	r2, [pc, #440]	; (8004e34 <HAL_DMA_IRQHandler+0xa28>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d022      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a6d      	ldr	r2, [pc, #436]	; (8004e38 <HAL_DMA_IRQHandler+0xa2c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d01d      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a6b      	ldr	r2, [pc, #428]	; (8004e3c <HAL_DMA_IRQHandler+0xa30>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d018      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6a      	ldr	r2, [pc, #424]	; (8004e40 <HAL_DMA_IRQHandler+0xa34>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a68      	ldr	r2, [pc, #416]	; (8004e44 <HAL_DMA_IRQHandler+0xa38>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a67      	ldr	r2, [pc, #412]	; (8004e48 <HAL_DMA_IRQHandler+0xa3c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a65      	ldr	r2, [pc, #404]	; (8004e4c <HAL_DMA_IRQHandler+0xa40>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x8b8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a64      	ldr	r2, [pc, #400]	; (8004e50 <HAL_DMA_IRQHandler+0xa44>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d108      	bne.n	8004cd6 <HAL_DMA_IRQHandler+0x8ca>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e007      	b.n	8004ce6 <HAL_DMA_IRQHandler+0x8da>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0201 	bic.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d307      	bcc.n	8004d02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f2      	bne.n	8004ce6 <HAL_DMA_IRQHandler+0x8da>
 8004d00:	e000      	b.n	8004d04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004d02:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d004      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004d22:	e003      	b.n	8004d2c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8272 	beq.w	800521a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
 8004d3e:	e26c      	b.n	800521a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a43      	ldr	r2, [pc, #268]	; (8004e54 <HAL_DMA_IRQHandler+0xa48>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d022      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x984>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a42      	ldr	r2, [pc, #264]	; (8004e58 <HAL_DMA_IRQHandler+0xa4c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d01d      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x984>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a40      	ldr	r2, [pc, #256]	; (8004e5c <HAL_DMA_IRQHandler+0xa50>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d018      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x984>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3f      	ldr	r2, [pc, #252]	; (8004e60 <HAL_DMA_IRQHandler+0xa54>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x984>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3d      	ldr	r2, [pc, #244]	; (8004e64 <HAL_DMA_IRQHandler+0xa58>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x984>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a3c      	ldr	r2, [pc, #240]	; (8004e68 <HAL_DMA_IRQHandler+0xa5c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x984>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a3a      	ldr	r2, [pc, #232]	; (8004e6c <HAL_DMA_IRQHandler+0xa60>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x984>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a39      	ldr	r2, [pc, #228]	; (8004e70 <HAL_DMA_IRQHandler+0xa64>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d101      	bne.n	8004d94 <HAL_DMA_IRQHandler+0x988>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_DMA_IRQHandler+0x98a>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 823f 	beq.w	800521a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	2204      	movs	r2, #4
 8004dae:	409a      	lsls	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80cd 	beq.w	8004f54 <HAL_DMA_IRQHandler+0xb48>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80c7 	beq.w	8004f54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2204      	movs	r2, #4
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d049      	beq.n	8004e74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8210 	beq.w	8005214 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dfc:	e20a      	b.n	8005214 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8206 	beq.w	8005214 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e10:	e200      	b.n	8005214 <HAL_DMA_IRQHandler+0xe08>
 8004e12:	bf00      	nop
 8004e14:	40020010 	.word	0x40020010
 8004e18:	40020028 	.word	0x40020028
 8004e1c:	40020040 	.word	0x40020040
 8004e20:	40020058 	.word	0x40020058
 8004e24:	40020070 	.word	0x40020070
 8004e28:	40020088 	.word	0x40020088
 8004e2c:	400200a0 	.word	0x400200a0
 8004e30:	400200b8 	.word	0x400200b8
 8004e34:	40020410 	.word	0x40020410
 8004e38:	40020428 	.word	0x40020428
 8004e3c:	40020440 	.word	0x40020440
 8004e40:	40020458 	.word	0x40020458
 8004e44:	40020470 	.word	0x40020470
 8004e48:	40020488 	.word	0x40020488
 8004e4c:	400204a0 	.word	0x400204a0
 8004e50:	400204b8 	.word	0x400204b8
 8004e54:	58025408 	.word	0x58025408
 8004e58:	5802541c 	.word	0x5802541c
 8004e5c:	58025430 	.word	0x58025430
 8004e60:	58025444 	.word	0x58025444
 8004e64:	58025458 	.word	0x58025458
 8004e68:	5802546c 	.word	0x5802546c
 8004e6c:	58025480 	.word	0x58025480
 8004e70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d160      	bne.n	8004f40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a8c      	ldr	r2, [pc, #560]	; (80050b4 <HAL_DMA_IRQHandler+0xca8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d04a      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a8a      	ldr	r2, [pc, #552]	; (80050b8 <HAL_DMA_IRQHandler+0xcac>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d045      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a89      	ldr	r2, [pc, #548]	; (80050bc <HAL_DMA_IRQHandler+0xcb0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d040      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a87      	ldr	r2, [pc, #540]	; (80050c0 <HAL_DMA_IRQHandler+0xcb4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d03b      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a86      	ldr	r2, [pc, #536]	; (80050c4 <HAL_DMA_IRQHandler+0xcb8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d036      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a84      	ldr	r2, [pc, #528]	; (80050c8 <HAL_DMA_IRQHandler+0xcbc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d031      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a83      	ldr	r2, [pc, #524]	; (80050cc <HAL_DMA_IRQHandler+0xcc0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d02c      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a81      	ldr	r2, [pc, #516]	; (80050d0 <HAL_DMA_IRQHandler+0xcc4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d027      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a80      	ldr	r2, [pc, #512]	; (80050d4 <HAL_DMA_IRQHandler+0xcc8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d022      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a7e      	ldr	r2, [pc, #504]	; (80050d8 <HAL_DMA_IRQHandler+0xccc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7d      	ldr	r2, [pc, #500]	; (80050dc <HAL_DMA_IRQHandler+0xcd0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d018      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a7b      	ldr	r2, [pc, #492]	; (80050e0 <HAL_DMA_IRQHandler+0xcd4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a7a      	ldr	r2, [pc, #488]	; (80050e4 <HAL_DMA_IRQHandler+0xcd8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a78      	ldr	r2, [pc, #480]	; (80050e8 <HAL_DMA_IRQHandler+0xcdc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a77      	ldr	r2, [pc, #476]	; (80050ec <HAL_DMA_IRQHandler+0xce0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xb12>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a75      	ldr	r2, [pc, #468]	; (80050f0 <HAL_DMA_IRQHandler+0xce4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d108      	bne.n	8004f30 <HAL_DMA_IRQHandler+0xb24>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0208 	bic.w	r2, r2, #8
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e007      	b.n	8004f40 <HAL_DMA_IRQHandler+0xb34>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0204 	bic.w	r2, r2, #4
 8004f3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8165 	beq.w	8005214 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f52:	e15f      	b.n	8005214 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 80c5 	beq.w	80050f4 <HAL_DMA_IRQHandler+0xce8>
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80bf 	beq.w	80050f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7a:	f003 031f 	and.w	r3, r3, #31
 8004f7e:	2202      	movs	r2, #2
 8004f80:	409a      	lsls	r2, r3
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d018      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 813a 	beq.w	8005218 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fac:	e134      	b.n	8005218 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8130 	beq.w	8005218 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fc0:	e12a      	b.n	8005218 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d168      	bne.n	800509e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a38      	ldr	r2, [pc, #224]	; (80050b4 <HAL_DMA_IRQHandler+0xca8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d04a      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a37      	ldr	r2, [pc, #220]	; (80050b8 <HAL_DMA_IRQHandler+0xcac>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d045      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a35      	ldr	r2, [pc, #212]	; (80050bc <HAL_DMA_IRQHandler+0xcb0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d040      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a34      	ldr	r2, [pc, #208]	; (80050c0 <HAL_DMA_IRQHandler+0xcb4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d03b      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a32      	ldr	r2, [pc, #200]	; (80050c4 <HAL_DMA_IRQHandler+0xcb8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d036      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a31      	ldr	r2, [pc, #196]	; (80050c8 <HAL_DMA_IRQHandler+0xcbc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d031      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <HAL_DMA_IRQHandler+0xcc0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02c      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2e      	ldr	r2, [pc, #184]	; (80050d0 <HAL_DMA_IRQHandler+0xcc4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d027      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <HAL_DMA_IRQHandler+0xcc8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d022      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2b      	ldr	r2, [pc, #172]	; (80050d8 <HAL_DMA_IRQHandler+0xccc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d01d      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a29      	ldr	r2, [pc, #164]	; (80050dc <HAL_DMA_IRQHandler+0xcd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d018      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <HAL_DMA_IRQHandler+0xcd4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d013      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a26      	ldr	r2, [pc, #152]	; (80050e4 <HAL_DMA_IRQHandler+0xcd8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00e      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <HAL_DMA_IRQHandler+0xcdc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d009      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a23      	ldr	r2, [pc, #140]	; (80050ec <HAL_DMA_IRQHandler+0xce0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_DMA_IRQHandler+0xc60>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a22      	ldr	r2, [pc, #136]	; (80050f0 <HAL_DMA_IRQHandler+0xce4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d108      	bne.n	800507e <HAL_DMA_IRQHandler+0xc72>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0214 	bic.w	r2, r2, #20
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e007      	b.n	800508e <HAL_DMA_IRQHandler+0xc82>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 020a 	bic.w	r2, r2, #10
 800508c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 80b8 	beq.w	8005218 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050b0:	e0b2      	b.n	8005218 <HAL_DMA_IRQHandler+0xe0c>
 80050b2:	bf00      	nop
 80050b4:	40020010 	.word	0x40020010
 80050b8:	40020028 	.word	0x40020028
 80050bc:	40020040 	.word	0x40020040
 80050c0:	40020058 	.word	0x40020058
 80050c4:	40020070 	.word	0x40020070
 80050c8:	40020088 	.word	0x40020088
 80050cc:	400200a0 	.word	0x400200a0
 80050d0:	400200b8 	.word	0x400200b8
 80050d4:	40020410 	.word	0x40020410
 80050d8:	40020428 	.word	0x40020428
 80050dc:	40020440 	.word	0x40020440
 80050e0:	40020458 	.word	0x40020458
 80050e4:	40020470 	.word	0x40020470
 80050e8:	40020488 	.word	0x40020488
 80050ec:	400204a0 	.word	0x400204a0
 80050f0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2208      	movs	r2, #8
 80050fe:	409a      	lsls	r2, r3
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8088 	beq.w	800521a <HAL_DMA_IRQHandler+0xe0e>
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8082 	beq.w	800521a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a41      	ldr	r2, [pc, #260]	; (8005220 <HAL_DMA_IRQHandler+0xe14>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d04a      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a3f      	ldr	r2, [pc, #252]	; (8005224 <HAL_DMA_IRQHandler+0xe18>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d045      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a3e      	ldr	r2, [pc, #248]	; (8005228 <HAL_DMA_IRQHandler+0xe1c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d040      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a3c      	ldr	r2, [pc, #240]	; (800522c <HAL_DMA_IRQHandler+0xe20>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d03b      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a3b      	ldr	r2, [pc, #236]	; (8005230 <HAL_DMA_IRQHandler+0xe24>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d036      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a39      	ldr	r2, [pc, #228]	; (8005234 <HAL_DMA_IRQHandler+0xe28>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d031      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a38      	ldr	r2, [pc, #224]	; (8005238 <HAL_DMA_IRQHandler+0xe2c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d02c      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a36      	ldr	r2, [pc, #216]	; (800523c <HAL_DMA_IRQHandler+0xe30>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d027      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a35      	ldr	r2, [pc, #212]	; (8005240 <HAL_DMA_IRQHandler+0xe34>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d022      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a33      	ldr	r2, [pc, #204]	; (8005244 <HAL_DMA_IRQHandler+0xe38>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01d      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a32      	ldr	r2, [pc, #200]	; (8005248 <HAL_DMA_IRQHandler+0xe3c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d018      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a30      	ldr	r2, [pc, #192]	; (800524c <HAL_DMA_IRQHandler+0xe40>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <HAL_DMA_IRQHandler+0xe44>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <HAL_DMA_IRQHandler+0xe48>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <HAL_DMA_IRQHandler+0xe4c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xdaa>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2a      	ldr	r2, [pc, #168]	; (800525c <HAL_DMA_IRQHandler+0xe50>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <HAL_DMA_IRQHandler+0xdbc>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 021c 	bic.w	r2, r2, #28
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e007      	b.n	80051d8 <HAL_DMA_IRQHandler+0xdcc>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 020e 	bic.w	r2, r2, #14
 80051d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	2201      	movs	r2, #1
 80051e2:	409a      	lsls	r2, r3
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
 800520e:	e004      	b.n	800521a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005210:	bf00      	nop
 8005212:	e002      	b.n	800521a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005218:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800521a:	3728      	adds	r7, #40	; 0x28
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40020010 	.word	0x40020010
 8005224:	40020028 	.word	0x40020028
 8005228:	40020040 	.word	0x40020040
 800522c:	40020058 	.word	0x40020058
 8005230:	40020070 	.word	0x40020070
 8005234:	40020088 	.word	0x40020088
 8005238:	400200a0 	.word	0x400200a0
 800523c:	400200b8 	.word	0x400200b8
 8005240:	40020410 	.word	0x40020410
 8005244:	40020428 	.word	0x40020428
 8005248:	40020440 	.word	0x40020440
 800524c:	40020458 	.word	0x40020458
 8005250:	40020470 	.word	0x40020470
 8005254:	40020488 	.word	0x40020488
 8005258:	400204a0 	.word	0x400204a0
 800525c:	400204b8 	.word	0x400204b8

08005260 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a84      	ldr	r2, [pc, #528]	; (80054a8 <DMA_SetConfig+0x230>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d072      	beq.n	8005382 <DMA_SetConfig+0x10a>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a82      	ldr	r2, [pc, #520]	; (80054ac <DMA_SetConfig+0x234>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d06d      	beq.n	8005382 <DMA_SetConfig+0x10a>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a81      	ldr	r2, [pc, #516]	; (80054b0 <DMA_SetConfig+0x238>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d068      	beq.n	8005382 <DMA_SetConfig+0x10a>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a7f      	ldr	r2, [pc, #508]	; (80054b4 <DMA_SetConfig+0x23c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d063      	beq.n	8005382 <DMA_SetConfig+0x10a>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a7e      	ldr	r2, [pc, #504]	; (80054b8 <DMA_SetConfig+0x240>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d05e      	beq.n	8005382 <DMA_SetConfig+0x10a>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a7c      	ldr	r2, [pc, #496]	; (80054bc <DMA_SetConfig+0x244>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d059      	beq.n	8005382 <DMA_SetConfig+0x10a>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a7b      	ldr	r2, [pc, #492]	; (80054c0 <DMA_SetConfig+0x248>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d054      	beq.n	8005382 <DMA_SetConfig+0x10a>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a79      	ldr	r2, [pc, #484]	; (80054c4 <DMA_SetConfig+0x24c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d04f      	beq.n	8005382 <DMA_SetConfig+0x10a>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a78      	ldr	r2, [pc, #480]	; (80054c8 <DMA_SetConfig+0x250>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d04a      	beq.n	8005382 <DMA_SetConfig+0x10a>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a76      	ldr	r2, [pc, #472]	; (80054cc <DMA_SetConfig+0x254>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d045      	beq.n	8005382 <DMA_SetConfig+0x10a>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a75      	ldr	r2, [pc, #468]	; (80054d0 <DMA_SetConfig+0x258>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d040      	beq.n	8005382 <DMA_SetConfig+0x10a>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a73      	ldr	r2, [pc, #460]	; (80054d4 <DMA_SetConfig+0x25c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d03b      	beq.n	8005382 <DMA_SetConfig+0x10a>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a72      	ldr	r2, [pc, #456]	; (80054d8 <DMA_SetConfig+0x260>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d036      	beq.n	8005382 <DMA_SetConfig+0x10a>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a70      	ldr	r2, [pc, #448]	; (80054dc <DMA_SetConfig+0x264>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d031      	beq.n	8005382 <DMA_SetConfig+0x10a>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a6f      	ldr	r2, [pc, #444]	; (80054e0 <DMA_SetConfig+0x268>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d02c      	beq.n	8005382 <DMA_SetConfig+0x10a>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a6d      	ldr	r2, [pc, #436]	; (80054e4 <DMA_SetConfig+0x26c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d027      	beq.n	8005382 <DMA_SetConfig+0x10a>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a6c      	ldr	r2, [pc, #432]	; (80054e8 <DMA_SetConfig+0x270>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d022      	beq.n	8005382 <DMA_SetConfig+0x10a>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a6a      	ldr	r2, [pc, #424]	; (80054ec <DMA_SetConfig+0x274>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01d      	beq.n	8005382 <DMA_SetConfig+0x10a>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a69      	ldr	r2, [pc, #420]	; (80054f0 <DMA_SetConfig+0x278>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d018      	beq.n	8005382 <DMA_SetConfig+0x10a>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a67      	ldr	r2, [pc, #412]	; (80054f4 <DMA_SetConfig+0x27c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <DMA_SetConfig+0x10a>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a66      	ldr	r2, [pc, #408]	; (80054f8 <DMA_SetConfig+0x280>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00e      	beq.n	8005382 <DMA_SetConfig+0x10a>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a64      	ldr	r2, [pc, #400]	; (80054fc <DMA_SetConfig+0x284>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d009      	beq.n	8005382 <DMA_SetConfig+0x10a>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a63      	ldr	r2, [pc, #396]	; (8005500 <DMA_SetConfig+0x288>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d004      	beq.n	8005382 <DMA_SetConfig+0x10a>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a61      	ldr	r2, [pc, #388]	; (8005504 <DMA_SetConfig+0x28c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d101      	bne.n	8005386 <DMA_SetConfig+0x10e>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <DMA_SetConfig+0x110>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00d      	beq.n	80053a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005394:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d004      	beq.n	80053a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a3e      	ldr	r2, [pc, #248]	; (80054a8 <DMA_SetConfig+0x230>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d04a      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a3d      	ldr	r2, [pc, #244]	; (80054ac <DMA_SetConfig+0x234>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d045      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a3b      	ldr	r2, [pc, #236]	; (80054b0 <DMA_SetConfig+0x238>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d040      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3a      	ldr	r2, [pc, #232]	; (80054b4 <DMA_SetConfig+0x23c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d03b      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a38      	ldr	r2, [pc, #224]	; (80054b8 <DMA_SetConfig+0x240>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d036      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a37      	ldr	r2, [pc, #220]	; (80054bc <DMA_SetConfig+0x244>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d031      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a35      	ldr	r2, [pc, #212]	; (80054c0 <DMA_SetConfig+0x248>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d02c      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a34      	ldr	r2, [pc, #208]	; (80054c4 <DMA_SetConfig+0x24c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d027      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a32      	ldr	r2, [pc, #200]	; (80054c8 <DMA_SetConfig+0x250>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d022      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a31      	ldr	r2, [pc, #196]	; (80054cc <DMA_SetConfig+0x254>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d01d      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a2f      	ldr	r2, [pc, #188]	; (80054d0 <DMA_SetConfig+0x258>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2e      	ldr	r2, [pc, #184]	; (80054d4 <DMA_SetConfig+0x25c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d013      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2c      	ldr	r2, [pc, #176]	; (80054d8 <DMA_SetConfig+0x260>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a2b      	ldr	r2, [pc, #172]	; (80054dc <DMA_SetConfig+0x264>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <DMA_SetConfig+0x268>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <DMA_SetConfig+0x1d0>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a28      	ldr	r2, [pc, #160]	; (80054e4 <DMA_SetConfig+0x26c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d101      	bne.n	800544c <DMA_SetConfig+0x1d4>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <DMA_SetConfig+0x1d6>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d05a      	beq.n	8005508 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	223f      	movs	r2, #63	; 0x3f
 800545c:	409a      	lsls	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005470:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d108      	bne.n	8005494 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005492:	e087      	b.n	80055a4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]
}
 80054a4:	e07e      	b.n	80055a4 <DMA_SetConfig+0x32c>
 80054a6:	bf00      	nop
 80054a8:	40020010 	.word	0x40020010
 80054ac:	40020028 	.word	0x40020028
 80054b0:	40020040 	.word	0x40020040
 80054b4:	40020058 	.word	0x40020058
 80054b8:	40020070 	.word	0x40020070
 80054bc:	40020088 	.word	0x40020088
 80054c0:	400200a0 	.word	0x400200a0
 80054c4:	400200b8 	.word	0x400200b8
 80054c8:	40020410 	.word	0x40020410
 80054cc:	40020428 	.word	0x40020428
 80054d0:	40020440 	.word	0x40020440
 80054d4:	40020458 	.word	0x40020458
 80054d8:	40020470 	.word	0x40020470
 80054dc:	40020488 	.word	0x40020488
 80054e0:	400204a0 	.word	0x400204a0
 80054e4:	400204b8 	.word	0x400204b8
 80054e8:	58025408 	.word	0x58025408
 80054ec:	5802541c 	.word	0x5802541c
 80054f0:	58025430 	.word	0x58025430
 80054f4:	58025444 	.word	0x58025444
 80054f8:	58025458 	.word	0x58025458
 80054fc:	5802546c 	.word	0x5802546c
 8005500:	58025480 	.word	0x58025480
 8005504:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a28      	ldr	r2, [pc, #160]	; (80055b0 <DMA_SetConfig+0x338>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d022      	beq.n	8005558 <DMA_SetConfig+0x2e0>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <DMA_SetConfig+0x33c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d01d      	beq.n	8005558 <DMA_SetConfig+0x2e0>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a25      	ldr	r2, [pc, #148]	; (80055b8 <DMA_SetConfig+0x340>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d018      	beq.n	8005558 <DMA_SetConfig+0x2e0>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a24      	ldr	r2, [pc, #144]	; (80055bc <DMA_SetConfig+0x344>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <DMA_SetConfig+0x2e0>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <DMA_SetConfig+0x348>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <DMA_SetConfig+0x2e0>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <DMA_SetConfig+0x34c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d009      	beq.n	8005558 <DMA_SetConfig+0x2e0>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <DMA_SetConfig+0x350>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <DMA_SetConfig+0x2e0>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <DMA_SetConfig+0x354>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d101      	bne.n	800555c <DMA_SetConfig+0x2e4>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <DMA_SetConfig+0x2e6>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d020      	beq.n	80055a4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	2201      	movs	r2, #1
 800556c:	409a      	lsls	r2, r3
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d108      	bne.n	8005594 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	60da      	str	r2, [r3, #12]
}
 8005592:	e007      	b.n	80055a4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	58025408 	.word	0x58025408
 80055b4:	5802541c 	.word	0x5802541c
 80055b8:	58025430 	.word	0x58025430
 80055bc:	58025444 	.word	0x58025444
 80055c0:	58025458 	.word	0x58025458
 80055c4:	5802546c 	.word	0x5802546c
 80055c8:	58025480 	.word	0x58025480
 80055cc:	58025494 	.word	0x58025494

080055d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a42      	ldr	r2, [pc, #264]	; (80056e8 <DMA_CalcBaseAndBitshift+0x118>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d04a      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a41      	ldr	r2, [pc, #260]	; (80056ec <DMA_CalcBaseAndBitshift+0x11c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d045      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a3f      	ldr	r2, [pc, #252]	; (80056f0 <DMA_CalcBaseAndBitshift+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d040      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a3e      	ldr	r2, [pc, #248]	; (80056f4 <DMA_CalcBaseAndBitshift+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d03b      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a3c      	ldr	r2, [pc, #240]	; (80056f8 <DMA_CalcBaseAndBitshift+0x128>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d036      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a3b      	ldr	r2, [pc, #236]	; (80056fc <DMA_CalcBaseAndBitshift+0x12c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d031      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a39      	ldr	r2, [pc, #228]	; (8005700 <DMA_CalcBaseAndBitshift+0x130>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d02c      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a38      	ldr	r2, [pc, #224]	; (8005704 <DMA_CalcBaseAndBitshift+0x134>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d027      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a36      	ldr	r2, [pc, #216]	; (8005708 <DMA_CalcBaseAndBitshift+0x138>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d022      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a35      	ldr	r2, [pc, #212]	; (800570c <DMA_CalcBaseAndBitshift+0x13c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d01d      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a33      	ldr	r2, [pc, #204]	; (8005710 <DMA_CalcBaseAndBitshift+0x140>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d018      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a32      	ldr	r2, [pc, #200]	; (8005714 <DMA_CalcBaseAndBitshift+0x144>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a30      	ldr	r2, [pc, #192]	; (8005718 <DMA_CalcBaseAndBitshift+0x148>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00e      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2f      	ldr	r2, [pc, #188]	; (800571c <DMA_CalcBaseAndBitshift+0x14c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d009      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a2d      	ldr	r2, [pc, #180]	; (8005720 <DMA_CalcBaseAndBitshift+0x150>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xa8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a2c      	ldr	r2, [pc, #176]	; (8005724 <DMA_CalcBaseAndBitshift+0x154>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d101      	bne.n	800567c <DMA_CalcBaseAndBitshift+0xac>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <DMA_CalcBaseAndBitshift+0xae>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d024      	beq.n	80056cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	3b10      	subs	r3, #16
 800568a:	4a27      	ldr	r2, [pc, #156]	; (8005728 <DMA_CalcBaseAndBitshift+0x158>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	4a24      	ldr	r2, [pc, #144]	; (800572c <DMA_CalcBaseAndBitshift+0x15c>)
 800569c:	5cd3      	ldrb	r3, [r2, r3]
 800569e:	461a      	mov	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d908      	bls.n	80056bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <DMA_CalcBaseAndBitshift+0x160>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	659a      	str	r2, [r3, #88]	; 0x58
 80056ba:	e00d      	b.n	80056d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <DMA_CalcBaseAndBitshift+0x160>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6593      	str	r3, [r2, #88]	; 0x58
 80056ca:	e005      	b.n	80056d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40020010 	.word	0x40020010
 80056ec:	40020028 	.word	0x40020028
 80056f0:	40020040 	.word	0x40020040
 80056f4:	40020058 	.word	0x40020058
 80056f8:	40020070 	.word	0x40020070
 80056fc:	40020088 	.word	0x40020088
 8005700:	400200a0 	.word	0x400200a0
 8005704:	400200b8 	.word	0x400200b8
 8005708:	40020410 	.word	0x40020410
 800570c:	40020428 	.word	0x40020428
 8005710:	40020440 	.word	0x40020440
 8005714:	40020458 	.word	0x40020458
 8005718:	40020470 	.word	0x40020470
 800571c:	40020488 	.word	0x40020488
 8005720:	400204a0 	.word	0x400204a0
 8005724:	400204b8 	.word	0x400204b8
 8005728:	aaaaaaab 	.word	0xaaaaaaab
 800572c:	0800cb78 	.word	0x0800cb78
 8005730:	fffffc00 	.word	0xfffffc00

08005734 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d120      	bne.n	800578a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	2b03      	cmp	r3, #3
 800574e:	d858      	bhi.n	8005802 <DMA_CheckFifoParam+0xce>
 8005750:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <DMA_CheckFifoParam+0x24>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	08005769 	.word	0x08005769
 800575c:	0800577b 	.word	0x0800577b
 8005760:	08005769 	.word	0x08005769
 8005764:	08005803 	.word	0x08005803
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d048      	beq.n	8005806 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005778:	e045      	b.n	8005806 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005782:	d142      	bne.n	800580a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005788:	e03f      	b.n	800580a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005792:	d123      	bne.n	80057dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	2b03      	cmp	r3, #3
 800579a:	d838      	bhi.n	800580e <DMA_CheckFifoParam+0xda>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <DMA_CheckFifoParam+0x70>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057bb 	.word	0x080057bb
 80057ac:	080057b5 	.word	0x080057b5
 80057b0:	080057cd 	.word	0x080057cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
        break;
 80057b8:	e030      	b.n	800581c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d025      	beq.n	8005812 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057ca:	e022      	b.n	8005812 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057d4:	d11f      	bne.n	8005816 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057da:	e01c      	b.n	8005816 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d902      	bls.n	80057ea <DMA_CheckFifoParam+0xb6>
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d003      	beq.n	80057f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80057e8:	e018      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
        break;
 80057ee:	e015      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00e      	beq.n	800581a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005800:	e00b      	b.n	800581a <DMA_CheckFifoParam+0xe6>
        break;
 8005802:	bf00      	nop
 8005804:	e00a      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 8005806:	bf00      	nop
 8005808:	e008      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 800580a:	bf00      	nop
 800580c:	e006      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 800580e:	bf00      	nop
 8005810:	e004      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 8005812:	bf00      	nop
 8005814:	e002      	b.n	800581c <DMA_CheckFifoParam+0xe8>
        break;
 8005816:	bf00      	nop
 8005818:	e000      	b.n	800581c <DMA_CheckFifoParam+0xe8>
    break;
 800581a:	bf00      	nop
    }
  }

  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a38      	ldr	r2, [pc, #224]	; (8005920 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a36      	ldr	r2, [pc, #216]	; (8005924 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01d      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a35      	ldr	r2, [pc, #212]	; (8005928 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a33      	ldr	r2, [pc, #204]	; (800592c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a32      	ldr	r2, [pc, #200]	; (8005930 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a30      	ldr	r2, [pc, #192]	; (8005934 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2f      	ldr	r2, [pc, #188]	; (8005938 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2d      	ldr	r2, [pc, #180]	; (800593c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01a      	beq.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	3b08      	subs	r3, #8
 800589c:	4a28      	ldr	r2, [pc, #160]	; (8005940 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800589e:	fba2 2303 	umull	r2, r3, r2, r3
 80058a2:	091b      	lsrs	r3, r3, #4
 80058a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4b26      	ldr	r3, [pc, #152]	; (8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	461a      	mov	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a24      	ldr	r2, [pc, #144]	; (8005948 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80058b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2201      	movs	r2, #1
 80058c2:	409a      	lsls	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80058c8:	e024      	b.n	8005914 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	3b10      	subs	r3, #16
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	091b      	lsrs	r3, r3, #4
 80058da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d806      	bhi.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d902      	bls.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3308      	adds	r3, #8
 80058f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a16      	ldr	r2, [pc, #88]	; (800595c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005904:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	2201      	movs	r2, #1
 800590e:	409a      	lsls	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	58025408 	.word	0x58025408
 8005924:	5802541c 	.word	0x5802541c
 8005928:	58025430 	.word	0x58025430
 800592c:	58025444 	.word	0x58025444
 8005930:	58025458 	.word	0x58025458
 8005934:	5802546c 	.word	0x5802546c
 8005938:	58025480 	.word	0x58025480
 800593c:	58025494 	.word	0x58025494
 8005940:	cccccccd 	.word	0xcccccccd
 8005944:	16009600 	.word	0x16009600
 8005948:	58025880 	.word	0x58025880
 800594c:	aaaaaaab 	.word	0xaaaaaaab
 8005950:	400204b8 	.word	0x400204b8
 8005954:	4002040f 	.word	0x4002040f
 8005958:	10008200 	.word	0x10008200
 800595c:	40020880 	.word	0x40020880

08005960 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d04a      	beq.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d847      	bhi.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a25      	ldr	r2, [pc, #148]	; (8005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d022      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d01d      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d018      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d009      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d101      	bne.n	80059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80059e8:	671a      	str	r2, [r3, #112]	; 0x70
 80059ea:	e009      	b.n	8005a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	461a      	mov	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	2201      	movs	r2, #1
 8005a06:	409a      	lsls	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	58025408 	.word	0x58025408
 8005a1c:	5802541c 	.word	0x5802541c
 8005a20:	58025430 	.word	0x58025430
 8005a24:	58025444 	.word	0x58025444
 8005a28:	58025458 	.word	0x58025458
 8005a2c:	5802546c 	.word	0x5802546c
 8005a30:	58025480 	.word	0x58025480
 8005a34:	58025494 	.word	0x58025494
 8005a38:	1600963f 	.word	0x1600963f
 8005a3c:	58025940 	.word	0x58025940
 8005a40:	1000823f 	.word	0x1000823f
 8005a44:	40020940 	.word	0x40020940

08005a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	; 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a56:	4b89      	ldr	r3, [pc, #548]	; (8005c7c <HAL_GPIO_Init+0x234>)
 8005a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a5a:	e194      	b.n	8005d86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	2101      	movs	r1, #1
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	4013      	ands	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8186 	beq.w	8005d80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d00b      	beq.n	8005a94 <HAL_GPIO_Init+0x4c>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d007      	beq.n	8005a94 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a88:	2b11      	cmp	r3, #17
 8005a8a:	d003      	beq.n	8005a94 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b12      	cmp	r3, #18
 8005a92:	d130      	bne.n	8005af6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aca:	2201      	movs	r2, #1
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	f003 0201 	and.w	r2, r3, #1
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	2203      	movs	r2, #3
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d003      	beq.n	8005b36 <HAL_GPIO_Init+0xee>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b12      	cmp	r3, #18
 8005b34:	d123      	bne.n	8005b7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	08da      	lsrs	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3208      	adds	r2, #8
 8005b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	08da      	lsrs	r2, r3, #3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3208      	adds	r2, #8
 8005b78:	69b9      	ldr	r1, [r7, #24]
 8005b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	2203      	movs	r2, #3
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 0203 	and.w	r2, r3, #3
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80e0 	beq.w	8005d80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bc0:	4b2f      	ldr	r3, [pc, #188]	; (8005c80 <HAL_GPIO_Init+0x238>)
 8005bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bc6:	4a2e      	ldr	r2, [pc, #184]	; (8005c80 <HAL_GPIO_Init+0x238>)
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005bd0:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <HAL_GPIO_Init+0x238>)
 8005bd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bde:	4a29      	ldr	r2, [pc, #164]	; (8005c84 <HAL_GPIO_Init+0x23c>)
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	3302      	adds	r3, #2
 8005be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	220f      	movs	r2, #15
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a20      	ldr	r2, [pc, #128]	; (8005c88 <HAL_GPIO_Init+0x240>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d052      	beq.n	8005cb0 <HAL_GPIO_Init+0x268>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1f      	ldr	r2, [pc, #124]	; (8005c8c <HAL_GPIO_Init+0x244>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d031      	beq.n	8005c76 <HAL_GPIO_Init+0x22e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1e      	ldr	r2, [pc, #120]	; (8005c90 <HAL_GPIO_Init+0x248>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d02b      	beq.n	8005c72 <HAL_GPIO_Init+0x22a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <HAL_GPIO_Init+0x24c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d025      	beq.n	8005c6e <HAL_GPIO_Init+0x226>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1c      	ldr	r2, [pc, #112]	; (8005c98 <HAL_GPIO_Init+0x250>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01f      	beq.n	8005c6a <HAL_GPIO_Init+0x222>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <HAL_GPIO_Init+0x254>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d019      	beq.n	8005c66 <HAL_GPIO_Init+0x21e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1a      	ldr	r2, [pc, #104]	; (8005ca0 <HAL_GPIO_Init+0x258>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <HAL_GPIO_Init+0x21a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <HAL_GPIO_Init+0x25c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00d      	beq.n	8005c5e <HAL_GPIO_Init+0x216>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <HAL_GPIO_Init+0x260>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <HAL_GPIO_Init+0x212>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	; (8005cac <HAL_GPIO_Init+0x264>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_GPIO_Init+0x20e>
 8005c52:	2309      	movs	r3, #9
 8005c54:	e02d      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c56:	230a      	movs	r3, #10
 8005c58:	e02b      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	e029      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c5e:	2307      	movs	r3, #7
 8005c60:	e027      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c62:	2306      	movs	r3, #6
 8005c64:	e025      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c66:	2305      	movs	r3, #5
 8005c68:	e023      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c6a:	2304      	movs	r3, #4
 8005c6c:	e021      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e01f      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e01d      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e01b      	b.n	8005cb2 <HAL_GPIO_Init+0x26a>
 8005c7a:	bf00      	nop
 8005c7c:	58000080 	.word	0x58000080
 8005c80:	58024400 	.word	0x58024400
 8005c84:	58000400 	.word	0x58000400
 8005c88:	58020000 	.word	0x58020000
 8005c8c:	58020400 	.word	0x58020400
 8005c90:	58020800 	.word	0x58020800
 8005c94:	58020c00 	.word	0x58020c00
 8005c98:	58021000 	.word	0x58021000
 8005c9c:	58021400 	.word	0x58021400
 8005ca0:	58021800 	.word	0x58021800
 8005ca4:	58021c00 	.word	0x58021c00
 8005ca8:	58022000 	.word	0x58022000
 8005cac:	58022400 	.word	0x58022400
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	f002 0203 	and.w	r2, r2, #3
 8005cb8:	0092      	lsls	r2, r2, #2
 8005cba:	4093      	lsls	r3, r2
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cc2:	4938      	ldr	r1, [pc, #224]	; (8005da4 <HAL_GPIO_Init+0x35c>)
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	089b      	lsrs	r3, r3, #2
 8005cc8:	3302      	adds	r3, #2
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4013      	ands	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	4013      	ands	r3, r2
 8005d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	3301      	adds	r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f47f ae63 	bne.w	8005a5c <HAL_GPIO_Init+0x14>
  }
}
 8005d96:	bf00      	nop
 8005d98:	3724      	adds	r7, #36	; 0x24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	58000400 	.word	0x58000400

08005da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
 8005db4:	4613      	mov	r3, r2
 8005db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005db8:	787b      	ldrb	r3, [r7, #1]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005dc4:	e003      	b.n	8005dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005dc6:	887b      	ldrh	r3, [r7, #2]
 8005dc8:	041a      	lsls	r2, r3, #16
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	619a      	str	r2, [r3, #24]
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e0bd      	b.n	8005f6a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d031      	beq.n	8005e96 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a4f      	ldr	r2, [pc, #316]	; (8005f74 <HAL_HRTIM_Init+0x198>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d10e      	bne.n	8005e5a <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005e3c:	4b4e      	ldr	r3, [pc, #312]	; (8005f78 <HAL_HRTIM_Init+0x19c>)
 8005e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e42:	4a4d      	ldr	r2, [pc, #308]	; (8005f78 <HAL_HRTIM_Init+0x19c>)
 8005e44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005e4c:	4b4a      	ldr	r3, [pc, #296]	; (8005f78 <HAL_HRTIM_Init+0x19c>)
 8005e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005e68:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e7e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fb fbd4 	bl	8001644 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d012      	beq.n	8005ece <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]
 8005ee2:	e03e      	b.n	8005f62 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005ee4:	7dfa      	ldrb	r2, [r7, #23]
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3318      	adds	r3, #24
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8005ef8:	7dfa      	ldrb	r2, [r7, #23]
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	4613      	mov	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	440b      	add	r3, r1
 8005f06:	331c      	adds	r3, #28
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005f0c:	7dfa      	ldrb	r2, [r7, #23]
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4613      	mov	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	3320      	adds	r3, #32
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005f20:	7dfa      	ldrb	r2, [r7, #23]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	3324      	adds	r3, #36	; 0x24
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8005f34:	7dfa      	ldrb	r2, [r7, #23]
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	1a9b      	subs	r3, r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	3328      	adds	r3, #40	; 0x28
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8005f48:	7dfa      	ldrb	r2, [r7, #23]
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	3330      	adds	r3, #48	; 0x30
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d9bd      	bls.n	8005ee4 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40017400 	.word	0x40017400
 8005f78:	58024400 	.word	0x58024400

08005f7c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d101      	bne.n	8005f98 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
 8005f96:	e015      	b.n	8005fc4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b05      	cmp	r3, #5
 8005fa4:	d104      	bne.n	8005fb0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f8b9 	bl	8006120 <HRTIM_MasterBase_Config>
 8005fae:	e004      	b.n	8005fba <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f8e2 	bl	800617e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d101      	bne.n	8005fe8 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e095      	b.n	8006114 <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e08e      	b.n	8006114 <HAL_HRTIM_ADCTriggerConfig+0x148>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800600e:	617b      	str	r3, [r7, #20]

  switch (ADCTrigger)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	3b01      	subs	r3, #1
 8006014:	2b07      	cmp	r3, #7
 8006016:	d85e      	bhi.n	80060d6 <HAL_HRTIM_ADCTriggerConfig+0x10a>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <HAL_HRTIM_ADCTriggerConfig+0x54>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006041 	.word	0x08006041
 8006024:	08006065 	.word	0x08006065
 8006028:	080060d7 	.word	0x080060d7
 800602c:	0800608b 	.word	0x0800608b
 8006030:	080060d7 	.word	0x080060d7
 8006034:	080060d7 	.word	0x080060d7
 8006038:	080060d7 	.word	0x080060d7
 800603c:	080060b1 	.word	0x080060b1
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006046:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6852      	ldr	r2, [r2, #4]
 800605e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 8006062:	e041      	b.n	80060e8 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800606a:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6852      	ldr	r2, [r2, #4]
 8006084:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 8006088:	e02e      	b.n	80060e8 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8006090:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	019b      	lsls	r3, r3, #6
 8006098:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6852      	ldr	r2, [r2, #4]
 80060aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 80060ae:	e01b      	b.n	80060e8 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80060b6:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	025b      	lsls	r3, r3, #9
 80060be:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6852      	ldr	r2, [r2, #4]
 80060d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 80060d4:	e008      	b.n	80060e8 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2207      	movs	r2, #7
 80060da:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80060e6:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b07      	cmp	r3, #7
 80060f2:	d101      	bne.n	80060f8 <HAL_HRTIM_ADCTriggerConfig+0x12c>
  {
     return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e00d      	b.n	8006114 <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f023 0307 	bic.w	r3, r3, #7
 8006138:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0318 	bic.w	r3, r3, #24
 800614a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	6852      	ldr	r2, [r2, #4]
 8006170:	619a      	str	r2, [r3, #24]
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800617e:	b480      	push	{r7}
 8006180:	b087      	sub	sp, #28
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	3301      	adds	r3, #1
 8006192:	01db      	lsls	r3, r3, #7
 8006194:	4413      	add	r3, r2
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f023 0307 	bic.w	r3, r3, #7
 80061a0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 0318 	bic.w	r3, r3, #24
 80061b2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	3301      	adds	r3, #1
 80061c6:	01db      	lsls	r3, r3, #7
 80061c8:	4413      	add	r3, r2
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6819      	ldr	r1, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	01db      	lsls	r3, r3, #7
 80061da:	440b      	add	r3, r1
 80061dc:	3394      	adds	r3, #148	; 0x94
 80061de:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	01db      	lsls	r3, r3, #7
 80061ec:	440b      	add	r3, r1
 80061ee:	3398      	adds	r3, #152	; 0x98
 80061f0:	601a      	str	r2, [r3, #0]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006208:	4b19      	ldr	r3, [pc, #100]	; (8006270 <HAL_PWREx_ConfigSupply+0x70>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b04      	cmp	r3, #4
 8006212:	d00a      	beq.n	800622a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006214:	4b16      	ldr	r3, [pc, #88]	; (8006270 <HAL_PWREx_ConfigSupply+0x70>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	429a      	cmp	r2, r3
 8006220:	d001      	beq.n	8006226 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e01f      	b.n	8006266 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	e01d      	b.n	8006266 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <HAL_PWREx_ConfigSupply+0x70>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f023 0207 	bic.w	r2, r3, #7
 8006232:	490f      	ldr	r1, [pc, #60]	; (8006270 <HAL_PWREx_ConfigSupply+0x70>)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4313      	orrs	r3, r2
 8006238:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800623a:	f7fb fd19 	bl	8001c70 <HAL_GetTick>
 800623e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006240:	e009      	b.n	8006256 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006242:	f7fb fd15 	bl	8001c70 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006250:	d901      	bls.n	8006256 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e007      	b.n	8006266 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <HAL_PWREx_ConfigSupply+0x70>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800625e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006262:	d1ee      	bne.n	8006242 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	58024800 	.word	0x58024800

08006274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	; 0x30
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e3ff      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8087 	beq.w	80063a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006294:	4b99      	ldr	r3, [pc, #612]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800629e:	4b97      	ldr	r3, [pc, #604]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	2b10      	cmp	r3, #16
 80062a8:	d007      	beq.n	80062ba <HAL_RCC_OscConfig+0x46>
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	2b18      	cmp	r3, #24
 80062ae:	d110      	bne.n	80062d2 <HAL_RCC_OscConfig+0x5e>
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d10b      	bne.n	80062d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ba:	4b90      	ldr	r3, [pc, #576]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d06c      	beq.n	80063a0 <HAL_RCC_OscConfig+0x12c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d168      	bne.n	80063a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e3d9      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062da:	d106      	bne.n	80062ea <HAL_RCC_OscConfig+0x76>
 80062dc:	4b87      	ldr	r3, [pc, #540]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a86      	ldr	r2, [pc, #536]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80062e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	e02e      	b.n	8006348 <HAL_RCC_OscConfig+0xd4>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10c      	bne.n	800630c <HAL_RCC_OscConfig+0x98>
 80062f2:	4b82      	ldr	r3, [pc, #520]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a81      	ldr	r2, [pc, #516]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80062f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	4b7f      	ldr	r3, [pc, #508]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a7e      	ldr	r2, [pc, #504]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e01d      	b.n	8006348 <HAL_RCC_OscConfig+0xd4>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006314:	d10c      	bne.n	8006330 <HAL_RCC_OscConfig+0xbc>
 8006316:	4b79      	ldr	r3, [pc, #484]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a78      	ldr	r2, [pc, #480]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 800631c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	4b76      	ldr	r3, [pc, #472]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a75      	ldr	r2, [pc, #468]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e00b      	b.n	8006348 <HAL_RCC_OscConfig+0xd4>
 8006330:	4b72      	ldr	r3, [pc, #456]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a71      	ldr	r2, [pc, #452]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b6f      	ldr	r3, [pc, #444]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6e      	ldr	r2, [pc, #440]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d013      	beq.n	8006378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fb fc8e 	bl	8001c70 <HAL_GetTick>
 8006354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006358:	f7fb fc8a 	bl	8001c70 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e38d      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800636a:	4b64      	ldr	r3, [pc, #400]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0xe4>
 8006376:	e014      	b.n	80063a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fb fc7a 	bl	8001c70 <HAL_GetTick>
 800637c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006380:	f7fb fc76 	bl	8001c70 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b64      	cmp	r3, #100	; 0x64
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e379      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006392:	4b5a      	ldr	r3, [pc, #360]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x10c>
 800639e:	e000      	b.n	80063a2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80ae 	beq.w	800650c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b0:	4b52      	ldr	r3, [pc, #328]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063ba:	4b50      	ldr	r3, [pc, #320]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <HAL_RCC_OscConfig+0x162>
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	2b18      	cmp	r3, #24
 80063ca:	d13a      	bne.n	8006442 <HAL_RCC_OscConfig+0x1ce>
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d135      	bne.n	8006442 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063d6:	4b49      	ldr	r3, [pc, #292]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_RCC_OscConfig+0x17a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e34b      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ee:	f7fb fc6d 	bl	8001ccc <HAL_GetREVID>
 80063f2:	4602      	mov	r2, r0
 80063f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d817      	bhi.n	800642c <HAL_RCC_OscConfig+0x1b8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d108      	bne.n	8006416 <HAL_RCC_OscConfig+0x1a2>
 8006404:	4b3d      	ldr	r3, [pc, #244]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800640c:	4a3b      	ldr	r2, [pc, #236]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 800640e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006412:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006414:	e07a      	b.n	800650c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006416:	4b39      	ldr	r3, [pc, #228]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	031b      	lsls	r3, r3, #12
 8006424:	4935      	ldr	r1, [pc, #212]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006426:	4313      	orrs	r3, r2
 8006428:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800642a:	e06f      	b.n	800650c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642c:	4b33      	ldr	r3, [pc, #204]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	061b      	lsls	r3, r3, #24
 800643a:	4930      	ldr	r1, [pc, #192]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 800643c:	4313      	orrs	r3, r2
 800643e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006440:	e064      	b.n	800650c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d045      	beq.n	80064d6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800644a:	4b2c      	ldr	r3, [pc, #176]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f023 0219 	bic.w	r2, r3, #25
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	4929      	ldr	r1, [pc, #164]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006458:	4313      	orrs	r3, r2
 800645a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645c:	f7fb fc08 	bl	8001c70 <HAL_GetTick>
 8006460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006464:	f7fb fc04 	bl	8001c70 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e307      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006476:	4b21      	ldr	r3, [pc, #132]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006482:	f7fb fc23 	bl	8001ccc <HAL_GetREVID>
 8006486:	4602      	mov	r2, r0
 8006488:	f241 0303 	movw	r3, #4099	; 0x1003
 800648c:	429a      	cmp	r2, r3
 800648e:	d817      	bhi.n	80064c0 <HAL_RCC_OscConfig+0x24c>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	d108      	bne.n	80064aa <HAL_RCC_OscConfig+0x236>
 8006498:	4b18      	ldr	r3, [pc, #96]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80064a0:	4a16      	ldr	r2, [pc, #88]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80064a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a6:	6053      	str	r3, [r2, #4]
 80064a8:	e030      	b.n	800650c <HAL_RCC_OscConfig+0x298>
 80064aa:	4b14      	ldr	r3, [pc, #80]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	031b      	lsls	r3, r3, #12
 80064b8:	4910      	ldr	r1, [pc, #64]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	604b      	str	r3, [r1, #4]
 80064be:	e025      	b.n	800650c <HAL_RCC_OscConfig+0x298>
 80064c0:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	061b      	lsls	r3, r3, #24
 80064ce:	490b      	ldr	r1, [pc, #44]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	604b      	str	r3, [r1, #4]
 80064d4:	e01a      	b.n	800650c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064d6:	4b09      	ldr	r3, [pc, #36]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a08      	ldr	r2, [pc, #32]	; (80064fc <HAL_RCC_OscConfig+0x288>)
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e2:	f7fb fbc5 	bl	8001c70 <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064e8:	e00a      	b.n	8006500 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ea:	f7fb fbc1 	bl	8001c70 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d903      	bls.n	8006500 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e2c4      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
 80064fc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006500:	4ba4      	ldr	r3, [pc, #656]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1ee      	bne.n	80064ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80a9 	beq.w	800666c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800651a:	4b9e      	ldr	r3, [pc, #632]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006522:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006524:	4b9b      	ldr	r3, [pc, #620]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2b08      	cmp	r3, #8
 800652e:	d007      	beq.n	8006540 <HAL_RCC_OscConfig+0x2cc>
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2b18      	cmp	r3, #24
 8006534:	d13a      	bne.n	80065ac <HAL_RCC_OscConfig+0x338>
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b01      	cmp	r3, #1
 800653e:	d135      	bne.n	80065ac <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006540:	4b94      	ldr	r3, [pc, #592]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <HAL_RCC_OscConfig+0x2e4>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d001      	beq.n	8006558 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e296      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006558:	f7fb fbb8 	bl	8001ccc <HAL_GetREVID>
 800655c:	4602      	mov	r2, r0
 800655e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006562:	429a      	cmp	r2, r3
 8006564:	d817      	bhi.n	8006596 <HAL_RCC_OscConfig+0x322>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	2b20      	cmp	r3, #32
 800656c:	d108      	bne.n	8006580 <HAL_RCC_OscConfig+0x30c>
 800656e:	4b89      	ldr	r3, [pc, #548]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006576:	4a87      	ldr	r2, [pc, #540]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800657c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800657e:	e075      	b.n	800666c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006580:	4b84      	ldr	r3, [pc, #528]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	069b      	lsls	r3, r3, #26
 800658e:	4981      	ldr	r1, [pc, #516]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006590:	4313      	orrs	r3, r2
 8006592:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006594:	e06a      	b.n	800666c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006596:	4b7f      	ldr	r3, [pc, #508]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	061b      	lsls	r3, r3, #24
 80065a4:	497b      	ldr	r1, [pc, #492]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065aa:	e05f      	b.n	800666c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d042      	beq.n	800663a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80065b4:	4b77      	ldr	r3, [pc, #476]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a76      	ldr	r2, [pc, #472]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80065ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fb fb56 	bl	8001c70 <HAL_GetTick>
 80065c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80065c8:	f7fb fb52 	bl	8001c70 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e255      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065da:	4b6e      	ldr	r3, [pc, #440]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065e6:	f7fb fb71 	bl	8001ccc <HAL_GetREVID>
 80065ea:	4602      	mov	r2, r0
 80065ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d817      	bhi.n	8006624 <HAL_RCC_OscConfig+0x3b0>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d108      	bne.n	800660e <HAL_RCC_OscConfig+0x39a>
 80065fc:	4b65      	ldr	r3, [pc, #404]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006604:	4a63      	ldr	r2, [pc, #396]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800660a:	6053      	str	r3, [r2, #4]
 800660c:	e02e      	b.n	800666c <HAL_RCC_OscConfig+0x3f8>
 800660e:	4b61      	ldr	r3, [pc, #388]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	069b      	lsls	r3, r3, #26
 800661c:	495d      	ldr	r1, [pc, #372]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 800661e:	4313      	orrs	r3, r2
 8006620:	604b      	str	r3, [r1, #4]
 8006622:	e023      	b.n	800666c <HAL_RCC_OscConfig+0x3f8>
 8006624:	4b5b      	ldr	r3, [pc, #364]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	4958      	ldr	r1, [pc, #352]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006634:	4313      	orrs	r3, r2
 8006636:	60cb      	str	r3, [r1, #12]
 8006638:	e018      	b.n	800666c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800663a:	4b56      	ldr	r3, [pc, #344]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a55      	ldr	r2, [pc, #340]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fb fb13 	bl	8001c70 <HAL_GetTick>
 800664a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800664e:	f7fb fb0f 	bl	8001c70 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e212      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006660:	4b4c      	ldr	r3, [pc, #304]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f0      	bne.n	800664e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d036      	beq.n	80066e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d019      	beq.n	80066b4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006680:	4b44      	ldr	r3, [pc, #272]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006684:	4a43      	ldr	r2, [pc, #268]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668c:	f7fb faf0 	bl	8001c70 <HAL_GetTick>
 8006690:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006694:	f7fb faec 	bl	8001c70 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e1ef      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066a6:	4b3b      	ldr	r3, [pc, #236]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80066a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0x420>
 80066b2:	e018      	b.n	80066e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066b4:	4b37      	ldr	r3, [pc, #220]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80066b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b8:	4a36      	ldr	r2, [pc, #216]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c0:	f7fb fad6 	bl	8001c70 <HAL_GetTick>
 80066c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066c8:	f7fb fad2 	bl	8001c70 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e1d5      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066da:	4b2e      	ldr	r3, [pc, #184]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80066dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f0      	bne.n	80066c8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d036      	beq.n	8006760 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d019      	beq.n	800672e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066fa:	4b26      	ldr	r3, [pc, #152]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a25      	ldr	r2, [pc, #148]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006700:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006704:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006706:	f7fb fab3 	bl	8001c70 <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800670e:	f7fb faaf 	bl	8001c70 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e1b2      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006720:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <HAL_RCC_OscConfig+0x49a>
 800672c:	e018      	b.n	8006760 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a18      	ldr	r2, [pc, #96]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006738:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800673a:	f7fb fa99 	bl	8001c70 <HAL_GetTick>
 800673e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006740:	e008      	b.n	8006754 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006742:	f7fb fa95 	bl	8001c70 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e198      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006754:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <HAL_RCC_OscConfig+0x520>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f0      	bne.n	8006742 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8085 	beq.w	8006878 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <HAL_RCC_OscConfig+0x524>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a09      	ldr	r2, [pc, #36]	; (8006798 <HAL_RCC_OscConfig+0x524>)
 8006774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006778:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800677a:	f7fb fa79 	bl	8001c70 <HAL_GetTick>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006780:	e00c      	b.n	800679c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006782:	f7fb fa75 	bl	8001c70 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b64      	cmp	r3, #100	; 0x64
 800678e:	d905      	bls.n	800679c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e178      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
 8006794:	58024400 	.word	0x58024400
 8006798:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800679c:	4b96      	ldr	r3, [pc, #600]	; (80069f8 <HAL_RCC_OscConfig+0x784>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0ec      	beq.n	8006782 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d106      	bne.n	80067be <HAL_RCC_OscConfig+0x54a>
 80067b0:	4b92      	ldr	r3, [pc, #584]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b4:	4a91      	ldr	r2, [pc, #580]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	6713      	str	r3, [r2, #112]	; 0x70
 80067bc:	e02d      	b.n	800681a <HAL_RCC_OscConfig+0x5a6>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <HAL_RCC_OscConfig+0x56c>
 80067c6:	4b8d      	ldr	r3, [pc, #564]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	4a8c      	ldr	r2, [pc, #560]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	6713      	str	r3, [r2, #112]	; 0x70
 80067d2:	4b8a      	ldr	r3, [pc, #552]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	4a89      	ldr	r2, [pc, #548]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067d8:	f023 0304 	bic.w	r3, r3, #4
 80067dc:	6713      	str	r3, [r2, #112]	; 0x70
 80067de:	e01c      	b.n	800681a <HAL_RCC_OscConfig+0x5a6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b05      	cmp	r3, #5
 80067e6:	d10c      	bne.n	8006802 <HAL_RCC_OscConfig+0x58e>
 80067e8:	4b84      	ldr	r3, [pc, #528]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ec:	4a83      	ldr	r2, [pc, #524]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067ee:	f043 0304 	orr.w	r3, r3, #4
 80067f2:	6713      	str	r3, [r2, #112]	; 0x70
 80067f4:	4b81      	ldr	r3, [pc, #516]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f8:	4a80      	ldr	r2, [pc, #512]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006800:	e00b      	b.n	800681a <HAL_RCC_OscConfig+0x5a6>
 8006802:	4b7e      	ldr	r3, [pc, #504]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	4a7d      	ldr	r2, [pc, #500]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	6713      	str	r3, [r2, #112]	; 0x70
 800680e:	4b7b      	ldr	r3, [pc, #492]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	4a7a      	ldr	r2, [pc, #488]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006814:	f023 0304 	bic.w	r3, r3, #4
 8006818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d015      	beq.n	800684e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006822:	f7fb fa25 	bl	8001c70 <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006828:	e00a      	b.n	8006840 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800682a:	f7fb fa21 	bl	8001c70 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	f241 3288 	movw	r2, #5000	; 0x1388
 8006838:	4293      	cmp	r3, r2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e122      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006840:	4b6e      	ldr	r3, [pc, #440]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0ee      	beq.n	800682a <HAL_RCC_OscConfig+0x5b6>
 800684c:	e014      	b.n	8006878 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684e:	f7fb fa0f 	bl	8001c70 <HAL_GetTick>
 8006852:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006854:	e00a      	b.n	800686c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006856:	f7fb fa0b 	bl	8001c70 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	f241 3288 	movw	r2, #5000	; 0x1388
 8006864:	4293      	cmp	r3, r2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e10c      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800686c:	4b63      	ldr	r3, [pc, #396]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800686e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1ee      	bne.n	8006856 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8101 	beq.w	8006a84 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006882:	4b5e      	ldr	r3, [pc, #376]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800688a:	2b18      	cmp	r3, #24
 800688c:	f000 80bc 	beq.w	8006a08 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	2b02      	cmp	r3, #2
 8006896:	f040 8095 	bne.w	80069c4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800689a:	4b58      	ldr	r3, [pc, #352]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a57      	ldr	r2, [pc, #348]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80068a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a6:	f7fb f9e3 	bl	8001c70 <HAL_GetTick>
 80068aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ae:	f7fb f9df 	bl	8001c70 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e0e2      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068c0:	4b4e      	ldr	r3, [pc, #312]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f0      	bne.n	80068ae <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068cc:	4b4b      	ldr	r3, [pc, #300]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80068ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068d0:	4b4b      	ldr	r3, [pc, #300]	; (8006a00 <HAL_RCC_OscConfig+0x78c>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80068dc:	0112      	lsls	r2, r2, #4
 80068de:	430a      	orrs	r2, r1
 80068e0:	4946      	ldr	r1, [pc, #280]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	628b      	str	r3, [r1, #40]	; 0x28
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	3b01      	subs	r3, #1
 80068ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f4:	3b01      	subs	r3, #1
 80068f6:	025b      	lsls	r3, r3, #9
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	3b01      	subs	r3, #1
 8006902:	041b      	lsls	r3, r3, #16
 8006904:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690e:	3b01      	subs	r3, #1
 8006910:	061b      	lsls	r3, r3, #24
 8006912:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006916:	4939      	ldr	r1, [pc, #228]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006918:	4313      	orrs	r3, r2
 800691a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800691c:	4b37      	ldr	r3, [pc, #220]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	4a36      	ldr	r2, [pc, #216]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006928:	4b34      	ldr	r3, [pc, #208]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800692a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800692c:	4b35      	ldr	r3, [pc, #212]	; (8006a04 <HAL_RCC_OscConfig+0x790>)
 800692e:	4013      	ands	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006934:	00d2      	lsls	r2, r2, #3
 8006936:	4931      	ldr	r1, [pc, #196]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006938:	4313      	orrs	r3, r2
 800693a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800693c:	4b2f      	ldr	r3, [pc, #188]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	f023 020c 	bic.w	r2, r3, #12
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	492c      	ldr	r1, [pc, #176]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800694a:	4313      	orrs	r3, r2
 800694c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800694e:	4b2b      	ldr	r3, [pc, #172]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	f023 0202 	bic.w	r2, r3, #2
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695a:	4928      	ldr	r1, [pc, #160]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800695c:	4313      	orrs	r3, r2
 800695e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006960:	4b26      	ldr	r3, [pc, #152]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	4a25      	ldr	r2, [pc, #148]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800696c:	4b23      	ldr	r3, [pc, #140]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	4a22      	ldr	r2, [pc, #136]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006976:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006978:	4b20      	ldr	r3, [pc, #128]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800697e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006984:	4b1d      	ldr	r3, [pc, #116]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006990:	4b1a      	ldr	r3, [pc, #104]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a19      	ldr	r2, [pc, #100]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 8006996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800699a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fb f968 	bl	8001c70 <HAL_GetTick>
 80069a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fb f964 	bl	8001c70 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e067      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069b6:	4b11      	ldr	r3, [pc, #68]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0x730>
 80069c2:	e05f      	b.n	8006a84 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c4:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a0c      	ldr	r2, [pc, #48]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80069ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d0:	f7fb f94e 	bl	8001c70 <HAL_GetTick>
 80069d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d8:	f7fb f94a 	bl	8001c70 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e04d      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ea:	4b04      	ldr	r3, [pc, #16]	; (80069fc <HAL_RCC_OscConfig+0x788>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x764>
 80069f6:	e045      	b.n	8006a84 <HAL_RCC_OscConfig+0x810>
 80069f8:	58024800 	.word	0x58024800
 80069fc:	58024400 	.word	0x58024400
 8006a00:	fffffc0c 	.word	0xfffffc0c
 8006a04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a08:	4b21      	ldr	r3, [pc, #132]	; (8006a90 <HAL_RCC_OscConfig+0x81c>)
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a0e:	4b20      	ldr	r3, [pc, #128]	; (8006a90 <HAL_RCC_OscConfig+0x81c>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d031      	beq.n	8006a80 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f003 0203 	and.w	r2, r3, #3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d12a      	bne.n	8006a80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d122      	bne.n	8006a80 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d11a      	bne.n	8006a80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	0a5b      	lsrs	r3, r3, #9
 8006a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d111      	bne.n	8006a80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	0c1b      	lsrs	r3, r3, #16
 8006a60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d108      	bne.n	8006a80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	0e1b      	lsrs	r3, r3, #24
 8006a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3730      	adds	r7, #48	; 0x30
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	58024400 	.word	0x58024400

08006a94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e19c      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006aa8:	4b8a      	ldr	r3, [pc, #552]	; (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d910      	bls.n	8006ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab6:	4b87      	ldr	r3, [pc, #540]	; (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 020f 	bic.w	r2, r3, #15
 8006abe:	4985      	ldr	r1, [pc, #532]	; (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac6:	4b83      	ldr	r3, [pc, #524]	; (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e184      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d010      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	4b7b      	ldr	r3, [pc, #492]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d908      	bls.n	8006b06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006af4:	4b78      	ldr	r3, [pc, #480]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	4975      	ldr	r1, [pc, #468]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d010      	beq.n	8006b34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	4b70      	ldr	r3, [pc, #448]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d908      	bls.n	8006b34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b22:	4b6d      	ldr	r3, [pc, #436]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	496a      	ldr	r1, [pc, #424]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d010      	beq.n	8006b62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	4b64      	ldr	r3, [pc, #400]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d908      	bls.n	8006b62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b50:	4b61      	ldr	r3, [pc, #388]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	495e      	ldr	r1, [pc, #376]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d010      	beq.n	8006b90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69da      	ldr	r2, [r3, #28]
 8006b72:	4b59      	ldr	r3, [pc, #356]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d908      	bls.n	8006b90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b7e:	4b56      	ldr	r3, [pc, #344]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	4953      	ldr	r1, [pc, #332]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d010      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	4b4d      	ldr	r3, [pc, #308]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d908      	bls.n	8006bbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bac:	4b4a      	ldr	r3, [pc, #296]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f023 020f 	bic.w	r2, r3, #15
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4947      	ldr	r1, [pc, #284]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d055      	beq.n	8006c76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006bca:	4b43      	ldr	r3, [pc, #268]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	4940      	ldr	r1, [pc, #256]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d107      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006be4:	4b3c      	ldr	r3, [pc, #240]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d121      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0f6      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d107      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bfc:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d115      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0ea      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d107      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c14:	4b30      	ldr	r3, [pc, #192]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0de      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c24:	4b2c      	ldr	r3, [pc, #176]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0d6      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c34:	4b28      	ldr	r3, [pc, #160]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f023 0207 	bic.w	r2, r3, #7
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4925      	ldr	r1, [pc, #148]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c46:	f7fb f813 	bl	8001c70 <HAL_GetTick>
 8006c4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4c:	e00a      	b.n	8006c64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c4e:	f7fb f80f 	bl	8001c70 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e0be      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c64:	4b1c      	ldr	r3, [pc, #112]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d1eb      	bne.n	8006c4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d010      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d208      	bcs.n	8006ca4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c92:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	f023 020f 	bic.w	r2, r3, #15
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	490e      	ldr	r1, [pc, #56]	; (8006cd8 <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d214      	bcs.n	8006cdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb2:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f023 020f 	bic.w	r2, r3, #15
 8006cba:	4906      	ldr	r1, [pc, #24]	; (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc2:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <HAL_RCC_ClockConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d005      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e086      	b.n	8006de2 <HAL_RCC_ClockConfig+0x34e>
 8006cd4:	52002000 	.word	0x52002000
 8006cd8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d010      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	4b3f      	ldr	r3, [pc, #252]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d208      	bcs.n	8006d0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cf8:	4b3c      	ldr	r3, [pc, #240]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	4939      	ldr	r1, [pc, #228]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d010      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695a      	ldr	r2, [r3, #20]
 8006d1a:	4b34      	ldr	r3, [pc, #208]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d208      	bcs.n	8006d38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d26:	4b31      	ldr	r3, [pc, #196]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	492e      	ldr	r1, [pc, #184]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d010      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	4b28      	ldr	r3, [pc, #160]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d208      	bcs.n	8006d66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d54:	4b25      	ldr	r3, [pc, #148]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	4922      	ldr	r1, [pc, #136]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d010      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69da      	ldr	r2, [r3, #28]
 8006d76:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d208      	bcs.n	8006d94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d82:	4b1a      	ldr	r3, [pc, #104]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	4917      	ldr	r1, [pc, #92]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d94:	f000 f834 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4b14      	ldr	r3, [pc, #80]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	4a12      	ldr	r2, [pc, #72]	; (8006df0 <HAL_RCC_ClockConfig+0x35c>)
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	fa21 f303 	lsr.w	r3, r1, r3
 8006db0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006db2:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <HAL_RCC_ClockConfig+0x358>)
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <HAL_RCC_ClockConfig+0x35c>)
 8006dbc:	5cd3      	ldrb	r3, [r2, r3]
 8006dbe:	f003 031f 	and.w	r3, r3, #31
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc8:	4a0a      	ldr	r2, [pc, #40]	; (8006df4 <HAL_RCC_ClockConfig+0x360>)
 8006dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dcc:	4a0a      	ldr	r2, [pc, #40]	; (8006df8 <HAL_RCC_ClockConfig+0x364>)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <HAL_RCC_ClockConfig+0x368>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fa ff00 	bl	8001bdc <HAL_InitTick>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	58024400 	.word	0x58024400
 8006df0:	0800cb68 	.word	0x0800cb68
 8006df4:	20000008 	.word	0x20000008
 8006df8:	20000004 	.word	0x20000004
 8006dfc:	2000000c 	.word	0x2000000c

08006e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b089      	sub	sp, #36	; 0x24
 8006e04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e06:	4baf      	ldr	r3, [pc, #700]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0e:	2b18      	cmp	r3, #24
 8006e10:	f200 814e 	bhi.w	80070b0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006e14:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e81 	.word	0x08006e81
 8006e20:	080070b1 	.word	0x080070b1
 8006e24:	080070b1 	.word	0x080070b1
 8006e28:	080070b1 	.word	0x080070b1
 8006e2c:	080070b1 	.word	0x080070b1
 8006e30:	080070b1 	.word	0x080070b1
 8006e34:	080070b1 	.word	0x080070b1
 8006e38:	080070b1 	.word	0x080070b1
 8006e3c:	08006ea7 	.word	0x08006ea7
 8006e40:	080070b1 	.word	0x080070b1
 8006e44:	080070b1 	.word	0x080070b1
 8006e48:	080070b1 	.word	0x080070b1
 8006e4c:	080070b1 	.word	0x080070b1
 8006e50:	080070b1 	.word	0x080070b1
 8006e54:	080070b1 	.word	0x080070b1
 8006e58:	080070b1 	.word	0x080070b1
 8006e5c:	08006ead 	.word	0x08006ead
 8006e60:	080070b1 	.word	0x080070b1
 8006e64:	080070b1 	.word	0x080070b1
 8006e68:	080070b1 	.word	0x080070b1
 8006e6c:	080070b1 	.word	0x080070b1
 8006e70:	080070b1 	.word	0x080070b1
 8006e74:	080070b1 	.word	0x080070b1
 8006e78:	080070b1 	.word	0x080070b1
 8006e7c:	08006eb3 	.word	0x08006eb3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e80:	4b90      	ldr	r3, [pc, #576]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d009      	beq.n	8006ea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e8c:	4b8d      	ldr	r3, [pc, #564]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	08db      	lsrs	r3, r3, #3
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	4a8c      	ldr	r2, [pc, #560]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006e9e:	e10a      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ea0:	4b89      	ldr	r3, [pc, #548]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ea2:	61bb      	str	r3, [r7, #24]
    break;
 8006ea4:	e107      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006ea6:	4b89      	ldr	r3, [pc, #548]	; (80070cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006ea8:	61bb      	str	r3, [r7, #24]
    break;
 8006eaa:	e104      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006eac:	4b88      	ldr	r3, [pc, #544]	; (80070d0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006eae:	61bb      	str	r3, [r7, #24]
    break;
 8006eb0:	e101      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006eb2:	4b84      	ldr	r3, [pc, #528]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006ebc:	4b81      	ldr	r3, [pc, #516]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	091b      	lsrs	r3, r3, #4
 8006ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ec8:	4b7e      	ldr	r3, [pc, #504]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006ed2:	4b7c      	ldr	r3, [pc, #496]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed6:	08db      	lsrs	r3, r3, #3
 8006ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80da 	beq.w	80070aa <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d05a      	beq.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d302      	bcc.n	8006f06 <HAL_RCC_GetSysClockFreq+0x106>
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d078      	beq.n	8006ff6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006f04:	e099      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f06:	4b6f      	ldr	r3, [pc, #444]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d02d      	beq.n	8006f6e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f12:	4b6c      	ldr	r3, [pc, #432]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	08db      	lsrs	r3, r3, #3
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	4a6a      	ldr	r2, [pc, #424]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f22:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	ee07 3a90 	vmov	s15, r3
 8006f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3c:	4b61      	ldr	r3, [pc, #388]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f50:	eddf 5a60 	vldr	s11, [pc, #384]	; 80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f68:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006f6c:	e087      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	ee07 3a90 	vmov	s15, r3
 8006f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f78:	eddf 6a57 	vldr	s13, [pc, #348]	; 80070d8 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f80:	4b50      	ldr	r3, [pc, #320]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f88:	ee07 3a90 	vmov	s15, r3
 8006f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f90:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f94:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb0:	e065      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80070dc <HAL_RCC_GetSysClockFreq+0x2dc>
 8006fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc4:	4b3f      	ldr	r3, [pc, #252]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fd8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff4:	e043      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	ee07 3a90 	vmov	s15, r3
 8006ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007000:	eddf 6a37 	vldr	s13, [pc, #220]	; 80070e0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007008:	4b2e      	ldr	r3, [pc, #184]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007018:	ed97 6a02 	vldr	s12, [r7, #8]
 800701c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007038:	e021      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	ee07 3a90 	vmov	s15, r3
 8007040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007044:	eddf 6a25 	vldr	s13, [pc, #148]	; 80070dc <HAL_RCC_GetSysClockFreq+0x2dc>
 8007048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704c:	4b1d      	ldr	r3, [pc, #116]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007054:	ee07 3a90 	vmov	s15, r3
 8007058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007060:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80070d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007078:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800707c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800707e:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	0a5b      	lsrs	r3, r3, #9
 8007084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007088:	3301      	adds	r3, #1
 800708a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007096:	edd7 6a07 	vldr	s13, [r7, #28]
 800709a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800709e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a2:	ee17 3a90 	vmov	r3, s15
 80070a6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80070a8:	e005      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61bb      	str	r3, [r7, #24]
    break;
 80070ae:	e002      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80070b0:	4b06      	ldr	r3, [pc, #24]	; (80070cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80070b2:	61bb      	str	r3, [r7, #24]
    break;
 80070b4:	bf00      	nop
  }

  return sysclockfreq;
 80070b6:	69bb      	ldr	r3, [r7, #24]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3724      	adds	r7, #36	; 0x24
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	58024400 	.word	0x58024400
 80070c8:	03d09000 	.word	0x03d09000
 80070cc:	003d0900 	.word	0x003d0900
 80070d0:	017d7840 	.word	0x017d7840
 80070d4:	46000000 	.word	0x46000000
 80070d8:	4c742400 	.word	0x4c742400
 80070dc:	4a742400 	.word	0x4a742400
 80070e0:	4bbebc20 	.word	0x4bbebc20

080070e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070ea:	f7ff fe89 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 80070ee:	4601      	mov	r1, r0
 80070f0:	4b10      	ldr	r3, [pc, #64]	; (8007134 <HAL_RCC_GetHCLKFreq+0x50>)
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	0a1b      	lsrs	r3, r3, #8
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	4a0f      	ldr	r2, [pc, #60]	; (8007138 <HAL_RCC_GetHCLKFreq+0x54>)
 80070fc:	5cd3      	ldrb	r3, [r2, r3]
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	fa21 f303 	lsr.w	r3, r1, r3
 8007106:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007108:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <HAL_RCC_GetHCLKFreq+0x50>)
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	4a09      	ldr	r2, [pc, #36]	; (8007138 <HAL_RCC_GetHCLKFreq+0x54>)
 8007112:	5cd3      	ldrb	r3, [r2, r3]
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	4a07      	ldr	r2, [pc, #28]	; (800713c <HAL_RCC_GetHCLKFreq+0x58>)
 8007120:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007122:	4a07      	ldr	r2, [pc, #28]	; (8007140 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007128:	4b04      	ldr	r3, [pc, #16]	; (800713c <HAL_RCC_GetHCLKFreq+0x58>)
 800712a:	681b      	ldr	r3, [r3, #0]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	58024400 	.word	0x58024400
 8007138:	0800cb68 	.word	0x0800cb68
 800713c:	20000008 	.word	0x20000008
 8007140:	20000004 	.word	0x20000004

08007144 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800714c:	2300      	movs	r3, #0
 800714e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007150:	2300      	movs	r3, #0
 8007152:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d03d      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007168:	d013      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800716a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716e:	d802      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007174:	e01f      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800717a:	d013      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800717c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007180:	d01c      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007182:	e018      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007184:	4baf      	ldr	r3, [pc, #700]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	4aae      	ldr	r2, [pc, #696]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800718a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800718e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007190:	e015      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3304      	adds	r3, #4
 8007196:	2102      	movs	r1, #2
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fd33 	bl	8008c04 <RCCEx_PLL2_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071a2:	e00c      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3324      	adds	r3, #36	; 0x24
 80071a8:	2102      	movs	r1, #2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 fddc 	bl	8008d68 <RCCEx_PLL3_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071b4:	e003      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
      break;
 80071ba:	e000      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80071bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071c4:	4b9f      	ldr	r3, [pc, #636]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d0:	499c      	ldr	r1, [pc, #624]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	650b      	str	r3, [r1, #80]	; 0x50
 80071d6:	e001      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d03d      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d826      	bhi.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80071f0:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80071f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f6:	bf00      	nop
 80071f8:	0800720d 	.word	0x0800720d
 80071fc:	0800721b 	.word	0x0800721b
 8007200:	0800722d 	.word	0x0800722d
 8007204:	08007245 	.word	0x08007245
 8007208:	08007245 	.word	0x08007245
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800720c:	4b8d      	ldr	r3, [pc, #564]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	4a8c      	ldr	r2, [pc, #560]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007218:	e015      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3304      	adds	r3, #4
 800721e:	2100      	movs	r1, #0
 8007220:	4618      	mov	r0, r3
 8007222:	f001 fcef 	bl	8008c04 <RCCEx_PLL2_Config>
 8007226:	4603      	mov	r3, r0
 8007228:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800722a:	e00c      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3324      	adds	r3, #36	; 0x24
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f001 fd98 	bl	8008d68 <RCCEx_PLL3_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800723c:	e003      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	75fb      	strb	r3, [r7, #23]
      break;
 8007242:	e000      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d109      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800724c:	4b7d      	ldr	r3, [pc, #500]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800724e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007250:	f023 0207 	bic.w	r2, r3, #7
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	497a      	ldr	r1, [pc, #488]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800725a:	4313      	orrs	r3, r2
 800725c:	650b      	str	r3, [r1, #80]	; 0x50
 800725e:	e001      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800726c:	2b00      	cmp	r3, #0
 800726e:	d03e      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007274:	2b80      	cmp	r3, #128	; 0x80
 8007276:	d01c      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007278:	2b80      	cmp	r3, #128	; 0x80
 800727a:	d804      	bhi.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d00d      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007284:	e01e      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007286:	2bc0      	cmp	r3, #192	; 0xc0
 8007288:	d01f      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 800728a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728e:	d01e      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007290:	e018      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007292:	4b6c      	ldr	r3, [pc, #432]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	4a6b      	ldr	r2, [pc, #428]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800729c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800729e:	e017      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3304      	adds	r3, #4
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fcac 	bl	8008c04 <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072b0:	e00e      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3324      	adds	r3, #36	; 0x24
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fd55 	bl	8008d68 <RCCEx_PLL3_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072c2:	e005      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]
      break;
 80072c8:	e002      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80072ca:	bf00      	nop
 80072cc:	e000      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80072ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80072d6:	4b5b      	ldr	r3, [pc, #364]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e2:	4958      	ldr	r1, [pc, #352]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	650b      	str	r3, [r1, #80]	; 0x50
 80072e8:	e001      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d044      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007304:	d01f      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800730a:	d805      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007314:	d00e      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007316:	e01f      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007318:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800731c:	d01f      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800731e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007322:	d01e      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007324:	e018      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007326:	4b47      	ldr	r3, [pc, #284]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	4a46      	ldr	r2, [pc, #280]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800732c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007330:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007332:	e017      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3304      	adds	r3, #4
 8007338:	2100      	movs	r1, #0
 800733a:	4618      	mov	r0, r3
 800733c:	f001 fc62 	bl	8008c04 <RCCEx_PLL2_Config>
 8007340:	4603      	mov	r3, r0
 8007342:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007344:	e00e      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3324      	adds	r3, #36	; 0x24
 800734a:	2100      	movs	r1, #0
 800734c:	4618      	mov	r0, r3
 800734e:	f001 fd0b 	bl	8008d68 <RCCEx_PLL3_Config>
 8007352:	4603      	mov	r3, r0
 8007354:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007356:	e005      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	75fb      	strb	r3, [r7, #23]
      break;
 800735c:	e002      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800736a:	4b36      	ldr	r3, [pc, #216]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800736c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007378:	4932      	ldr	r1, [pc, #200]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800737a:	4313      	orrs	r3, r2
 800737c:	658b      	str	r3, [r1, #88]	; 0x58
 800737e:	e001      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800738c:	2b00      	cmp	r3, #0
 800738e:	d044      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800739a:	d01f      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800739c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073a0:	d805      	bhi.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80073a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073aa:	d00e      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 80073ac:	e01f      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80073ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073b2:	d01f      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80073b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073b8:	d01e      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80073ba:	e018      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073bc:	4b21      	ldr	r3, [pc, #132]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	4a20      	ldr	r2, [pc, #128]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073c8:	e017      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3304      	adds	r3, #4
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 fc17 	bl	8008c04 <RCCEx_PLL2_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80073da:	e00e      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3324      	adds	r3, #36	; 0x24
 80073e0:	2100      	movs	r1, #0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f001 fcc0 	bl	8008d68 <RCCEx_PLL3_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073ec:	e005      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
      break;
 80073f2:	e002      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80073f4:	bf00      	nop
 80073f6:	e000      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80073f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007400:	4b10      	ldr	r3, [pc, #64]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007404:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800740e:	490d      	ldr	r1, [pc, #52]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007410:	4313      	orrs	r3, r2
 8007412:	658b      	str	r3, [r1, #88]	; 0x58
 8007414:	e001      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d035      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742a:	2b10      	cmp	r3, #16
 800742c:	d00c      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800742e:	2b10      	cmp	r3, #16
 8007430:	d802      	bhi.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01b      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007436:	e017      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007438:	2b20      	cmp	r3, #32
 800743a:	d00c      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800743c:	2b30      	cmp	r3, #48	; 0x30
 800743e:	d018      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007440:	e012      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007448:	4baf      	ldr	r3, [pc, #700]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4aae      	ldr	r2, [pc, #696]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800744e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007454:	e00e      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3304      	adds	r3, #4
 800745a:	2102      	movs	r1, #2
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fbd1 	bl	8008c04 <RCCEx_PLL2_Config>
 8007462:	4603      	mov	r3, r0
 8007464:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007466:	e005      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	75fb      	strb	r3, [r7, #23]
      break;
 800746c:	e002      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800746e:	bf00      	nop
 8007470:	e000      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800747a:	4ba3      	ldr	r3, [pc, #652]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800747c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800747e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007486:	49a0      	ldr	r1, [pc, #640]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007488:	4313      	orrs	r3, r2
 800748a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800748c:	e001      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d042      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a6:	d01f      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80074a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ac:	d805      	bhi.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b6:	d00e      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80074b8:	e01f      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80074ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074be:	d01f      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80074c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c4:	d01e      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80074c6:	e018      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c8:	4b8f      	ldr	r3, [pc, #572]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a8e      	ldr	r2, [pc, #568]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074d4:	e017      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	2100      	movs	r1, #0
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 fb91 	bl	8008c04 <RCCEx_PLL2_Config>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074e6:	e00e      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3324      	adds	r3, #36	; 0x24
 80074ec:	2100      	movs	r1, #0
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 fc3a 	bl	8008d68 <RCCEx_PLL3_Config>
 80074f4:	4603      	mov	r3, r0
 80074f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074f8:	e005      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	75fb      	strb	r3, [r7, #23]
      break;
 80074fe:	e002      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007500:	bf00      	nop
 8007502:	e000      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800750c:	4b7e      	ldr	r3, [pc, #504]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800750e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007510:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007518:	497b      	ldr	r1, [pc, #492]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800751a:	4313      	orrs	r3, r2
 800751c:	650b      	str	r3, [r1, #80]	; 0x50
 800751e:	e001      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d042      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007538:	d01b      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800753a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800753e:	d805      	bhi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d022      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007548:	d00a      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800754a:	e01b      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800754c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007550:	d01d      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007556:	d01c      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007558:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800755c:	d01b      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800755e:	e011      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	2101      	movs	r1, #1
 8007566:	4618      	mov	r0, r3
 8007568:	f001 fb4c 	bl	8008c04 <RCCEx_PLL2_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007570:	e012      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3324      	adds	r3, #36	; 0x24
 8007576:	2101      	movs	r1, #1
 8007578:	4618      	mov	r0, r3
 800757a:	f001 fbf5 	bl	8008d68 <RCCEx_PLL3_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007582:	e009      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	75fb      	strb	r3, [r7, #23]
      break;
 8007588:	e006      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800758a:	bf00      	nop
 800758c:	e004      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d109      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800759e:	4b5a      	ldr	r3, [pc, #360]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075aa:	4957      	ldr	r1, [pc, #348]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	650b      	str	r3, [r1, #80]	; 0x50
 80075b0:	e001      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d044      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075cc:	d01b      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80075ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d2:	d805      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d022      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80075d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075dc:	d00a      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80075de:	e01b      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80075e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e4:	d01d      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80075e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ea:	d01c      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80075ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075f0:	d01b      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075f2:	e011      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	2101      	movs	r1, #1
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fb02 	bl	8008c04 <RCCEx_PLL2_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007604:	e012      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3324      	adds	r3, #36	; 0x24
 800760a:	2101      	movs	r1, #1
 800760c:	4618      	mov	r0, r3
 800760e:	f001 fbab 	bl	8008d68 <RCCEx_PLL3_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007616:	e009      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	75fb      	strb	r3, [r7, #23]
      break;
 800761c:	e006      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800761e:	bf00      	nop
 8007620:	e004      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800762a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007632:	4b35      	ldr	r3, [pc, #212]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007636:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007640:	4931      	ldr	r1, [pc, #196]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007642:	4313      	orrs	r3, r2
 8007644:	658b      	str	r3, [r1, #88]	; 0x58
 8007646:	e001      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d02d      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800765c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007660:	d005      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007666:	d009      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d013      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800766c:	e00f      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800766e:	4b26      	ldr	r3, [pc, #152]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	4a25      	ldr	r2, [pc, #148]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007678:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800767a:	e00c      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	2101      	movs	r1, #1
 8007682:	4618      	mov	r0, r3
 8007684:	f001 fabe 	bl	8008c04 <RCCEx_PLL2_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800768c:	e003      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	75fb      	strb	r3, [r7, #23]
      break;
 8007692:	e000      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d109      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800769c:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800769e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a8:	4917      	ldr	r1, [pc, #92]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	650b      	str	r3, [r1, #80]	; 0x50
 80076ae:	e001      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d035      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d81b      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	0800770d 	.word	0x0800770d
 80076d4:	080076e1 	.word	0x080076e1
 80076d8:	080076ef 	.word	0x080076ef
 80076dc:	0800770d 	.word	0x0800770d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	4a08      	ldr	r2, [pc, #32]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076ec:	e00f      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3304      	adds	r3, #4
 80076f2:	2102      	movs	r1, #2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f001 fa85 	bl	8008c04 <RCCEx_PLL2_Config>
 80076fa:	4603      	mov	r3, r0
 80076fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076fe:	e006      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	e003      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007706:	bf00      	nop
 8007708:	58024400 	.word	0x58024400
      break;
 800770c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d109      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007714:	4bba      	ldr	r3, [pc, #744]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007718:	f023 0203 	bic.w	r2, r3, #3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007720:	49b7      	ldr	r1, [pc, #732]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007722:	4313      	orrs	r3, r2
 8007724:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007726:	e001      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 8086 	beq.w	8007846 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800773a:	4bb2      	ldr	r3, [pc, #712]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4ab1      	ldr	r2, [pc, #708]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007744:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007746:	f7fa fa93 	bl	8001c70 <HAL_GetTick>
 800774a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800774c:	e009      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800774e:	f7fa fa8f 	bl	8001c70 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b64      	cmp	r3, #100	; 0x64
 800775a:	d902      	bls.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	75fb      	strb	r3, [r7, #23]
        break;
 8007760:	e005      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007762:	4ba8      	ldr	r3, [pc, #672]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0ef      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d166      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007774:	4ba2      	ldr	r3, [pc, #648]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800777e:	4053      	eors	r3, r2
 8007780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007784:	2b00      	cmp	r3, #0
 8007786:	d013      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007788:	4b9d      	ldr	r3, [pc, #628]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800778a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007790:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007792:	4b9b      	ldr	r3, [pc, #620]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007796:	4a9a      	ldr	r2, [pc, #616]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800779c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800779e:	4b98      	ldr	r3, [pc, #608]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a2:	4a97      	ldr	r2, [pc, #604]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077aa:	4a95      	ldr	r2, [pc, #596]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ba:	d115      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077bc:	f7fa fa58 	bl	8001c70 <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077c2:	e00b      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077c4:	f7fa fa54 	bl	8001c70 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d902      	bls.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	75fb      	strb	r3, [r7, #23]
            break;
 80077da:	e005      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077dc:	4b88      	ldr	r3, [pc, #544]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0ed      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d126      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077fc:	d10d      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80077fe:	4b80      	ldr	r3, [pc, #512]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800780c:	0919      	lsrs	r1, r3, #4
 800780e:	4b7e      	ldr	r3, [pc, #504]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007810:	400b      	ands	r3, r1
 8007812:	497b      	ldr	r1, [pc, #492]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007814:	4313      	orrs	r3, r2
 8007816:	610b      	str	r3, [r1, #16]
 8007818:	e005      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800781a:	4b79      	ldr	r3, [pc, #484]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	4a78      	ldr	r2, [pc, #480]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007820:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007824:	6113      	str	r3, [r2, #16]
 8007826:	4b76      	ldr	r3, [pc, #472]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007834:	4972      	ldr	r1, [pc, #456]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007836:	4313      	orrs	r3, r2
 8007838:	670b      	str	r3, [r1, #112]	; 0x70
 800783a:	e004      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	75bb      	strb	r3, [r7, #22]
 8007840:	e001      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d07d      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007856:	2b28      	cmp	r3, #40	; 0x28
 8007858:	d866      	bhi.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	0800792f 	.word	0x0800792f
 8007864:	08007929 	.word	0x08007929
 8007868:	08007929 	.word	0x08007929
 800786c:	08007929 	.word	0x08007929
 8007870:	08007929 	.word	0x08007929
 8007874:	08007929 	.word	0x08007929
 8007878:	08007929 	.word	0x08007929
 800787c:	08007929 	.word	0x08007929
 8007880:	08007905 	.word	0x08007905
 8007884:	08007929 	.word	0x08007929
 8007888:	08007929 	.word	0x08007929
 800788c:	08007929 	.word	0x08007929
 8007890:	08007929 	.word	0x08007929
 8007894:	08007929 	.word	0x08007929
 8007898:	08007929 	.word	0x08007929
 800789c:	08007929 	.word	0x08007929
 80078a0:	08007917 	.word	0x08007917
 80078a4:	08007929 	.word	0x08007929
 80078a8:	08007929 	.word	0x08007929
 80078ac:	08007929 	.word	0x08007929
 80078b0:	08007929 	.word	0x08007929
 80078b4:	08007929 	.word	0x08007929
 80078b8:	08007929 	.word	0x08007929
 80078bc:	08007929 	.word	0x08007929
 80078c0:	0800792f 	.word	0x0800792f
 80078c4:	08007929 	.word	0x08007929
 80078c8:	08007929 	.word	0x08007929
 80078cc:	08007929 	.word	0x08007929
 80078d0:	08007929 	.word	0x08007929
 80078d4:	08007929 	.word	0x08007929
 80078d8:	08007929 	.word	0x08007929
 80078dc:	08007929 	.word	0x08007929
 80078e0:	0800792f 	.word	0x0800792f
 80078e4:	08007929 	.word	0x08007929
 80078e8:	08007929 	.word	0x08007929
 80078ec:	08007929 	.word	0x08007929
 80078f0:	08007929 	.word	0x08007929
 80078f4:	08007929 	.word	0x08007929
 80078f8:	08007929 	.word	0x08007929
 80078fc:	08007929 	.word	0x08007929
 8007900:	0800792f 	.word	0x0800792f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3304      	adds	r3, #4
 8007908:	2101      	movs	r1, #1
 800790a:	4618      	mov	r0, r3
 800790c:	f001 f97a 	bl	8008c04 <RCCEx_PLL2_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007914:	e00c      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3324      	adds	r3, #36	; 0x24
 800791a:	2101      	movs	r1, #1
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fa23 	bl	8008d68 <RCCEx_PLL3_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007926:	e003      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	75fb      	strb	r3, [r7, #23]
      break;
 800792c:	e000      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800792e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d109      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007936:	4b32      	ldr	r3, [pc, #200]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007942:	492f      	ldr	r1, [pc, #188]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007944:	4313      	orrs	r3, r2
 8007946:	654b      	str	r3, [r1, #84]	; 0x54
 8007948:	e001      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d037      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795e:	2b05      	cmp	r3, #5
 8007960:	d820      	bhi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007962:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007968:	080079ab 	.word	0x080079ab
 800796c:	08007981 	.word	0x08007981
 8007970:	08007993 	.word	0x08007993
 8007974:	080079ab 	.word	0x080079ab
 8007978:	080079ab 	.word	0x080079ab
 800797c:	080079ab 	.word	0x080079ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	3304      	adds	r3, #4
 8007984:	2101      	movs	r1, #1
 8007986:	4618      	mov	r0, r3
 8007988:	f001 f93c 	bl	8008c04 <RCCEx_PLL2_Config>
 800798c:	4603      	mov	r3, r0
 800798e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007990:	e00c      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3324      	adds	r3, #36	; 0x24
 8007996:	2101      	movs	r1, #1
 8007998:	4618      	mov	r0, r3
 800799a:	f001 f9e5 	bl	8008d68 <RCCEx_PLL3_Config>
 800799e:	4603      	mov	r3, r0
 80079a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079a2:	e003      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
      break;
 80079a8:	e000      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80079aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079b2:	4b13      	ldr	r3, [pc, #76]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b6:	f023 0207 	bic.w	r2, r3, #7
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079be:	4910      	ldr	r1, [pc, #64]	; (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	654b      	str	r3, [r1, #84]	; 0x54
 80079c4:	e001      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d040      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079dc:	2b05      	cmp	r3, #5
 80079de:	d827      	bhi.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80079e0:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	08007a37 	.word	0x08007a37
 80079ec:	08007a0d 	.word	0x08007a0d
 80079f0:	08007a1f 	.word	0x08007a1f
 80079f4:	08007a37 	.word	0x08007a37
 80079f8:	08007a37 	.word	0x08007a37
 80079fc:	08007a37 	.word	0x08007a37
 8007a00:	58024400 	.word	0x58024400
 8007a04:	58024800 	.word	0x58024800
 8007a08:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	2101      	movs	r1, #1
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 f8f6 	bl	8008c04 <RCCEx_PLL2_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a1c:	e00c      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3324      	adds	r3, #36	; 0x24
 8007a22:	2101      	movs	r1, #1
 8007a24:	4618      	mov	r0, r3
 8007a26:	f001 f99f 	bl	8008d68 <RCCEx_PLL3_Config>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a2e:	e003      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
      break;
 8007a34:	e000      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a3e:	4bb2      	ldr	r3, [pc, #712]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	f023 0207 	bic.w	r2, r3, #7
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4c:	49ae      	ldr	r1, [pc, #696]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	658b      	str	r3, [r1, #88]	; 0x58
 8007a52:	e001      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0320 	and.w	r3, r3, #32
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d044      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a6e:	d01b      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a74:	d805      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d022      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a7e:	d00a      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007a80:	e01b      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a86:	d01d      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a8c:	d01c      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007a8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a92:	d01b      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007a94:	e011      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 f8b1 	bl	8008c04 <RCCEx_PLL2_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007aa6:	e012      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3324      	adds	r3, #36	; 0x24
 8007aac:	2102      	movs	r1, #2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 f95a 	bl	8008d68 <RCCEx_PLL3_Config>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ab8:	e009      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	75fb      	strb	r3, [r7, #23]
      break;
 8007abe:	e006      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ac0:	bf00      	nop
 8007ac2:	e004      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ac4:	bf00      	nop
 8007ac6:	e002      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ac8:	bf00      	nop
 8007aca:	e000      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ad4:	4b8c      	ldr	r3, [pc, #560]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae2:	4989      	ldr	r1, [pc, #548]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	654b      	str	r3, [r1, #84]	; 0x54
 8007ae8:	e001      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d044      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b04:	d01b      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b0a:	d805      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d022      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b14:	d00a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007b16:	e01b      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b1c:	d01d      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007b1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b22:	d01c      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007b24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b28:	d01b      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007b2a:	e011      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 f866 	bl	8008c04 <RCCEx_PLL2_Config>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b3c:	e012      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3324      	adds	r3, #36	; 0x24
 8007b42:	2102      	movs	r1, #2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 f90f 	bl	8008d68 <RCCEx_PLL3_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b4e:	e009      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	75fb      	strb	r3, [r7, #23]
      break;
 8007b54:	e006      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b56:	bf00      	nop
 8007b58:	e004      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b5a:	bf00      	nop
 8007b5c:	e002      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b5e:	bf00      	nop
 8007b60:	e000      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b6a:	4b67      	ldr	r3, [pc, #412]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b78:	4963      	ldr	r1, [pc, #396]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	658b      	str	r3, [r1, #88]	; 0x58
 8007b7e:	e001      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d044      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b9a:	d01b      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ba0:	d805      	bhi.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d022      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007bac:	e01b      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb2:	d01d      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007bb4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007bb8:	d01c      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007bba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bbe:	d01b      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007bc0:	e011      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 f81b 	bl	8008c04 <RCCEx_PLL2_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007bd2:	e012      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	2102      	movs	r1, #2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 f8c4 	bl	8008d68 <RCCEx_PLL3_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007be4:	e009      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bea:	e006      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007bec:	bf00      	nop
 8007bee:	e004      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007bf0:	bf00      	nop
 8007bf2:	e002      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007bf4:	bf00      	nop
 8007bf6:	e000      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c00:	4b41      	ldr	r3, [pc, #260]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c0e:	493e      	ldr	r1, [pc, #248]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	658b      	str	r3, [r1, #88]	; 0x58
 8007c14:	e001      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d01a      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c30:	d10a      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3324      	adds	r3, #36	; 0x24
 8007c36:	2102      	movs	r1, #2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 f895 	bl	8008d68 <RCCEx_PLL3_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c48:	4b2f      	ldr	r3, [pc, #188]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c56:	492c      	ldr	r1, [pc, #176]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0310 	and.w	r3, r3, #16
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01a      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	d10a      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3324      	adds	r3, #36	; 0x24
 8007c78:	2102      	movs	r1, #2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f874 	bl	8008d68 <RCCEx_PLL3_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c8a:	4b1f      	ldr	r3, [pc, #124]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c98:	491b      	ldr	r1, [pc, #108]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d032      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb4:	d00d      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007cb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cba:	d016      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d111      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 ff9c 	bl	8008c04 <RCCEx_PLL2_Config>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007cd0:	e00c      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3324      	adds	r3, #36	; 0x24
 8007cd6:	2102      	movs	r1, #2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 f845 	bl	8008d68 <RCCEx_PLL3_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ce2:	e003      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce8:	e000      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10c      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d00:	4901      	ldr	r1, [pc, #4]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	658b      	str	r3, [r1, #88]	; 0x58
 8007d06:	e003      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007d08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d02f      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d26:	d00c      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007d28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d2c:	d015      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d32:	d10f      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d34:	4b79      	ldr	r3, [pc, #484]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	4a78      	ldr	r2, [pc, #480]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d40:	e00c      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3324      	adds	r3, #36	; 0x24
 8007d46:	2101      	movs	r1, #1
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f001 f80d 	bl	8008d68 <RCCEx_PLL3_Config>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d52:	e003      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	75fb      	strb	r3, [r7, #23]
      break;
 8007d58:	e000      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d62:	4b6e      	ldr	r3, [pc, #440]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d70:	496a      	ldr	r1, [pc, #424]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	654b      	str	r3, [r1, #84]	; 0x54
 8007d76:	e001      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d029      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d94:	d007      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007d96:	e00f      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d98:	4b60      	ldr	r3, [pc, #384]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	4a5f      	ldr	r2, [pc, #380]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007da4:	e00b      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3304      	adds	r3, #4
 8007daa:	2102      	movs	r1, #2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 ff29 	bl	8008c04 <RCCEx_PLL2_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007db6:	e002      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	75fb      	strb	r3, [r7, #23]
      break;
 8007dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007dc4:	4b55      	ldr	r3, [pc, #340]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd0:	4952      	ldr	r1, [pc, #328]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007dd6:	e001      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3324      	adds	r3, #36	; 0x24
 8007dec:	2102      	movs	r1, #2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 ffba 	bl	8008d68 <RCCEx_PLL3_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d02f      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e12:	d00c      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e18:	d802      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d011      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007e1e:	e00d      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e24:	d00f      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e2a:	d00e      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007e2c:	e006      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e2e:	4b3b      	ldr	r3, [pc, #236]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	4a3a      	ldr	r2, [pc, #232]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007e3a:	e007      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e40:	e004      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e42:	bf00      	nop
 8007e44:	e002      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e52:	4b32      	ldr	r3, [pc, #200]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e5e:	492f      	ldr	r1, [pc, #188]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	654b      	str	r3, [r1, #84]	; 0x54
 8007e64:	e001      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d008      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e76:	4b29      	ldr	r3, [pc, #164]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e82:	4926      	ldr	r1, [pc, #152]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d009      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e94:	4b21      	ldr	r3, [pc, #132]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ea2:	491e      	ldr	r1, [pc, #120]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007eb4:	4b19      	ldr	r3, [pc, #100]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec0:	4916      	ldr	r1, [pc, #88]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00d      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	4a11      	ldr	r2, [pc, #68]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007edc:	6113      	str	r3, [r2, #16]
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ee0:	691a      	ldr	r2, [r3, #16]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007ee8:	490c      	ldr	r1, [pc, #48]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	da08      	bge.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f02:	4906      	ldr	r1, [pc, #24]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007f08:	7dbb      	ldrb	r3, [r7, #22]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e000      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	58024400 	.word	0x58024400

08007f20 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b090      	sub	sp, #64	; 0x40
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f2e:	d150      	bne.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007f30:	4ba1      	ldr	r3, [pc, #644]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d844      	bhi.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f5d 	.word	0x08007f5d
 8007f4c:	08007f6d 	.word	0x08007f6d
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08007fc5 	.word	0x08007fc5
 8007f58:	08007f8d 	.word	0x08007f8d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fd03 	bl	800896c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6a:	e241      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f6c:	f107 0318 	add.w	r3, r7, #24
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fa63 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f7a:	e239      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f7c:	f107 030c 	add.w	r3, r7, #12
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fba7 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f8a:	e231      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f8c:	4b8a      	ldr	r3, [pc, #552]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f9c:	4b87      	ldr	r3, [pc, #540]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007fa0:	e226      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fa8:	d102      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007faa:	4b85      	ldr	r3, [pc, #532]	; (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fae:	e21f      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb6:	d102      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007fb8:	4b82      	ldr	r3, [pc, #520]	; (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fbc:	e218      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fc2:	e215      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007fc4:	4b80      	ldr	r3, [pc, #512]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fc8:	e212      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fce:	bf00      	nop
 8007fd0:	e20e      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd8:	d14f      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007fda:	4b77      	ldr	r3, [pc, #476]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fde:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007fe2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	2b80      	cmp	r3, #128	; 0x80
 8007fe8:	d01c      	beq.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007fea:	2b80      	cmp	r3, #128	; 0x80
 8007fec:	d804      	bhi.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d008      	beq.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007ff2:	2b40      	cmp	r3, #64	; 0x40
 8007ff4:	d00e      	beq.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007ff6:	e03c      	b.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007ff8:	2bc0      	cmp	r3, #192	; 0xc0
 8007ffa:	d037      	beq.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008000:	d018      	beq.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008002:	e036      	b.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fcaf 	bl	800896c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008012:	e1ed      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008014:	f107 0318 	add.w	r3, r7, #24
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fa0f 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008022:	e1e5      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008024:	f107 030c 	add.w	r3, r7, #12
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fb53 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008032:	e1dd      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008034:	4b60      	ldr	r3, [pc, #384]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800803c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800803e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008040:	2b00      	cmp	r3, #0
 8008042:	d102      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008044:	4b5d      	ldr	r3, [pc, #372]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008048:	e1d2      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008050:	d102      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008052:	4b5b      	ldr	r3, [pc, #364]	; (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008056:	e1cb      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805e:	d102      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008060:	4b58      	ldr	r3, [pc, #352]	; (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008064:	e1c4      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800806a:	e1c1      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800806c:	4b56      	ldr	r3, [pc, #344]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008070:	e1be      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008076:	bf00      	nop
 8008078:	e1ba      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008080:	d153      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008082:	4b4d      	ldr	r3, [pc, #308]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008086:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800808a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008092:	d01f      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008098:	d805      	bhi.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800809e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080a2:	d00f      	beq.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80080a4:	e03d      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80080a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080aa:	d037      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80080ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080b0:	d018      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80080b2:	e036      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fc57 	bl	800896c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c2:	e195      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c4:	f107 0318 	add.w	r3, r7, #24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f9b7 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d2:	e18d      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d4:	f107 030c 	add.w	r3, r7, #12
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fafb 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e2:	e185      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080e4:	4b34      	ldr	r3, [pc, #208]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80080f4:	4b31      	ldr	r3, [pc, #196]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80080f8:	e17a      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80080fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008100:	d102      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008102:	4b2f      	ldr	r3, [pc, #188]	; (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008106:	e173      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810e:	d102      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008110:	4b2c      	ldr	r3, [pc, #176]	; (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008114:	e16c      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800811a:	e169      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800811c:	4b2a      	ldr	r3, [pc, #168]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008120:	e166      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008126:	bf00      	nop
 8008128:	e162      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008130:	d15d      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008132:	4b21      	ldr	r3, [pc, #132]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008136:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800813a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008142:	d01f      	beq.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008148:	d805      	bhi.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800814e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008152:	d00f      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008154:	e047      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008156:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800815a:	d041      	beq.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800815c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008160:	d018      	beq.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008162:	e040      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fbff 	bl	800896c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008172:	e13d      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008174:	f107 0318 	add.w	r3, r7, #24
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f95f 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008182:	e135      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008184:	f107 030c 	add.w	r3, r7, #12
 8008188:	4618      	mov	r0, r3
 800818a:	f000 faa3 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008192:	e12d      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008194:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800819c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800819e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80081a8:	e122      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081b0:	d10c      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80081b2:	4b03      	ldr	r3, [pc, #12]	; (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b6:	e11b      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80081b8:	58024400 	.word	0x58024400
 80081bc:	03d09000 	.word	0x03d09000
 80081c0:	003d0900 	.word	0x003d0900
 80081c4:	017d7840 	.word	0x017d7840
 80081c8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d2:	d102      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80081d4:	4b89      	ldr	r3, [pc, #548]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d8:	e10a      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081de:	e107      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081e0:	4b87      	ldr	r3, [pc, #540]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081e4:	e104      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ea:	bf00      	nop
 80081ec:	e100      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f4:	d153      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80081f6:	4b83      	ldr	r3, [pc, #524]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80081f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80081fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008206:	d01f      	beq.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800820c:	d805      	bhi.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008216:	d00f      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008218:	e03d      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800821a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800821e:	d037      	beq.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008224:	d018      	beq.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008226:	e036      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fb9d 	bl	800896c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008236:	e0db      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008238:	f107 0318 	add.w	r3, r7, #24
 800823c:	4618      	mov	r0, r3
 800823e:	f000 f8fd 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008246:	e0d3      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008248:	f107 030c 	add.w	r3, r7, #12
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fa41 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008256:	e0cb      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008258:	4b6a      	ldr	r3, [pc, #424]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800825a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008260:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008268:	4b67      	ldr	r3, [pc, #412]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800826c:	e0c0      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008274:	d102      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008276:	4b65      	ldr	r3, [pc, #404]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800827a:	e0b9      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008282:	d102      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008284:	4b5d      	ldr	r3, [pc, #372]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008288:	e0b2      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828e:	e0af      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008290:	4b5b      	ldr	r3, [pc, #364]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008294:	e0ac      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800829a:	bf00      	nop
 800829c:	e0a8      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082a4:	d13d      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80082a6:	4b57      	ldr	r3, [pc, #348]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80082a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b6:	d00c      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80082b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082bc:	d011      	beq.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d12b      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c2:	f107 0318 	add.w	r3, r7, #24
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f8b8 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d0:	e08e      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082d2:	f107 030c 	add.w	r3, r7, #12
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f9fc 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082e0:	e086      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082e2:	4b48      	ldr	r3, [pc, #288]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082ea:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80082ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80082f2:	4b45      	ldr	r3, [pc, #276]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80082f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80082f6:	e07b      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082fe:	d102      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8008300:	4b42      	ldr	r3, [pc, #264]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008304:	e074      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800830c:	d102      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800830e:	4b3b      	ldr	r3, [pc, #236]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008312:	e06d      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008314:	2300      	movs	r3, #0
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008318:	e06a      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800831e:	bf00      	nop
 8008320:	e066      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008328:	d11f      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800832a:	4b36      	ldr	r3, [pc, #216]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800832c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008332:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800833a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833e:	d008      	beq.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008340:	e00f      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fb10 	bl	800896c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008350:	e04e      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008352:	f107 0318 	add.w	r3, r7, #24
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f870 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008360:	e046      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008366:	bf00      	nop
 8008368:	e042      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008370:	d13c      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008372:	4b24      	ldr	r3, [pc, #144]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008376:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800837a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008382:	d01e      	beq.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008388:	d805      	bhi.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00d      	beq.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800838e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008392:	d00e      	beq.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008394:	e026      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839a:	d01d      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800839c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083a0:	d01d      	beq.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80083a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083a6:	d014      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80083a8:	e01c      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80083aa:	f000 f831 	bl	8008410 <HAL_RCCEx_GetD3PCLK1Freq>
 80083ae:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80083b0:	e01e      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b2:	f107 0318 	add.w	r3, r7, #24
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 f840 	bl	800843c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c0:	e016      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083c2:	f107 030c 	add.w	r3, r7, #12
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f984 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d0:	e00e      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80083d2:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80083d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d6:	e00b      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80083d8:	4b0c      	ldr	r3, [pc, #48]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083dc:	e008      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80083de:	4b07      	ldr	r3, [pc, #28]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e2:	e005      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e8:	bf00      	nop
 80083ea:	e001      	b.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3740      	adds	r7, #64	; 0x40
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	017d7840 	.word	0x017d7840
 8008400:	00bb8000 	.word	0x00bb8000
 8008404:	58024400 	.word	0x58024400
 8008408:	03d09000 	.word	0x03d09000
 800840c:	003d0900 	.word	0x003d0900

08008410 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008414:	f7fe fe66 	bl	80070e4 <HAL_RCC_GetHCLKFreq>
 8008418:	4601      	mov	r1, r0
 800841a:	4b06      	ldr	r3, [pc, #24]	; (8008434 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	091b      	lsrs	r3, r3, #4
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	4a04      	ldr	r2, [pc, #16]	; (8008438 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008430:	4618      	mov	r0, r3
 8008432:	bd80      	pop	{r7, pc}
 8008434:	58024400 	.word	0x58024400
 8008438:	0800cb68 	.word	0x0800cb68

0800843c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800843c:	b480      	push	{r7}
 800843e:	b089      	sub	sp, #36	; 0x24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008444:	4b9d      	ldr	r3, [pc, #628]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800844e:	4b9b      	ldr	r3, [pc, #620]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008452:	0b1b      	lsrs	r3, r3, #12
 8008454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008458:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800845a:	4b98      	ldr	r3, [pc, #608]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	091b      	lsrs	r3, r3, #4
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008466:	4b95      	ldr	r3, [pc, #596]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846a:	08db      	lsrs	r3, r3, #3
 800846c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	fb02 f303 	mul.w	r3, r2, r3
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 810a 	beq.w	800869e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d05a      	beq.n	8008546 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008490:	2b01      	cmp	r3, #1
 8008492:	d302      	bcc.n	800849a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008494:	2b02      	cmp	r3, #2
 8008496:	d078      	beq.n	800858a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008498:	e099      	b.n	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800849a:	4b88      	ldr	r3, [pc, #544]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d02d      	beq.n	8008502 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084a6:	4b85      	ldr	r3, [pc, #532]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	08db      	lsrs	r3, r3, #3
 80084ac:	f003 0303 	and.w	r3, r3, #3
 80084b0:	4a83      	ldr	r2, [pc, #524]	; (80086c0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80084b2:	fa22 f303 	lsr.w	r3, r2, r3
 80084b6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	ee07 3a90 	vmov	s15, r3
 80084c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d0:	4b7a      	ldr	r3, [pc, #488]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80084e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008500:	e087      	b.n	8008612 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80086c8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008514:	4b69      	ldr	r3, [pc, #420]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851c:	ee07 3a90 	vmov	s15, r3
 8008520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008524:	ed97 6a03 	vldr	s12, [r7, #12]
 8008528:	eddf 5a66 	vldr	s11, [pc, #408]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800852c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008540:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008544:	e065      	b.n	8008612 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008550:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80086cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008558:	4b58      	ldr	r3, [pc, #352]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008560:	ee07 3a90 	vmov	s15, r3
 8008564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008568:	ed97 6a03 	vldr	s12, [r7, #12]
 800856c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800857c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008584:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008588:	e043      	b.n	8008612 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008594:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80086d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859c:	4b47      	ldr	r3, [pc, #284]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085cc:	e021      	b.n	8008612 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	ee07 3a90 	vmov	s15, r3
 80085d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80086cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80085dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e0:	4b36      	ldr	r3, [pc, #216]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e8:	ee07 3a90 	vmov	s15, r3
 80085ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008610:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008612:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008616:	0a5b      	lsrs	r3, r3, #9
 8008618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008628:	ee37 7a87 	vadd.f32	s14, s15, s14
 800862c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008638:	ee17 2a90 	vmov	r2, s15
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008640:	4b1e      	ldr	r3, [pc, #120]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	0c1b      	lsrs	r3, r3, #16
 8008646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800865a:	edd7 6a07 	vldr	s13, [r7, #28]
 800865e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008666:	ee17 2a90 	vmov	r2, s15
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800866e:	4b13      	ldr	r3, [pc, #76]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	0e1b      	lsrs	r3, r3, #24
 8008674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008678:	ee07 3a90 	vmov	s15, r3
 800867c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008684:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008688:	edd7 6a07 	vldr	s13, [r7, #28]
 800868c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008694:	ee17 2a90 	vmov	r2, s15
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800869c:	e008      	b.n	80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	609a      	str	r2, [r3, #8]
}
 80086b0:	bf00      	nop
 80086b2:	3724      	adds	r7, #36	; 0x24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	58024400 	.word	0x58024400
 80086c0:	03d09000 	.word	0x03d09000
 80086c4:	46000000 	.word	0x46000000
 80086c8:	4c742400 	.word	0x4c742400
 80086cc:	4a742400 	.word	0x4a742400
 80086d0:	4bbebc20 	.word	0x4bbebc20

080086d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b089      	sub	sp, #36	; 0x24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086dc:	4b9d      	ldr	r3, [pc, #628]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80086e6:	4b9b      	ldr	r3, [pc, #620]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	0d1b      	lsrs	r3, r3, #20
 80086ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80086f2:	4b98      	ldr	r3, [pc, #608]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80086fe:	4b95      	ldr	r3, [pc, #596]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	08db      	lsrs	r3, r3, #3
 8008704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	fb02 f303 	mul.w	r3, r2, r3
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 810a 	beq.w	8008936 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d05a      	beq.n	80087de <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008728:	2b01      	cmp	r3, #1
 800872a:	d302      	bcc.n	8008732 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800872c:	2b02      	cmp	r3, #2
 800872e:	d078      	beq.n	8008822 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008730:	e099      	b.n	8008866 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008732:	4b88      	ldr	r3, [pc, #544]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d02d      	beq.n	800879a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800873e:	4b85      	ldr	r3, [pc, #532]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	08db      	lsrs	r3, r3, #3
 8008744:	f003 0303 	and.w	r3, r3, #3
 8008748:	4a83      	ldr	r2, [pc, #524]	; (8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800874a:	fa22 f303 	lsr.w	r3, r2, r3
 800874e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008768:	4b7a      	ldr	r3, [pc, #488]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008770:	ee07 3a90 	vmov	s15, r3
 8008774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008778:	ed97 6a03 	vldr	s12, [r7, #12]
 800877c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800895c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800878c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008794:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008798:	e087      	b.n	80088aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008960 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80087a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ac:	4b69      	ldr	r3, [pc, #420]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800895c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80087c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087dc:	e065      	b.n	80088aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	ee07 3a90 	vmov	s15, r3
 80087e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80087ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f0:	4b58      	ldr	r3, [pc, #352]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008800:	ed97 6a03 	vldr	s12, [r7, #12]
 8008804:	eddf 5a55 	vldr	s11, [pc, #340]	; 800895c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008820:	e043      	b.n	80088aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008968 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008834:	4b47      	ldr	r3, [pc, #284]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883c:	ee07 3a90 	vmov	s15, r3
 8008840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008844:	ed97 6a03 	vldr	s12, [r7, #12]
 8008848:	eddf 5a44 	vldr	s11, [pc, #272]	; 800895c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800884c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008860:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008864:	e021      	b.n	80088aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	ee07 3a90 	vmov	s15, r3
 800886c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008870:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008878:	4b36      	ldr	r3, [pc, #216]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800887a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008880:	ee07 3a90 	vmov	s15, r3
 8008884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008888:	ed97 6a03 	vldr	s12, [r7, #12]
 800888c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800895c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800889c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088a8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80088aa:	4b2a      	ldr	r3, [pc, #168]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	0a5b      	lsrs	r3, r3, #9
 80088b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d0:	ee17 2a90 	vmov	r2, s15
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80088d8:	4b1e      	ldr	r3, [pc, #120]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	0c1b      	lsrs	r3, r3, #16
 80088de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80088f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088fe:	ee17 2a90 	vmov	r2, s15
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008906:	4b13      	ldr	r3, [pc, #76]	; (8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	0e1b      	lsrs	r3, r3, #24
 800890c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008910:	ee07 3a90 	vmov	s15, r3
 8008914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800891c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008920:	edd7 6a07 	vldr	s13, [r7, #28]
 8008924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800892c:	ee17 2a90 	vmov	r2, s15
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008934:	e008      	b.n	8008948 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	609a      	str	r2, [r3, #8]
}
 8008948:	bf00      	nop
 800894a:	3724      	adds	r7, #36	; 0x24
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	58024400 	.word	0x58024400
 8008958:	03d09000 	.word	0x03d09000
 800895c:	46000000 	.word	0x46000000
 8008960:	4c742400 	.word	0x4c742400
 8008964:	4a742400 	.word	0x4a742400
 8008968:	4bbebc20 	.word	0x4bbebc20

0800896c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800896c:	b480      	push	{r7}
 800896e:	b089      	sub	sp, #36	; 0x24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008974:	4b9d      	ldr	r3, [pc, #628]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	f003 0303 	and.w	r3, r3, #3
 800897c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800897e:	4b9b      	ldr	r3, [pc, #620]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	091b      	lsrs	r3, r3, #4
 8008984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008988:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800898a:	4b98      	ldr	r3, [pc, #608]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008994:	4b95      	ldr	r3, [pc, #596]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008998:	08db      	lsrs	r3, r3, #3
 800899a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	fb02 f303 	mul.w	r3, r2, r3
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 810a 	beq.w	8008bcc <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d05a      	beq.n	8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d302      	bcc.n	80089c8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d078      	beq.n	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80089c6:	e099      	b.n	8008afc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c8:	4b88      	ldr	r3, [pc, #544]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d02d      	beq.n	8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089d4:	4b85      	ldr	r3, [pc, #532]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	08db      	lsrs	r3, r3, #3
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	4a84      	ldr	r2, [pc, #528]	; (8008bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
 80089e4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	ee07 3a90 	vmov	s15, r3
 80089ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b7b      	ldr	r3, [pc, #492]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a2e:	e087      	b.n	8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b6a      	ldr	r3, [pc, #424]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a72:	e065      	b.n	8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bfc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b59      	ldr	r3, [pc, #356]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ab6:	e043      	b.n	8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b48      	ldr	r3, [pc, #288]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008afa:	e021      	b.n	8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bfc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b37      	ldr	r3, [pc, #220]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b3e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008b40:	4b2a      	ldr	r3, [pc, #168]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b44:	0a5b      	lsrs	r3, r3, #9
 8008b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b66:	ee17 2a90 	vmov	r2, s15
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008b6e:	4b1f      	ldr	r3, [pc, #124]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b72:	0c1b      	lsrs	r3, r3, #16
 8008b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b78:	ee07 3a90 	vmov	s15, r3
 8008b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b94:	ee17 2a90 	vmov	r2, s15
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008b9c:	4b13      	ldr	r3, [pc, #76]	; (8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	0e1b      	lsrs	r3, r3, #24
 8008ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc2:	ee17 2a90 	vmov	r2, s15
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008bca:	e008      	b.n	8008bde <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	609a      	str	r2, [r3, #8]
}
 8008bde:	bf00      	nop
 8008be0:	3724      	adds	r7, #36	; 0x24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	03d09000 	.word	0x03d09000
 8008bf4:	46000000 	.word	0x46000000
 8008bf8:	4c742400 	.word	0x4c742400
 8008bfc:	4a742400 	.word	0x4a742400
 8008c00:	4bbebc20 	.word	0x4bbebc20

08008c04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c12:	4b53      	ldr	r3, [pc, #332]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	f003 0303 	and.w	r3, r3, #3
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d101      	bne.n	8008c22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e099      	b.n	8008d56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c22:	4b4f      	ldr	r3, [pc, #316]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a4e      	ldr	r2, [pc, #312]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008c28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c2e:	f7f9 f81f 	bl	8001c70 <HAL_GetTick>
 8008c32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c34:	e008      	b.n	8008c48 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c36:	f7f9 f81b 	bl	8001c70 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e086      	b.n	8008d56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c48:	4b45      	ldr	r3, [pc, #276]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1f0      	bne.n	8008c36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c54:	4b42      	ldr	r3, [pc, #264]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	031b      	lsls	r3, r3, #12
 8008c62:	493f      	ldr	r1, [pc, #252]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	628b      	str	r3, [r1, #40]	; 0x28
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	025b      	lsls	r3, r3, #9
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	041b      	lsls	r3, r3, #16
 8008c86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	061b      	lsls	r3, r3, #24
 8008c94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c98:	4931      	ldr	r1, [pc, #196]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c9e:	4b30      	ldr	r3, [pc, #192]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	492d      	ldr	r1, [pc, #180]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	f023 0220 	bic.w	r2, r3, #32
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	4928      	ldr	r1, [pc, #160]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cc2:	4b27      	ldr	r3, [pc, #156]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc6:	4a26      	ldr	r2, [pc, #152]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008cc8:	f023 0310 	bic.w	r3, r3, #16
 8008ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008cce:	4b24      	ldr	r3, [pc, #144]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008cd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cd2:	4b24      	ldr	r3, [pc, #144]	; (8008d64 <RCCEx_PLL2_Config+0x160>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	69d2      	ldr	r2, [r2, #28]
 8008cda:	00d2      	lsls	r2, r2, #3
 8008cdc:	4920      	ldr	r1, [pc, #128]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ce2:	4b1f      	ldr	r3, [pc, #124]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	4a1e      	ldr	r2, [pc, #120]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008ce8:	f043 0310 	orr.w	r3, r3, #16
 8008cec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d106      	bne.n	8008d02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	4a19      	ldr	r2, [pc, #100]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d00:	e00f      	b.n	8008d22 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d106      	bne.n	8008d16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d08:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4a14      	ldr	r2, [pc, #80]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d14:	e005      	b.n	8008d22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d16:	4b12      	ldr	r3, [pc, #72]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	4a11      	ldr	r2, [pc, #68]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008d1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d22:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a0e      	ldr	r2, [pc, #56]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008d28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d2e:	f7f8 ff9f 	bl	8001c70 <HAL_GetTick>
 8008d32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d34:	e008      	b.n	8008d48 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d36:	f7f8 ff9b 	bl	8001c70 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d901      	bls.n	8008d48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e006      	b.n	8008d56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d48:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <RCCEx_PLL2_Config+0x15c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0f0      	beq.n	8008d36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	58024400 	.word	0x58024400
 8008d64:	ffff0007 	.word	0xffff0007

08008d68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d76:	4b53      	ldr	r3, [pc, #332]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d101      	bne.n	8008d86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e099      	b.n	8008eba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d86:	4b4f      	ldr	r3, [pc, #316]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a4e      	ldr	r2, [pc, #312]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d92:	f7f8 ff6d 	bl	8001c70 <HAL_GetTick>
 8008d96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d98:	e008      	b.n	8008dac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d9a:	f7f8 ff69 	bl	8001c70 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d901      	bls.n	8008dac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e086      	b.n	8008eba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dac:	4b45      	ldr	r3, [pc, #276]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1f0      	bne.n	8008d9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008db8:	4b42      	ldr	r3, [pc, #264]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	051b      	lsls	r3, r3, #20
 8008dc6:	493f      	ldr	r1, [pc, #252]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	628b      	str	r3, [r1, #40]	; 0x28
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	025b      	lsls	r3, r3, #9
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	041b      	lsls	r3, r3, #16
 8008dea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	061b      	lsls	r3, r3, #24
 8008df8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008dfc:	4931      	ldr	r1, [pc, #196]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e02:	4b30      	ldr	r3, [pc, #192]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	492d      	ldr	r1, [pc, #180]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e10:	4313      	orrs	r3, r2
 8008e12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e14:	4b2b      	ldr	r3, [pc, #172]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	4928      	ldr	r1, [pc, #160]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e26:	4b27      	ldr	r3, [pc, #156]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	4a26      	ldr	r2, [pc, #152]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e32:	4b24      	ldr	r3, [pc, #144]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e36:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <RCCEx_PLL3_Config+0x160>)
 8008e38:	4013      	ands	r3, r2
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	69d2      	ldr	r2, [r2, #28]
 8008e3e:	00d2      	lsls	r2, r2, #3
 8008e40:	4920      	ldr	r1, [pc, #128]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e46:	4b1f      	ldr	r3, [pc, #124]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4a:	4a1e      	ldr	r2, [pc, #120]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e58:	4b1a      	ldr	r3, [pc, #104]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	4a19      	ldr	r2, [pc, #100]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e64:	e00f      	b.n	8008e86 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d106      	bne.n	8008e7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e6c:	4b15      	ldr	r3, [pc, #84]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	4a14      	ldr	r2, [pc, #80]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e78:	e005      	b.n	8008e86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e7a:	4b12      	ldr	r3, [pc, #72]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7e:	4a11      	ldr	r2, [pc, #68]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e86:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a0e      	ldr	r2, [pc, #56]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e92:	f7f8 feed 	bl	8001c70 <HAL_GetTick>
 8008e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e98:	e008      	b.n	8008eac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e9a:	f7f8 fee9 	bl	8001c70 <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d901      	bls.n	8008eac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e006      	b.n	8008eba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <RCCEx_PLL3_Config+0x15c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d0f0      	beq.n	8008e9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	ffff0007 	.word	0xffff0007

08008ecc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e04d      	b.n	8008f7a <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	7a5b      	ldrb	r3, [r3, #9]
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d105      	bne.n	8008ef4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7f8 fbca 	bl	8001688 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f023 0120 	bic.w	r1, r3, #32
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0204 	orr.w	r2, r2, #4
 8008f1e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2a:	2b40      	cmp	r3, #64	; 0x40
 8008f2c:	d104      	bne.n	8008f38 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2204      	movs	r2, #4
 8008f32:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e020      	b.n	8008f7a <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008f38:	f7f8 fe9a 	bl	8001c70 <HAL_GetTick>
 8008f3c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008f3e:	e00e      	b.n	8008f5e <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008f40:	f7f8 fe96 	bl	8001c70 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d907      	bls.n	8008f5e <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2204      	movs	r2, #4
 8008f52:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e00d      	b.n	8008f7a <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f003 0304 	and.w	r3, r3, #4
 8008f68:	2b04      	cmp	r3, #4
 8008f6a:	d0e9      	beq.n	8008f40 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7a1b      	ldrb	r3, [r3, #8]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_RNG_GenerateRandomNumber+0x1a>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e03d      	b.n	8009018 <HAL_RNG_GenerateRandomNumber+0x96>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	7a5b      	ldrb	r3, [r3, #9]
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d12c      	bne.n	8009006 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fb2:	f7f8 fe5d 	bl	8001c70 <HAL_GetTick>
 8008fb6:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008fb8:	e011      	b.n	8008fde <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008fba:	f7f8 fe59 	bl	8001c70 <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d90a      	bls.n	8008fde <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e01c      	b.n	8009018 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d1e6      	bne.n	8008fba <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689a      	ldr	r2, [r3, #8]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691a      	ldr	r2, [r3, #16]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	725a      	strb	r2, [r3, #9]
 8009004:	e004      	b.n	8009010 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2204      	movs	r2, #4
 800900a:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	721a      	strb	r2, [r3, #8]

  return status;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e0e2      	b.n	80091fc <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a70      	ldr	r2, [pc, #448]	; (8009204 <HAL_SPI_Init+0x1e4>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00f      	beq.n	8009066 <HAL_SPI_Init+0x46>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a6f      	ldr	r2, [pc, #444]	; (8009208 <HAL_SPI_Init+0x1e8>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00a      	beq.n	8009066 <HAL_SPI_Init+0x46>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a6d      	ldr	r2, [pc, #436]	; (800920c <HAL_SPI_Init+0x1ec>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d005      	beq.n	8009066 <HAL_SPI_Init+0x46>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	2b0f      	cmp	r3, #15
 8009060:	d901      	bls.n	8009066 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e0ca      	b.n	80091fc <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 f8cc 	bl	800a204 <SPI_GetPacketSize>
 800906c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a64      	ldr	r2, [pc, #400]	; (8009204 <HAL_SPI_Init+0x1e4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d00c      	beq.n	8009092 <HAL_SPI_Init+0x72>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a62      	ldr	r2, [pc, #392]	; (8009208 <HAL_SPI_Init+0x1e8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d007      	beq.n	8009092 <HAL_SPI_Init+0x72>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a61      	ldr	r2, [pc, #388]	; (800920c <HAL_SPI_Init+0x1ec>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d002      	beq.n	8009092 <HAL_SPI_Init+0x72>
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2b08      	cmp	r3, #8
 8009090:	d811      	bhi.n	80090b6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009096:	4a5b      	ldr	r2, [pc, #364]	; (8009204 <HAL_SPI_Init+0x1e4>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d009      	beq.n	80090b0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a59      	ldr	r2, [pc, #356]	; (8009208 <HAL_SPI_Init+0x1e8>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d004      	beq.n	80090b0 <HAL_SPI_Init+0x90>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a58      	ldr	r2, [pc, #352]	; (800920c <HAL_SPI_Init+0x1ec>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d104      	bne.n	80090ba <HAL_SPI_Init+0x9a>
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b10      	cmp	r3, #16
 80090b4:	d901      	bls.n	80090ba <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e0a0      	b.n	80091fc <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d106      	bne.n	80090d4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7f8 fafc 	bl	80016cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 0201 	bic.w	r2, r2, #1
 80090ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090f4:	d110      	bne.n	8009118 <HAL_SPI_Init+0xf8>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090fe:	d10b      	bne.n	8009118 <HAL_SPI_Init+0xf8>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	d107      	bne.n	8009118 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009116:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	69da      	ldr	r2, [r3, #28]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009120:	431a      	orrs	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800912a:	ea42 0103 	orr.w	r1, r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	431a      	orrs	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	431a      	orrs	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	431a      	orrs	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	431a      	orrs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	431a      	orrs	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800916c:	431a      	orrs	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009178:	ea42 0103 	orr.w	r1, r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	430a      	orrs	r2, r1
 8009186:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d113      	bne.n	80091b8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091a2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091b6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0201 	bic.w	r2, r2, #1
 80091c6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	40013000 	.word	0x40013000
 8009208:	40003800 	.word	0x40003800
 800920c:	40003c00 	.word	0x40003c00

08009210 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	4613      	mov	r3, r2
 800921c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009228:	2b01      	cmp	r3, #1
 800922a:	d101      	bne.n	8009230 <HAL_SPI_Transmit_DMA+0x20>
 800922c:	2302      	movs	r3, #2
 800922e:	e128      	b.n	8009482 <HAL_SPI_Transmit_DMA+0x272>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b01      	cmp	r3, #1
 8009242:	d007      	beq.n	8009254 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8009244:	2302      	movs	r3, #2
 8009246:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	e116      	b.n	8009482 <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <HAL_SPI_Transmit_DMA+0x50>
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d107      	bne.n	8009270 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	e108      	b.n	8009482 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2203      	movs	r2, #3
 8009274:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	88fa      	ldrh	r2, [r7, #6]
 800928a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	88fa      	ldrh	r2, [r7, #6]
 8009292:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80092c0:	d107      	bne.n	80092d2 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092d0:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	2b0f      	cmp	r3, #15
 80092d8:	d905      	bls.n	80092e6 <HAL_SPI_Transmit_DMA+0xd6>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092e4:	d10f      	bne.n	8009306 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80092ea:	2b07      	cmp	r3, #7
 80092ec:	d913      	bls.n	8009316 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092f8:	d00d      	beq.n	8009316 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092fe:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009304:	d007      	beq.n	8009316 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	e0b5      	b.n	8009482 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	2b07      	cmp	r3, #7
 800931c:	d820      	bhi.n	8009360 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009328:	d109      	bne.n	800933e <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009330:	b29b      	uxth	r3, r3
 8009332:	3301      	adds	r3, #1
 8009334:	105b      	asrs	r3, r3, #1
 8009336:	b29a      	uxth	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009348:	d11e      	bne.n	8009388 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009350:	b29b      	uxth	r3, r3
 8009352:	3303      	adds	r3, #3
 8009354:	109b      	asrs	r3, r3, #2
 8009356:	b29a      	uxth	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800935e:	e013      	b.n	8009388 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b0f      	cmp	r3, #15
 8009366:	d80f      	bhi.n	8009388 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009372:	d109      	bne.n	8009388 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800937a:	b29b      	uxth	r3, r3
 800937c:	3301      	adds	r3, #1
 800937e:	105b      	asrs	r3, r3, #1
 8009380:	b29a      	uxth	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800938c:	4a3f      	ldr	r2, [pc, #252]	; (800948c <HAL_SPI_Transmit_DMA+0x27c>)
 800938e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009394:	4a3e      	ldr	r2, [pc, #248]	; (8009490 <HAL_SPI_Transmit_DMA+0x280>)
 8009396:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800939c:	4a3d      	ldr	r2, [pc, #244]	; (8009494 <HAL_SPI_Transmit_DMA+0x284>)
 800939e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093a4:	2200      	movs	r2, #0
 80093a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093b6:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c0:	4619      	mov	r1, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3320      	adds	r3, #32
 80093c8:	461a      	mov	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	f7fa fb6d 	bl	8003ab0 <HAL_DMA_Start_IT>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00f      	beq.n	80093fc <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e2:	f043 0210 	orr.w	r2, r3, #16
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	e042      	b.n	8009482 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009406:	d108      	bne.n	800941a <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6859      	ldr	r1, [r3, #4]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	4b21      	ldr	r3, [pc, #132]	; (8009498 <HAL_SPI_Transmit_DMA+0x288>)
 8009414:	400b      	ands	r3, r1
 8009416:	6053      	str	r3, [r2, #4]
 8009418:	e009      	b.n	800942e <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	4b1d      	ldr	r3, [pc, #116]	; (8009498 <HAL_SPI_Transmit_DMA+0x288>)
 8009422:	4013      	ands	r3, r2
 8009424:	88f9      	ldrh	r1, [r7, #6]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	6812      	ldr	r2, [r2, #0]
 800942a:	430b      	orrs	r3, r1
 800942c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800943c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	691a      	ldr	r2, [r3, #16]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800944c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f042 0201 	orr.w	r2, r2, #1
 800945c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009466:	d107      	bne.n	8009478 <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009476:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	08009ff7 	.word	0x08009ff7
 8009490:	08009f25 	.word	0x08009f25
 8009494:	0800a04b 	.word	0x0800a04b
 8009498:	ffff0000 	.word	0xffff0000

0800949c <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	4613      	mov	r3, r2
 80094a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d110      	bne.n	80094d8 <HAL_SPI_Receive_DMA+0x3c>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094be:	d10b      	bne.n	80094d8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2204      	movs	r2, #4
 80094c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80094c8:	88fb      	ldrh	r3, [r7, #6]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	68b9      	ldr	r1, [r7, #8]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 f93c 	bl	800974c <HAL_SPI_TransmitReceive_DMA>
 80094d4:	4603      	mov	r3, r0
 80094d6:	e12c      	b.n	8009732 <HAL_SPI_Receive_DMA+0x296>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_SPI_Receive_DMA+0x4a>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e125      	b.n	8009732 <HAL_SPI_Receive_DMA+0x296>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d007      	beq.n	800950a <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 80094fa:	2302      	movs	r3, #2
 80094fc:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	e113      	b.n	8009732 <HAL_SPI_Receive_DMA+0x296>
  }

  if ((pData == NULL) || (Size == 0UL))
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <HAL_SPI_Receive_DMA+0x7a>
 8009510:	88fb      	ldrh	r3, [r7, #6]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d107      	bne.n	8009526 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	e105      	b.n	8009732 <HAL_SPI_Receive_DMA+0x296>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2204      	movs	r2, #4
 800952a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	88fa      	ldrh	r2, [r7, #6]
 8009540:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	88fa      	ldrh	r2, [r7, #6]
 8009548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009570:	d107      	bne.n	8009582 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009580:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	2b0f      	cmp	r3, #15
 8009588:	d905      	bls.n	8009596 <HAL_SPI_Receive_DMA+0xfa>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009594:	d10f      	bne.n	80095b6 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800959a:	2b07      	cmp	r3, #7
 800959c:	d913      	bls.n	80095c6 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095a8:	d00d      	beq.n	80095c6 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ae:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80095b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095b4:	d007      	beq.n	80095c6 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	e0b5      	b.n	8009732 <HAL_SPI_Receive_DMA+0x296>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80095d4:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	2b07      	cmp	r3, #7
 80095dc:	d820      	bhi.n	8009620 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e8:	d109      	bne.n	80095fe <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3301      	adds	r3, #1
 80095f4:	105b      	asrs	r3, r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009608:	d11e      	bne.n	8009648 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009610:	b29b      	uxth	r3, r3
 8009612:	3303      	adds	r3, #3
 8009614:	109b      	asrs	r3, r3, #2
 8009616:	b29a      	uxth	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800961e:	e013      	b.n	8009648 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	2b0f      	cmp	r3, #15
 8009626:	d80f      	bhi.n	8009648 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009632:	d109      	bne.n	8009648 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800963a:	b29b      	uxth	r3, r3
 800963c:	3301      	adds	r3, #1
 800963e:	105b      	asrs	r3, r3, #1
 8009640:	b29a      	uxth	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800964c:	4a3b      	ldr	r2, [pc, #236]	; (800973c <HAL_SPI_Receive_DMA+0x2a0>)
 800964e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009654:	4a3a      	ldr	r2, [pc, #232]	; (8009740 <HAL_SPI_Receive_DMA+0x2a4>)
 8009656:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800965c:	4a39      	ldr	r2, [pc, #228]	; (8009744 <HAL_SPI_Receive_DMA+0x2a8>)
 800965e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009664:	2200      	movs	r2, #0
 8009666:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3330      	adds	r3, #48	; 0x30
 8009672:	4619      	mov	r1, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009678:	461a      	mov	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009680:	b29b      	uxth	r3, r3
 8009682:	f7fa fa15 	bl	8003ab0 <HAL_DMA_Start_IT>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00f      	beq.n	80096ac <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009692:	f043 0210 	orr.w	r2, r3, #16
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	e042      	b.n	8009732 <HAL_SPI_Receive_DMA+0x296>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b6:	d108      	bne.n	80096ca <HAL_SPI_Receive_DMA+0x22e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6859      	ldr	r1, [r3, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b21      	ldr	r3, [pc, #132]	; (8009748 <HAL_SPI_Receive_DMA+0x2ac>)
 80096c4:	400b      	ands	r3, r1
 80096c6:	6053      	str	r3, [r2, #4]
 80096c8:	e009      	b.n	80096de <HAL_SPI_Receive_DMA+0x242>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <HAL_SPI_Receive_DMA+0x2ac>)
 80096d2:	4013      	ands	r3, r2
 80096d4:	88f9      	ldrh	r1, [r7, #6]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	6812      	ldr	r2, [r2, #0]
 80096da:	430b      	orrs	r3, r1
 80096dc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096ec:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	691a      	ldr	r2, [r3, #16]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80096fc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0201 	orr.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009716:	d107      	bne.n	8009728 <HAL_SPI_Receive_DMA+0x28c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009726:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	0800a013 	.word	0x0800a013
 8009740:	08009f6b 	.word	0x08009f6b
 8009744:	0800a04b 	.word	0x0800a04b
 8009748:	ffff0000 	.word	0xffff0000

0800974c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
 8009758:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009764:	2b01      	cmp	r3, #1
 8009766:	d101      	bne.n	800976c <HAL_SPI_TransmitReceive_DMA+0x20>
 8009768:	2302      	movs	r3, #2
 800976a:	e1ac      	b.n	8009ac6 <HAL_SPI_TransmitReceive_DMA+0x37a>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800977a:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009788:	d106      	bne.n	8009798 <HAL_SPI_TransmitReceive_DMA+0x4c>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d102      	bne.n	8009798 <HAL_SPI_TransmitReceive_DMA+0x4c>
 8009792:	7dbb      	ldrb	r3, [r7, #22]
 8009794:	2b04      	cmp	r3, #4
 8009796:	d00a      	beq.n	80097ae <HAL_SPI_TransmitReceive_DMA+0x62>
 8009798:	7dbb      	ldrb	r3, [r7, #22]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d007      	beq.n	80097ae <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 800979e:	2302      	movs	r3, #2
 80097a0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	e18b      	b.n	8009ac6 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d005      	beq.n	80097c0 <HAL_SPI_TransmitReceive_DMA+0x74>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <HAL_SPI_TransmitReceive_DMA+0x74>
 80097ba:	887b      	ldrh	r3, [r7, #2]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d107      	bne.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	e17a      	b.n	8009ac6 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b04      	cmp	r3, #4
 80097da:	d003      	beq.n	80097e4 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2205      	movs	r2, #5
 80097e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	887a      	ldrh	r2, [r7, #2]
 80097f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	887a      	ldrh	r2, [r7, #2]
 80097fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	887a      	ldrh	r2, [r7, #2]
 800980c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	887a      	ldrh	r2, [r7, #2]
 8009814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689a      	ldr	r2, [r3, #8]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009832:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	2b0f      	cmp	r3, #15
 800983a:	d905      	bls.n	8009848 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009846:	d10f      	bne.n	8009868 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800984c:	2b07      	cmp	r3, #7
 800984e:	d913      	bls.n	8009878 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800985a:	d00d      	beq.n	8009878 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009860:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009866:	d007      	beq.n	8009878 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009874:	7dfb      	ldrb	r3, [r7, #23]
 8009876:	e126      	b.n	8009ac6 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	2b07      	cmp	r3, #7
 800987e:	d840      	bhi.n	8009902 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800988a:	d109      	bne.n	80098a0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009892:	b29b      	uxth	r3, r3
 8009894:	3301      	adds	r3, #1
 8009896:	105b      	asrs	r3, r3, #1
 8009898:	b29a      	uxth	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098aa:	d109      	bne.n	80098c0 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	3303      	adds	r3, #3
 80098b6:	109b      	asrs	r3, r3, #2
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ca:	d109      	bne.n	80098e0 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3301      	adds	r3, #1
 80098d6:	105b      	asrs	r3, r3, #1
 80098d8:	b29a      	uxth	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098ea:	d12e      	bne.n	800994a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3303      	adds	r3, #3
 80098f6:	109b      	asrs	r3, r3, #2
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009900:	e023      	b.n	800994a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	2b0f      	cmp	r3, #15
 8009908:	d81f      	bhi.n	800994a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009914:	d109      	bne.n	800992a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800991c:	b29b      	uxth	r3, r3
 800991e:	3301      	adds	r3, #1
 8009920:	105b      	asrs	r3, r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009934:	d109      	bne.n	800994a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800993c:	b29b      	uxth	r3, r3
 800993e:	3301      	adds	r3, #1
 8009940:	105b      	asrs	r3, r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b04      	cmp	r3, #4
 8009954:	d108      	bne.n	8009968 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800995a:	4a5d      	ldr	r2, [pc, #372]	; (8009ad0 <HAL_SPI_TransmitReceive_DMA+0x384>)
 800995c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009962:	4a5c      	ldr	r2, [pc, #368]	; (8009ad4 <HAL_SPI_TransmitReceive_DMA+0x388>)
 8009964:	63da      	str	r2, [r3, #60]	; 0x3c
 8009966:	e007      	b.n	8009978 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800996c:	4a5a      	ldr	r2, [pc, #360]	; (8009ad8 <HAL_SPI_TransmitReceive_DMA+0x38c>)
 800996e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009974:	4a59      	ldr	r2, [pc, #356]	; (8009adc <HAL_SPI_TransmitReceive_DMA+0x390>)
 8009976:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800997c:	4a58      	ldr	r2, [pc, #352]	; (8009ae0 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800997e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009984:	2200      	movs	r2, #0
 8009986:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3330      	adds	r3, #48	; 0x30
 8009992:	4619      	mov	r1, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009998:	461a      	mov	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	f7fa f885 	bl	8003ab0 <HAL_DMA_Start_IT>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00f      	beq.n	80099cc <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099b2:	f043 0210 	orr.w	r2, r3, #16
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	e07c      	b.n	8009ac6 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689a      	ldr	r2, [r3, #8]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099da:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099e0:	2200      	movs	r2, #0
 80099e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099e8:	2200      	movs	r2, #0
 80099ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f0:	2200      	movs	r2, #0
 80099f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f8:	2200      	movs	r2, #0
 80099fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a04:	4619      	mov	r1, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3320      	adds	r3, #32
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	f7fa f84b 	bl	8003ab0 <HAL_DMA_Start_IT>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00f      	beq.n	8009a40 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a26:	f043 0210 	orr.w	r2, r3, #16
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	e042      	b.n	8009ac6 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a4a:	d108      	bne.n	8009a5e <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6859      	ldr	r1, [r3, #4]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	4b23      	ldr	r3, [pc, #140]	; (8009ae4 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8009a58:	400b      	ands	r3, r1
 8009a5a:	6053      	str	r3, [r2, #4]
 8009a5c:	e009      	b.n	8009a72 <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	4b1f      	ldr	r3, [pc, #124]	; (8009ae4 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8009a66:	4013      	ands	r3, r2
 8009a68:	8879      	ldrh	r1, [r7, #2]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	6812      	ldr	r2, [r2, #0]
 8009a6e:	430b      	orrs	r3, r1
 8009a70:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a80:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	691a      	ldr	r2, [r3, #16]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8009a90:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0201 	orr.w	r2, r2, #1
 8009aa0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aaa:	d107      	bne.n	8009abc <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	0800a013 	.word	0x0800a013
 8009ad4:	08009f6b 	.word	0x08009f6b
 8009ad8:	0800a02f 	.word	0x0800a02f
 8009adc:	08009fb1 	.word	0x08009fb1
 8009ae0:	0800a04b 	.word	0x0800a04b
 8009ae4:	ffff0000 	.word	0xffff0000

08009ae8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	; 0x28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009b00:	6a3a      	ldr	r2, [r7, #32]
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	4013      	ands	r3, r2
 8009b06:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009b1a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3330      	adds	r3, #48	; 0x30
 8009b22:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d113      	bne.n	8009b56 <HAL_SPI_IRQHandler+0x6e>
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	f003 0320 	and.w	r3, r3, #32
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10e      	bne.n	8009b56 <HAL_SPI_IRQHandler+0x6e>
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	f003 0304 	and.w	r3, r3, #4
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d009      	beq.n	8009b56 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	4798      	blx	r3
    handled = 1UL;
 8009b52:	2301      	movs	r3, #1
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10f      	bne.n	8009b80 <HAL_SPI_IRQHandler+0x98>
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <HAL_SPI_IRQHandler+0x98>
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d105      	bne.n	8009b80 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
    handled = 1UL;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10f      	bne.n	8009baa <HAL_SPI_IRQHandler+0xc2>
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <HAL_SPI_IRQHandler+0xc2>
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d105      	bne.n	8009baa <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
    handled = 1UL;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f040 8170 	bne.w	8009e92 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	f003 0308 	and.w	r3, r3, #8
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 80a0 	beq.w	8009cfe <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699a      	ldr	r2, [r3, #24]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0208 	orr.w	r2, r2, #8
 8009bcc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	699a      	ldr	r2, [r3, #24]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f042 0210 	orr.w	r2, r2, #16
 8009bdc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	699a      	ldr	r2, [r3, #24]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bec:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	691a      	ldr	r2, [r3, #16]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f022 0208 	bic.w	r2, r2, #8
 8009bfc:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00f      	beq.n	8009c28 <HAL_SPI_IRQHandler+0x140>
 8009c08:	7cfb      	ldrb	r3, [r7, #19]
 8009c0a:	2b04      	cmp	r3, #4
 8009c0c:	d004      	beq.n	8009c18 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <HAL_SPI_IRQHandler+0x140>
 8009c18:	7cfb      	ldrb	r3, [r7, #19]
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d059      	beq.n	8009cd2 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d154      	bne.n	8009cd2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d13d      	bne.n	8009cb2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8009c36:	e036      	b.n	8009ca6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	2b0f      	cmp	r3, #15
 8009c3e:	d90b      	bls.n	8009c58 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009c4a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c50:	1d1a      	adds	r2, r3, #4
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	665a      	str	r2, [r3, #100]	; 0x64
 8009c56:	e01d      	b.n	8009c94 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	2b07      	cmp	r3, #7
 8009c5e:	d90b      	bls.n	8009c78 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	8812      	ldrh	r2, [r2, #0]
 8009c68:	b292      	uxth	r2, r2
 8009c6a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c70:	1c9a      	adds	r2, r3, #2
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	665a      	str	r2, [r3, #100]	; 0x64
 8009c76:	e00d      	b.n	8009c94 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c84:	7812      	ldrb	r2, [r2, #0]
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1c2      	bne.n	8009c38 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fa06 	bl	800a0c4 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f920 	bl	8009f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009cd0:	e0e4      	b.n	8009e9c <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009cd2:	7cfb      	ldrb	r3, [r7, #19]
 8009cd4:	2b05      	cmp	r3, #5
 8009cd6:	d103      	bne.n	8009ce0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f8f1 	bl	8009ec0 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8009cde:	e0da      	b.n	8009e96 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009ce0:	7cfb      	ldrb	r3, [r7, #19]
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	d103      	bne.n	8009cee <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7f7 fb06 	bl	80012f8 <HAL_SPI_RxCpltCallback>
    return;
 8009cec:	e0d3      	b.n	8009e96 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009cee:	7cfb      	ldrb	r3, [r7, #19]
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	f040 80d0 	bne.w	8009e96 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f8d8 	bl	8009eac <HAL_SPI_TxCpltCallback>
    return;
 8009cfc:	e0cb      	b.n	8009e96 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00d      	beq.n	8009d24 <HAL_SPI_IRQHandler+0x23c>
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	f003 0308 	and.w	r3, r3, #8
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d008      	beq.n	8009d24 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	699a      	ldr	r2, [r3, #24]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d20:	619a      	str	r2, [r3, #24]

    return;
 8009d22:	e0bb      	b.n	8009e9c <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 80b6 	beq.w	8009e9c <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00f      	beq.n	8009d5a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d40:	f043 0204 	orr.w	r2, r3, #4
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	699a      	ldr	r2, [r3, #24]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d58:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00f      	beq.n	8009d84 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d6a:	f043 0201 	orr.w	r2, r3, #1
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	699a      	ldr	r2, [r3, #24]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d82:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00f      	beq.n	8009dae <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d94:	f043 0208 	orr.w	r2, r3, #8
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	699a      	ldr	r2, [r3, #24]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00f      	beq.n	8009dd8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0220 	orr.w	r2, r2, #32
 8009dd6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d05b      	beq.n	8009e9a <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f022 0201 	bic.w	r2, r2, #1
 8009df0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6919      	ldr	r1, [r3, #16]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	4b29      	ldr	r3, [pc, #164]	; (8009ea4 <HAL_SPI_IRQHandler+0x3bc>)
 8009dfe:	400b      	ands	r3, r1
 8009e00:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009e08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009e0c:	d138      	bne.n	8009e80 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009e1c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d013      	beq.n	8009e4e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e2a:	4a1f      	ldr	r2, [pc, #124]	; (8009ea8 <HAL_SPI_IRQHandler+0x3c0>)
 8009e2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fa f8a6 	bl	8003f84 <HAL_DMA_Abort_IT>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d021      	beq.n	8009e9a <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e5a:	4a13      	ldr	r2, [pc, #76]	; (8009ea8 <HAL_SPI_IRQHandler+0x3c0>)
 8009e5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fa f88e 	bl	8003f84 <HAL_DMA_Abort_IT>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d015      	beq.n	8009e9a <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009e7e:	e00c      	b.n	8009e9a <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f841 	bl	8009f10 <HAL_SPI_ErrorCallback>
    return;
 8009e8e:	bf00      	nop
 8009e90:	e003      	b.n	8009e9a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009e92:	bf00      	nop
 8009e94:	e002      	b.n	8009e9c <HAL_SPI_IRQHandler+0x3b4>
    return;
 8009e96:	bf00      	nop
 8009e98:	e000      	b.n	8009e9c <HAL_SPI_IRQHandler+0x3b4>
    return;
 8009e9a:	bf00      	nop
  }
}
 8009e9c:	3728      	adds	r7, #40	; 0x28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	fffffc94 	.word	0xfffffc94
 8009ea8:	0800a091 	.word	0x0800a091

08009eac <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f30:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b07      	cmp	r3, #7
 8009f3c:	d011      	beq.n	8009f62 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f48:	d103      	bne.n	8009f52 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff ffae 	bl	8009eac <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009f50:	e007      	b.n	8009f62 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f042 0208 	orr.w	r2, r2, #8
 8009f60:	611a      	str	r2, [r3, #16]
}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f76:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b07      	cmp	r3, #7
 8009f82:	d011      	beq.n	8009fa8 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f88:	69db      	ldr	r3, [r3, #28]
 8009f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8e:	d103      	bne.n	8009f98 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f7f7 f9b1 	bl	80012f8 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009f96:	e007      	b.n	8009fa8 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 0208 	orr.w	r2, r2, #8
 8009fa6:	611a      	str	r2, [r3, #16]
}
 8009fa8:	bf00      	nop
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b07      	cmp	r3, #7
 8009fc8:	d011      	beq.n	8009fee <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fce:	69db      	ldr	r3, [r3, #28]
 8009fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd4:	d103      	bne.n	8009fde <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff ff72 	bl	8009ec0 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009fdc:	e007      	b.n	8009fee <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	691a      	ldr	r2, [r3, #16]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0208 	orr.w	r2, r2, #8
 8009fec:	611a      	str	r2, [r3, #16]
}
 8009fee:	bf00      	nop
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a002:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f7ff ff65 	bl	8009ed4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f7ff ff61 	bl	8009ee8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a026:	bf00      	nop
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f7ff ff5d 	bl	8009efc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a042:	bf00      	nop
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a056:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7fb f901 	bl	8005260 <HAL_DMA_GetError>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b02      	cmp	r3, #2
 800a062:	d011      	beq.n	800a088 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f82d 	bl	800a0c4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a070:	f043 0210 	orr.w	r2, r3, #16
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7ff ff44 	bl	8009f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a088:	bf00      	nop
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7ff ff2a 	bl	8009f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	699a      	ldr	r2, [r3, #24]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 0208 	orr.w	r2, r2, #8
 800a0e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	699a      	ldr	r2, [r3, #24]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0210 	orr.w	r2, r2, #16
 800a0f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 0201 	bic.w	r2, r2, #1
 800a102:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6919      	ldr	r1, [r3, #16]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	4b3c      	ldr	r3, [pc, #240]	; (800a200 <SPI_CloseTransfer+0x13c>)
 800a110:	400b      	ands	r3, r1
 800a112:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	689a      	ldr	r2, [r3, #8]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a122:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d014      	beq.n	800a15a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f003 0320 	and.w	r3, r3, #32
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00f      	beq.n	800a15a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a140:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	699a      	ldr	r2, [r3, #24]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f042 0220 	orr.w	r2, r2, #32
 800a158:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b03      	cmp	r3, #3
 800a164:	d014      	beq.n	800a190 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00f      	beq.n	800a190 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a176:	f043 0204 	orr.w	r2, r3, #4
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699a      	ldr	r2, [r3, #24]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a18e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00f      	beq.n	800a1ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1a0:	f043 0201 	orr.w	r2, r3, #1
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	699a      	ldr	r2, [r3, #24]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00f      	beq.n	800a1e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1ca:	f043 0208 	orr.w	r2, r3, #8
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699a      	ldr	r2, [r3, #24]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a1f4:	bf00      	nop
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	fffffc90 	.word	0xfffffc90

0800a204 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a210:	095b      	lsrs	r3, r3, #5
 800a212:	3301      	adds	r3, #1
 800a214:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	3301      	adds	r3, #1
 800a21c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	3307      	adds	r3, #7
 800a222:	08db      	lsrs	r3, r3, #3
 800a224:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr

0800a23a <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high, LEAF* const leaf)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	60f8      	str	r0, [r7, #12]
 800a242:	ed87 0a02 	vstr	s0, [r7, #8]
 800a246:	edc7 0a01 	vstr	s1, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
	tThreshold_initToPool(th, low, high, &leaf->mempool);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	3318      	adds	r3, #24
 800a250:	4619      	mov	r1, r3
 800a252:	edd7 0a01 	vldr	s1, [r7, #4]
 800a256:	ed97 0a02 	vldr	s0, [r7, #8]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 f804 	bl	800a268 <tThreshold_initToPool>
}
 800a260:	bf00      	nop
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <tThreshold_initToPool>:

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	ed87 0a02 	vstr	s0, [r7, #8]
 800a274:	edc7 0a01 	vstr	s1, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	617b      	str	r3, [r7, #20]
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 800a280:	6979      	ldr	r1, [r7, #20]
 800a282:	2010      	movs	r0, #16
 800a284:	f000 fe85 	bl	800af92 <mpool_alloc>
 800a288:	4602      	mov	r2, r0
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	613b      	str	r3, [r7, #16]
    t->mempool = m;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	601a      	str	r2, [r3, #0]
    
    t->highThresh = high;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	605a      	str	r2, [r3, #4]
    t->lowThresh = low;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	609a      	str	r2, [r3, #8]

    t->currentValue = 0;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	60da      	str	r2, [r3, #12]
}
 800a2ac:	bf00      	nop
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <tThreshold_tick>:

    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	ed87 0a00 	vstr	s0, [r7]
    _tThreshold* t = *th;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	60fb      	str	r3, [r7, #12]

    if (in >= t->highThresh)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	edd3 7a01 	vldr	s15, [r3, #4]
 800a2cc:	ed97 7a00 	vldr	s14, [r7]
 800a2d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d8:	db03      	blt.n	800a2e2 <tThreshold_tick+0x2e>
    {
    	t->currentValue = 1;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	60da      	str	r2, [r3, #12]
 800a2e0:	e00c      	b.n	800a2fc <tThreshold_tick+0x48>
    }
    else if (in <= t->lowThresh)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	edd3 7a02 	vldr	s15, [r3, #8]
 800a2e8:	ed97 7a00 	vldr	s14, [r7]
 800a2ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f4:	d802      	bhi.n	800a2fc <tThreshold_tick+0x48>
	{
    	t->currentValue = 0;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	68db      	ldr	r3, [r3, #12]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	ed87 0a02 	vstr	s0, [r7, #8]
 800a318:	edc7 0a01 	vstr	s1, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	3318      	adds	r3, #24
 800a322:	4619      	mov	r1, r3
 800a324:	edd7 0a01 	vldr	s1, [r7, #4]
 800a328:	ed97 0a02 	vldr	s0, [r7, #8]
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f000 f804 	bl	800a33a <tSlide_initToPool>
}
 800a332:	bf00      	nop
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <tSlide_initToPool>:

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b086      	sub	sp, #24
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	ed87 0a02 	vstr	s0, [r7, #8]
 800a346:	edc7 0a01 	vstr	s1, [r7, #4]
 800a34a:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	617b      	str	r3, [r7, #20]
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800a352:	6979      	ldr	r1, [r7, #20]
 800a354:	201c      	movs	r0, #28
 800a356:	f000 fe1c 	bl	800af92 <mpool_alloc>
 800a35a:	4602      	mov	r2, r0
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	613b      	str	r3, [r7, #16]
    s->mempool = m;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	601a      	str	r2, [r3, #0]
    
    s->prevIn = 0.0f;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f04f 0200 	mov.w	r2, #0
 800a372:	60da      	str	r2, [r3, #12]
    s->currentOut = 0.0f;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f04f 0200 	mov.w	r2, #0
 800a37a:	609a      	str	r2, [r3, #8]
    s->prevOut = 0.0f;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f04f 0200 	mov.w	r2, #0
 800a382:	605a      	str	r2, [r3, #4]
    s->dest = 0.0f;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	619a      	str	r2, [r3, #24]
    if (upSlide < 1.0f)
 800a38c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a394:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39c:	d502      	bpl.n	800a3a4 <tSlide_initToPool+0x6a>
    {
        upSlide = 1.0f;
 800a39e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a3a2:	60bb      	str	r3, [r7, #8]
    }

    if (downSlide < 1.0f)
 800a3a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a3a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b4:	d502      	bpl.n	800a3bc <tSlide_initToPool+0x82>
    {
        downSlide = 1.0f;
 800a3b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a3ba:	607b      	str	r3, [r7, #4]
    }
    s->invUpSlide = 1.0f / upSlide;
 800a3bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3c0:	ed97 7a02 	vldr	s14, [r7, #8]
 800a3c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	edc3 7a04 	vstr	s15, [r3, #16]
    s->invDownSlide = 1.0f / downSlide;
 800a3ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3d2:	ed97 7a01 	vldr	s14, [r7, #4]
 800a3d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800a3e0:	bf00      	nop
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <tSlide_tick>:
    s->prevOut = s->currentOut;
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	ed87 0a00 	vstr	s0, [r7]
    _tSlide* s = *sl;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	60fb      	str	r3, [r7, #12]


    if (in >= s->prevOut)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	edd3 7a01 	vldr	s15, [r3, #4]
 800a400:	ed97 7a00 	vldr	s14, [r7]
 800a404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40c:	db14      	blt.n	800a438 <tSlide_tick+0x50>
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	ed93 7a01 	vldr	s14, [r3, #4]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	edd3 7a01 	vldr	s15, [r3, #4]
 800a41a:	edd7 6a00 	vldr	s13, [r7]
 800a41e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	edd3 7a04 	vldr	s15, [r3, #16]
 800a428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a42c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	edc3 7a02 	vstr	s15, [r3, #8]
 800a436:	e013      	b.n	800a460 <tSlide_tick+0x78>
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	ed93 7a01 	vldr	s14, [r3, #4]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	edd3 7a01 	vldr	s15, [r3, #4]
 800a444:	edd7 6a00 	vldr	s13, [r7]
 800a448:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	edd3 7a05 	vldr	s15, [r3, #20]
 800a452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	edc3 7a02 	vstr	s15, [r3, #8]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	edd3 7a02 	vldr	s15, [r3, #8]
 800a466:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a4a0 <tSlide_tick+0xb8>
 800a46a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a472:	d503      	bpl.n	800a47c <tSlide_tick+0x94>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f04f 0200 	mov.w	r2, #0
 800a47a:	609a      	str	r2, [r3, #8]
#endif
    s->prevIn = in;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	60da      	str	r2, [r3, #12]
    s->prevOut = s->currentOut;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	605a      	str	r2, [r3, #4]
    return s->currentOut;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	ee07 3a90 	vmov	s15, r3
}
 800a492:	eeb0 0a67 	vmov.f32	s0, s15
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	006ce3ee 	.word	0x006ce3ee

0800a4a4 <tHighpass_init>:
    svf->a3 = svf->g * svf->a2;
}

/* Highpass */
void    tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	ed87 0a02 	vstr	s0, [r7, #8]
 800a4b0:	6079      	str	r1, [r7, #4]
    tHighpass_initToPool(ft, freq, &leaf->mempool);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3318      	adds	r3, #24
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	ed97 0a02 	vldr	s0, [r7, #8]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f804 	bl	800a4ca <tHighpass_initToPool>
}
 800a4c2:	bf00      	nop
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <tHighpass_initToPool>:

void    tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b088      	sub	sp, #32
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	ed87 0a02 	vstr	s0, [r7, #8]
 800a4d6:	6079      	str	r1, [r7, #4]
    _tMempool* m = *mp;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	61fb      	str	r3, [r7, #28]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800a4de:	69f9      	ldr	r1, [r7, #28]
 800a4e0:	2014      	movs	r0, #20
 800a4e2:	f000 fe10 	bl	800b106 <mpool_calloc>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	601a      	str	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	61bb      	str	r3, [r7, #24]
    f->mempool = m;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	69fa      	ldr	r2, [r7, #28]
 800a4f6:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = f->mempool->leaf;
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	617b      	str	r3, [r7, #20]
    
    f->R = (1.0f - (freq * leaf->twoPiTimesInvSampleRate));
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	ed93 7a03 	vldr	s14, [r3, #12]
 800a506:	edd7 7a02 	vldr	s15, [r7, #8]
 800a50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a50e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a512:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	edc3 7a03 	vstr	s15, [r3, #12]
    f->ys = 0.0f;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	f04f 0200 	mov.w	r2, #0
 800a522:	609a      	str	r2, [r3, #8]
    f->xs = 0.0f;
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f04f 0200 	mov.w	r2, #0
 800a52a:	605a      	str	r2, [r3, #4]
    
    f->frequency = freq;
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	611a      	str	r2, [r3, #16]
}
 800a532:	bf00      	nop
 800a534:	3720      	adds	r7, #32
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <tHighpass_tick>:
    return f->frequency;
}

// From JOS DC Blocker
float   tHighpass_tick(tHighpass* const ft, float x)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b085      	sub	sp, #20
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	ed87 0a00 	vstr	s0, [r7]
    _tHighpass* f = *ft;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60fb      	str	r3, [r7, #12]
    f->ys = x - f->xs + f->R * f->ys;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a552:	ed97 7a00 	vldr	s14, [r7]
 800a556:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	edd3 6a03 	vldr	s13, [r3, #12]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	edd3 7a02 	vldr	s15, [r3, #8]
 800a566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a56a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	edc3 7a02 	vstr	s15, [r3, #8]
    f->xs = x;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	605a      	str	r2, [r3, #4]
    return f->ys;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	ee07 3a90 	vmov	s15, r3
}
 800a582:	eeb0 0a67 	vmov.f32	s0, s15
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <tVZFilter_init>:
}

/////

void    tVZFilter_init  (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, LEAF* const leaf)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6178      	str	r0, [r7, #20]
 800a598:	460b      	mov	r3, r1
 800a59a:	ed87 0a03 	vstr	s0, [r7, #12]
 800a59e:	edc7 0a02 	vstr	s1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	74fb      	strb	r3, [r7, #19]
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f103 0218 	add.w	r2, r3, #24
 800a5ac:	7cfb      	ldrb	r3, [r7, #19]
 800a5ae:	edd7 0a02 	vldr	s1, [r7, #8]
 800a5b2:	ed97 0a03 	vldr	s0, [r7, #12]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6978      	ldr	r0, [r7, #20]
 800a5ba:	f000 f805 	bl	800a5c8 <tVZFilter_initToPool>
}
 800a5be:	bf00      	nop
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <tVZFilter_initToPool>:

void    tVZFilter_initToPool     (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, tMempool* const mp)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08a      	sub	sp, #40	; 0x28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6178      	str	r0, [r7, #20]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	ed87 0a03 	vstr	s0, [r7, #12]
 800a5d6:	edc7 0a02 	vstr	s1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	74fb      	strb	r3, [r7, #19]
    _tMempool* m = *mp;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800a5e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5e6:	2044      	movs	r0, #68	; 0x44
 800a5e8:	f000 fcd3 	bl	800af92 <mpool_alloc>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	623b      	str	r3, [r7, #32]
    f->mempool = m;
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fc:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = f->mempool->leaf;
 800a5fe:	6a3b      	ldr	r3, [r7, #32]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	61fb      	str	r3, [r7, #28]
    
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * leaf->sampleRate);
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	edd3 7a00 	vldr	s15, [r3]
 800a60c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a610:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a614:	eeb0 1a67 	vmov.f32	s2, s15
 800a618:	edd7 0a03 	vldr	s1, [r7, #12]
 800a61c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800a67c <tVZFilter_initToPool+0xb4>
 800a620:	f000 fbb8 	bl	800ad94 <LEAF_clip>
 800a624:	eef0 7a40 	vmov.f32	s15, s0
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->type = type;
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	7cfa      	ldrb	r2, [r7, #19]
 800a632:	711a      	strb	r2, [r3, #4]
    f->G    = ONE_OVER_SQRT2;
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	4a12      	ldr	r2, [pc, #72]	; (800a680 <tVZFilter_initToPool+0xb8>)
 800a638:	62da      	str	r2, [r3, #44]	; 0x2c
    f->invG    = 1.0f/ONE_OVER_SQRT2;
 800a63a:	6a3b      	ldr	r3, [r7, #32]
 800a63c:	4a11      	ldr	r2, [pc, #68]	; (800a684 <tVZFilter_initToPool+0xbc>)
 800a63e:	631a      	str	r2, [r3, #48]	; 0x30
    f->B    = bandWidth;
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	635a      	str	r2, [r3, #52]	; 0x34
    f->m    = 0.0f;
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	f04f 0200 	mov.w	r2, #0
 800a64c:	639a      	str	r2, [r3, #56]	; 0x38
    f->s1 = 0.0f;
 800a64e:	6a3b      	ldr	r3, [r7, #32]
 800a650:	f04f 0200 	mov.w	r2, #0
 800a654:	609a      	str	r2, [r3, #8]
    f->s2 = 0.0f;
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	60da      	str	r2, [r3, #12]
    f->sr = leaf->sampleRate;
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	63da      	str	r2, [r3, #60]	; 0x3c
    f->inv_sr = leaf->invSampleRate;
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	641a      	str	r2, [r3, #64]	; 0x40
    tVZFilter_calcCoeffs(vf);
 800a66e:	6978      	ldr	r0, [r7, #20]
 800a670:	f000 f898 	bl	800a7a4 <tVZFilter_calcCoeffs>
}
 800a674:	bf00      	nop
 800a676:	3728      	adds	r7, #40	; 0x28
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	00000000 	.word	0x00000000
 800a680:	3f3504f3 	.word	0x3f3504f3
 800a684:	3fb504f3 	.word	0x3fb504f3

0800a688 <tVZFilter_tick>:
    f->sr = sampleRate;
    f->inv_sr = 1.0f/sampleRate;
}

float   tVZFilter_tick              (tVZFilter* const vf, float in)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	ed87 0a00 	vstr	s0, [r7]
    _tVZFilter* f = *vf;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	617b      	str	r3, [r7, #20]

    float yL, yB, yH;

    // compute highpass output via Eq. 5.1:
    yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	ed93 7a05 	vldr	s14, [r3, #20]
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	edd3 7a02 	vldr	s15, [r3, #8]
 800a6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6aa:	ed97 7a00 	vldr	s14, [r7]
 800a6ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	edd3 6a04 	vldr	s13, [r3, #16]
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	edd3 7a02 	vldr	s15, [r3, #8]
 800a6be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	edd3 7a03 	vldr	s15, [r3, #12]
 800a6cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	edd3 7a06 	vldr	s15, [r3, #24]
 800a6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6da:	edc7 7a04 	vstr	s15, [r7, #16]

    // compute bandpass output by applying 1st integrator to highpass output:
    yB = tanhf(f->g*yH) + f->s1;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	ed93 7a04 	vldr	s14, [r3, #16]
 800a6e4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a6e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a6f0:	f001 f95c 	bl	800b9ac <tanhf>
 800a6f4:	eeb0 7a40 	vmov.f32	s14, s0
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	edd3 7a02 	vldr	s15, [r3, #8]
 800a6fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a702:	edc7 7a03 	vstr	s15, [r7, #12]
    f->s1 = f->g*yH + yB; // state update in 1st integrator
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	ed93 7a04 	vldr	s14, [r3, #16]
 800a70c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a710:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a714:	edd7 7a03 	vldr	s15, [r7, #12]
 800a718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	edc3 7a02 	vstr	s15, [r3, #8]

    // compute lowpass output by applying 2nd integrator to bandpass output:
    yL = tanhf(f->g*yB) + f->s2;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	ed93 7a04 	vldr	s14, [r3, #16]
 800a728:	edd7 7a03 	vldr	s15, [r7, #12]
 800a72c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a730:	eeb0 0a67 	vmov.f32	s0, s15
 800a734:	f001 f93a 	bl	800b9ac <tanhf>
 800a738:	eeb0 7a40 	vmov.f32	s14, s0
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a742:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a746:	edc7 7a02 	vstr	s15, [r7, #8]
    f->s2 = f->g*yB + yL; // state update in 2nd integrator
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	ed93 7a04 	vldr	s14, [r3, #16]
 800a750:	edd7 7a03 	vldr	s15, [r7, #12]
 800a754:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a758:	edd7 7a02 	vldr	s15, [r7, #8]
 800a75c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	edc3 7a03 	vstr	s15, [r3, #12]

    //instead of this:
    // y = g*x + s; // output computation
    // s = g*x + y; // state update

    return f->cL*yL + f->cB*yB + f->cH*yH;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	ed93 7a07 	vldr	s14, [r3, #28]
 800a76c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a770:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	edd3 6a08 	vldr	s13, [r3, #32]
 800a77a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a77e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a782:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800a78c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a794:	ee77 7a27 	vadd.f32	s15, s14, s15

}
 800a798:	eeb0 0a67 	vmov.f32	s0, s15
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <tVZFilter_calcCoeffs>:

}


void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	ed2d 8b02 	vpush	{d8}
 800a7aa:	b08a      	sub	sp, #40	; 0x28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

    _tVZFilter* f = *vf;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	627b      	str	r3, [r7, #36]	; 0x24
    f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a7bc:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800aa7c <tVZFilter_calcCoeffs+0x2d8>
 800a7c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a7ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ce:	eeb0 0a67 	vmov.f32	s0, s15
 800a7d2:	f001 f8c3 	bl	800b95c <tanf>
 800a7d6:	eef0 7a40 	vmov.f32	s15, s0
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	edc3 7a04 	vstr	s15, [r3, #16]

      switch( f->type )
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	791b      	ldrb	r3, [r3, #4]
 800a7e4:	2b0a      	cmp	r3, #10
 800a7e6:	f200 8243 	bhi.w	800ac70 <tVZFilter_calcCoeffs+0x4cc>
 800a7ea:	a201      	add	r2, pc, #4	; (adr r2, 800a7f0 <tVZFilter_calcCoeffs+0x4c>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a861 	.word	0x0800a861
 800a7f4:	0800a83f 	.word	0x0800a83f
 800a7f8:	0800a883 	.word	0x0800a883
 800a7fc:	0800a8a5 	.word	0x0800a8a5
 800a800:	0800a8dd 	.word	0x0800a8dd
 800a804:	0800a915 	.word	0x0800a915
 800a808:	0800a9fd 	.word	0x0800a9fd
 800a80c:	0800aa89 	.word	0x0800aa89
 800a810:	0800ab49 	.word	0x0800ab49
 800a814:	0800a81d 	.word	0x0800a81d
 800a818:	0800ab09 	.word	0x0800ab09
      {
      case Bypass:
        {
          f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	615a      	str	r2, [r3, #20]
          f->cL = 1.0f;
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a82a:	61da      	str	r2, [r3, #28]
          f->cB = f->R2;
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	695a      	ldr	r2, [r3, #20]
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	621a      	str	r2, [r3, #32]
          f->cH = 1.0f;
 800a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a836:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a83a:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800a83c:	e218      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>
      case Lowpass:
        {
            f->R2 = f->invG;
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	615a      	str	r2, [r3, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a84c:	61da      	str	r2, [r3, #28]
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	f04f 0200 	mov.w	r2, #0
 800a854:	621a      	str	r2, [r3, #32]
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	f04f 0200 	mov.w	r2, #0
 800a85c:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800a85e:	e207      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>
      case Highpass:
        {
            f->R2 = f->invG;
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	615a      	str	r2, [r3, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	f04f 0200 	mov.w	r2, #0
 800a86e:	61da      	str	r2, [r3, #28]
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	f04f 0200 	mov.w	r2, #0
 800a876:	621a      	str	r2, [r3, #32]
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a87e:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800a880:	e1f6      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>
      case BandpassSkirt:
        {
            f->R2 = f->invG;
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	615a      	str	r2, [r3, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800a88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88c:	f04f 0200 	mov.w	r2, #0
 800a890:	61da      	str	r2, [r3, #28]
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a898:	621a      	str	r2, [r3, #32]
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	f04f 0200 	mov.w	r2, #0
 800a8a0:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800a8a2:	e1e5      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>
      case BandpassPeak:
        {
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800a8aa:	eeb0 0a67 	vmov.f32	s0, s15
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fa02 	bl	800acb8 <tVZFilter_BandwidthToR>
 800a8b4:	eef0 7a40 	vmov.f32	s15, s0
 800a8b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8be:	edc3 7a05 	vstr	s15, [r3, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	f04f 0200 	mov.w	r2, #0
 800a8c8:	61da      	str	r2, [r3, #28]
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	695a      	ldr	r2, [r3, #20]
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	621a      	str	r2, [r3, #32]
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	f04f 0200 	mov.w	r2, #0
 800a8d8:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800a8da:	e1c9      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>
      case BandReject:
        {
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800a8e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f9e6 	bl	800acb8 <tVZFilter_BandwidthToR>
 800a8ec:	eef0 7a40 	vmov.f32	s15, s0
 800a8f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	edc3 7a05 	vstr	s15, [r3, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a900:	61da      	str	r2, [r3, #28]
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	f04f 0200 	mov.w	r2, #0
 800a908:	621a      	str	r2, [r3, #32]
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a910:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800a912:	e1ad      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>
      case Bell:
        {
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800a920:	eef1 7a67 	vneg.f32	s15, s15
 800a924:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a92c:	eef0 0a67 	vmov.f32	s1, s15
 800a930:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a934:	f000 fed4 	bl	800b6e0 <powf>
 800a938:	eef0 7a40 	vmov.f32	s15, s0
 800a93c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a940:	edc7 7a04 	vstr	s15, [r7, #16]
            float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800a944:	edd7 7a04 	vldr	s15, [r7, #16]
 800a948:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800aa7c <tVZFilter_calcCoeffs+0x2d8>
 800a94c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95a:	eeb0 0a67 	vmov.f32	s0, s15
 800a95e:	f000 fffd 	bl	800b95c <tanf>
 800a962:	ed87 0a03 	vstr	s0, [r7, #12]
            float r  = f->g/wl;
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	edd3 6a04 	vldr	s13, [r3, #16]
 800a96c:	ed97 7a03 	vldr	s14, [r7, #12]
 800a970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a974:	edc7 7a02 	vstr	s15, [r7, #8]
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800a978:	ed97 7a02 	vldr	s14, [r7, #8]
 800a97c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a980:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a984:	edc7 7a02 	vstr	s15, [r7, #8]
                                       // warped upper bandedge, wc the center
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800a988:	ed97 7a02 	vldr	s14, [r7, #8]
 800a98c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a990:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a998:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a99c:	ed97 7a02 	vldr	s14, [r7, #8]
 800a9a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a9a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a9b2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a9b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a9ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a9be:	eeb0 0a66 	vmov.f32	s0, s13
 800a9c2:	f001 f925 	bl	800bc10 <sqrtf>
 800a9c6:	eef0 7a40 	vmov.f32	s15, s0
 800a9ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	edc3 7a05 	vstr	s15, [r3, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a9da:	61da      	str	r2, [r3, #28]
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	ed93 7a05 	vldr	s14, [r3, #20]
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a9e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	edc3 7a08 	vstr	s15, [r3, #32]
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a9f8:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800a9fa:	e139      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>
      case Lowshelf:
        {
            float A = sqrtf(f->G);
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800aa02:	eeb0 0a67 	vmov.f32	s0, s15
 800aa06:	f001 f903 	bl	800bc10 <sqrtf>
 800aa0a:	ed87 0a05 	vstr	s0, [r7, #20]
          f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800aa0e:	ed97 0a05 	vldr	s0, [r7, #20]
 800aa12:	f001 f8fd 	bl	800bc10 <sqrtf>
 800aa16:	eef0 6a40 	vmov.f32	s13, s0
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	ed93 7a04 	vldr	s14, [r3, #16]
 800aa20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	edc3 7a04 	vstr	s15, [r3, #16]
          f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800aa30:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800aa80 <tVZFilter_calcCoeffs+0x2dc>
 800aa34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aa3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa40:	eeb0 0a67 	vmov.f32	s0, s15
 800aa44:	f001 f878 	bl	800bb38 <sinhf>
 800aa48:	eef0 7a40 	vmov.f32	s15, s0
 800aa4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	edc3 7a05 	vstr	s15, [r3, #20]
          f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	61da      	str	r2, [r3, #28]
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa60:	ed93 7a05 	vldr	s14, [r3, #20]
 800aa64:	edd7 7a05 	vldr	s15, [r7, #20]
 800aa68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	edc3 7a08 	vstr	s15, [r3, #32]
 800aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800aa78:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800aa7a:	e0f9      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>
 800aa7c:	40490fdb 	.word	0x40490fdb
 800aa80:	3f317218 	.word	0x3f317218
 800aa84:	00000000 	.word	0x00000000
      case Highshelf:
        {
          float A = sqrtf(f->G);
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800aa8e:	eeb0 0a67 	vmov.f32	s0, s15
 800aa92:	f001 f8bd 	bl	800bc10 <sqrtf>
 800aa96:	ed87 0a06 	vstr	s0, [r7, #24]
          f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800aa9a:	ed97 0a06 	vldr	s0, [r7, #24]
 800aa9e:	f001 f8b7 	bl	800bc10 <sqrtf>
 800aaa2:	eeb0 7a40 	vmov.f32	s14, s0
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	edd3 7a04 	vldr	s15, [r3, #16]
 800aaac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	edc3 7a04 	vstr	s15, [r3, #16]
          f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800aabc:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 800aa80 <tVZFilter_calcCoeffs+0x2dc>
 800aac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aac4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aacc:	eeb0 0a67 	vmov.f32	s0, s15
 800aad0:	f001 f832 	bl	800bb38 <sinhf>
 800aad4:	eef0 7a40 	vmov.f32	s15, s0
 800aad8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	edc3 7a05 	vstr	s15, [r3, #20]
          f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800aae8:	61da      	str	r2, [r3, #28]
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	ed93 7a05 	vldr	s14, [r3, #20]
 800aaf0:	edd7 7a06 	vldr	s15, [r7, #24]
 800aaf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafa:	edc3 7a08 	vstr	s15, [r3, #32]
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800ab06:	e0b3      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>
      case Allpass:
        {
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ab0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f8d0 	bl	800acb8 <tVZFilter_BandwidthToR>
 800ab18:	eef0 7a40 	vmov.f32	s15, s0
 800ab1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	edc3 7a05 	vstr	s15, [r3, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ab2c:	61da      	str	r2, [r3, #28]
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	edd3 7a05 	vldr	s15, [r3, #20]
 800ab34:	eef1 7a67 	vneg.f32	s15, s15
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	edc3 7a08 	vstr	s15, [r3, #32]
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ab44:	625a      	str	r2, [r3, #36]	; 0x24
        }
        break;
 800ab46:	e093      	b.n	800ac70 <tVZFilter_calcCoeffs+0x4cc>

        // experimental - maybe we must find better curves for cL, cB, cH:
      case Morph:
        {
            f->R2 = f->invG;
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	615a      	str	r2, [r3, #20]
          float x  = 2.0f*f->m-1.0f;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ab56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ab5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab62:	edc7 7a08 	vstr	s15, [r7, #32]

          f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800ab66:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab6a:	eef1 7a67 	vneg.f32	s15, s15
 800ab6e:	ed5f 0a3b 	vldr	s1, [pc, #-236]	; 800aa84 <tVZFilter_calcCoeffs+0x2e0>
 800ab72:	eeb0 0a67 	vmov.f32	s0, s15
 800ab76:	f000 f990 	bl	800ae9a <maximum>
 800ab7a:	eef0 7a40 	vmov.f32	s15, s0
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	edc3 7a07 	vstr	s15, [r3, #28]
          f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800ab84:	ed5f 0a41 	vldr	s1, [pc, #-260]	; 800aa84 <tVZFilter_calcCoeffs+0x2e0>
 800ab88:	ed97 0a08 	vldr	s0, [r7, #32]
 800ab8c:	f000 f9a1 	bl	800aed2 <minimum>
 800ab90:	eef0 7a40 	vmov.f32	s15, s0
 800ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab96:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
          f->cB = 1.0f-x*x;
 800ab9a:	ed97 7a08 	vldr	s14, [r7, #32]
 800ab9e:	edd7 7a08 	vldr	s15, [r7, #32]
 800aba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	edc3 7a08 	vstr	s15, [r3, #32]
            // bottom line: we need to test different versions for how they feel when tweaking the
            // morph parameter

          // this scaling ensures constant magnitude at the cutoff point (we divide the coefficients by
          // the magnitude response value at the cutoff frequency and scale back by the gain):
          float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	ed93 8a0b 	vldr	s16, [r3, #44]	; 0x2c
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	ed93 7a05 	vldr	s14, [r3, #20]
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	edd3 7a05 	vldr	s15, [r3, #20]
 800abc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	edd3 6a07 	vldr	s13, [r3, #28]
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	edd3 7a07 	vldr	s15, [r3, #28]
 800abd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	ed93 6a08 	vldr	s12, [r3, #32]
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	edd3 7a08 	vldr	s15, [r3, #32]
 800abe6:	ee66 7a27 	vmul.f32	s15, s12, s15
 800abea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf0:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800abfa:	ee66 7a27 	vmul.f32	s15, s12, s15
 800abfe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	edd3 7a07 	vldr	s15, [r3, #28]
 800ac08:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ac12:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ac16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ac1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ac1e:	eeb0 0a66 	vmov.f32	s0, s13
 800ac22:	f000 fff5 	bl	800bc10 <sqrtf>
 800ac26:	eef0 7a40 	vmov.f32	s15, s0
 800ac2a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ac2e:	edc7 7a07 	vstr	s15, [r7, #28]
          f->cL *= s; f->cB *= s; f->cH *= s;
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	ed93 7a07 	vldr	s14, [r3, #28]
 800ac38:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	edc3 7a07 	vstr	s15, [r3, #28]
 800ac46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac48:	ed93 7a08 	vldr	s14, [r3, #32]
 800ac4c:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	edc3 7a08 	vstr	s15, [r3, #32]
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800ac60:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        }
        break;
 800ac6e:	bf00      	nop

      }

      f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	ed93 7a05 	vldr	s14, [r3, #20]
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	edd3 7a04 	vldr	s15, [r3, #16]
 800ac7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	edd3 6a04 	vldr	s13, [r3, #16]
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac90:	edd3 7a04 	vldr	s15, [r3, #16]
 800ac94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800acaa:	bf00      	nop
 800acac:	3728      	adds	r7, #40	; 0x28
 800acae:	46bd      	mov	sp, r7
 800acb0:	ecbd 8b02 	vpop	{d8}
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop

0800acb8 <tVZFilter_BandwidthToR>:
    f->type = type;
    tVZFilter_calcCoeffs(vf);
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	ed2d 8b02 	vpush	{d8}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	ed87 0a00 	vstr	s0, [r7]
    _tVZFilter* f = *vf;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	617b      	str	r3, [r7, #20]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 800acd4:	edd7 7a00 	vldr	s15, [r7]
 800acd8:	eef1 7a67 	vneg.f32	s15, s15
 800acdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ace0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ace4:	eef0 0a67 	vmov.f32	s1, s15
 800ace8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800acec:	f000 fcf8 	bl	800b6e0 <powf>
 800acf0:	eef0 7a40 	vmov.f32	s15, s0
 800acf4:	ee68 7a27 	vmul.f32	s15, s16, s15
 800acf8:	edc7 7a04 	vstr	s15, [r7, #16]
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 800acfc:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad00:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800ad90 <tVZFilter_BandwidthToR+0xd8>
 800ad04:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800ad0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad12:	eeb0 0a67 	vmov.f32	s0, s15
 800ad16:	f000 fe21 	bl	800b95c <tanf>
 800ad1a:	ed87 0a03 	vstr	s0, [r7, #12]
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	ed93 7a04 	vldr	s14, [r3, #16]
 800ad24:	edd7 6a03 	vldr	s13, [r7, #12]
 800ad28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad2c:	edc7 7a02 	vstr	s15, [r7, #8]
                               // unwarped: r = pow(2, -B/2) -> approximation for low
                               // center-frequencies
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800ad30:	ed97 7a02 	vldr	s14, [r7, #8]
 800ad34:	edd7 7a02 	vldr	s15, [r7, #8]
 800ad38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad44:	edd7 6a02 	vldr	s13, [r7, #8]
 800ad48:	edd7 7a02 	vldr	s15, [r7, #8]
 800ad4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ad58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad5c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ad60:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800ad64:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ad68:	edd7 7a02 	vldr	s15, [r7, #8]
 800ad6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ad74:	eeb0 0a66 	vmov.f32	s0, s13
 800ad78:	f000 ff4a 	bl	800bc10 <sqrtf>
 800ad7c:	eef0 7a40 	vmov.f32	s15, s0
}
 800ad80:	eeb0 0a67 	vmov.f32	s0, s15
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	ecbd 8b02 	vpop	{d8}
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	40490fdb 	.word	0x40490fdb

0800ad94 <LEAF_clip>:
        return val;
    }
}

float   LEAF_clip(float min, float val, float max)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	ed87 0a03 	vstr	s0, [r7, #12]
 800ad9e:	edc7 0a02 	vstr	s1, [r7, #8]
 800ada2:	ed87 1a01 	vstr	s2, [r7, #4]
    float tempmin = min;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	617b      	str	r3, [r7, #20]
    float tempmax = max;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	613b      	str	r3, [r7, #16]
    if (min > max)
 800adae:	ed97 7a03 	vldr	s14, [r7, #12]
 800adb2:	edd7 7a01 	vldr	s15, [r7, #4]
 800adb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adbe:	dd03      	ble.n	800adc8 <LEAF_clip+0x34>
    {
        tempmin = max;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	617b      	str	r3, [r7, #20]
        tempmax = min;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	613b      	str	r3, [r7, #16]
    }
    if (val < tempmin)
 800adc8:	ed97 7a02 	vldr	s14, [r7, #8]
 800adcc:	edd7 7a05 	vldr	s15, [r7, #20]
 800add0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800add4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add8:	d501      	bpl.n	800adde <LEAF_clip+0x4a>
    {
        return tempmin;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	e00b      	b.n	800adf6 <LEAF_clip+0x62>
    }
    else if (val > tempmax)
 800adde:	ed97 7a02 	vldr	s14, [r7, #8]
 800ade2:	edd7 7a04 	vldr	s15, [r7, #16]
 800ade6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adee:	dd01      	ble.n	800adf4 <LEAF_clip+0x60>
    {
        return tempmax;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	e000      	b.n	800adf6 <LEAF_clip+0x62>
    }
    else
    {
        return val;
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	ee07 3a90 	vmov	s15, r3
    }
}
 800adfa:	eeb0 0a67 	vmov.f32	s0, s15
 800adfe:	371c      	adds	r7, #28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <LEAF_generate_atodb>:
        x += increment;
    }
}

void LEAF_generate_atodb(float* buffer, int size)
{
 800ae08:	b590      	push	{r4, r7, lr}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
    float increment = 1.0f / (float)size;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	ee07 3a90 	vmov	s15, r3
 800ae18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ae1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae24:	edc7 7a03 	vstr	s15, [r7, #12]
    float x = 0.0f;
 800ae28:	f04f 0300 	mov.w	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++)
 800ae2e:	2300      	movs	r3, #0
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	e016      	b.n	800ae62 <LEAF_generate_atodb+0x5a>
    {
        buffer[i] = atodb(x);
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	18d4      	adds	r4, r2, r3
 800ae3c:	ed97 0a05 	vldr	s0, [r7, #20]
 800ae40:	f000 f817 	bl	800ae72 <atodb>
 800ae44:	eef0 7a40 	vmov.f32	s15, s0
 800ae48:	edc4 7a00 	vstr	s15, [r4]
        x += increment;
 800ae4c:	ed97 7a05 	vldr	s14, [r7, #20]
 800ae50:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae58:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < size; i++)
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	613b      	str	r3, [r7, #16]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	dbe4      	blt.n	800ae34 <LEAF_generate_atodb+0x2c>
    }
}
 800ae6a:	bf00      	nop
 800ae6c:	371c      	adds	r7, #28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd90      	pop	{r4, r7, pc}

0800ae72 <atodb>:
    return (expf((LOGTEN * 0.05f) * (f-100.0f)));
}


float atodb(float a)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	ed87 0a01 	vstr	s0, [r7, #4]
    return 20.0f*log10f(a);
 800ae7c:	ed97 0a01 	vldr	s0, [r7, #4]
 800ae80:	f000 fde6 	bl	800ba50 <log10f>
 800ae84:	eeb0 7a40 	vmov.f32	s14, s0
 800ae88:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800ae8c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800ae90:	eeb0 0a67 	vmov.f32	s0, s15
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <maximum>:
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}


float maximum (float num1, float num2)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b083      	sub	sp, #12
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	ed87 0a01 	vstr	s0, [r7, #4]
 800aea4:	edc7 0a00 	vstr	s1, [r7]
    return (num1 > num2 ) ? num1 : num2;
 800aea8:	ed97 7a01 	vldr	s14, [r7, #4]
 800aeac:	edd7 7a00 	vldr	s15, [r7]
 800aeb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb8:	dd01      	ble.n	800aebe <maximum+0x24>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	e000      	b.n	800aec0 <maximum+0x26>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	ee07 3a90 	vmov	s15, r3
}
 800aec4:	eeb0 0a67 	vmov.f32	s0, s15
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <minimum>:

float minimum (float num1, float num2)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	ed87 0a01 	vstr	s0, [r7, #4]
 800aedc:	edc7 0a00 	vstr	s1, [r7]
    return (num1 < num2 ) ? num1 : num2;
 800aee0:	ed97 7a01 	vldr	s14, [r7, #4]
 800aee4:	edd7 7a00 	vldr	s15, [r7]
 800aee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aeec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef0:	d501      	bpl.n	800aef6 <minimum+0x24>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	e000      	b.n	800aef8 <minimum+0x26>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	ee07 3a90 	vmov	s15, r3
}
 800aefc:	eeb0 0a67 	vmov.f32	s0, s15
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 800af0a:	b590      	push	{r4, r7, lr}
 800af0c:	b087      	sub	sp, #28
 800af0e:	af02      	add	r7, sp, #8
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685c      	ldr	r4, [r3, #4]
 800af1a:	2010      	movs	r0, #16
 800af1c:	f000 f9a8 	bl	800b270 <mpool_align>
 800af20:	4603      	mov	r3, r0
 800af22:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	60da      	str	r2, [r3, #12]
    pool->msize  = size;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6898      	ldr	r0, [r3, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691a      	ldr	r2, [r3, #16]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af44:	1ad2      	subs	r2, r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	4613      	mov	r3, r2
 800af50:	2200      	movs	r2, #0
 800af52:	2100      	movs	r1, #0
 800af54:	f000 f99a 	bl	800b28c <create_node>
 800af58:	4602      	mov	r2, r0
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	615a      	str	r2, [r3, #20]
    {
        memory[i+leaf.header_size]=0;
    }
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}
 800af5e:	bf00      	nop
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	bd90      	pop	{r4, r7, pc}

0800af66 <leaf_pool_init>:

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	331c      	adds	r3, #28
 800af76:	461a      	mov	r2, r3
 800af78:	6879      	ldr	r1, [r7, #4]
 800af7a:	68b8      	ldr	r0, [r7, #8]
 800af7c:	f7ff ffc5 	bl	800af0a <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f103 021c 	add.w	r2, r3, #28
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	619a      	str	r2, [r3, #24]
}
 800af8a:	bf00      	nop
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 800af92:	b590      	push	{r4, r7, lr}
 800af94:	b08d      	sub	sp, #52	; 0x34
 800af96:	af02      	add	r7, sp, #8
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	695b      	ldr	r3, [r3, #20]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d116      	bne.n	800afd2 <mpool_alloc+0x40>
    {
        if ((pool->msize - pool->usize) > asize)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	691a      	ldr	r2, [r3, #16]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d206      	bcs.n	800afc2 <mpool_alloc+0x30>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	2101      	movs	r1, #1
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 f9fe 	bl	800b3bc <LEAF_internalErrorCallback>
 800afc0:	e005      	b.n	800afce <mpool_alloc+0x3c>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	2100      	movs	r1, #0
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f9f7 	bl	800b3bc <LEAF_internalErrorCallback>
        }
        return NULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	e095      	b.n	800b0fe <mpool_alloc+0x16c>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f94c 	bl	800b270 <mpool_align>
 800afd8:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 800afe0:	e01c      	b.n	800b01c <mpool_alloc+0x8a>
    {
        node_to_alloc = node_to_alloc->next;
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	2b00      	cmp	r3, #0
 800afec:	d116      	bne.n	800b01c <mpool_alloc+0x8a>
        {
            if ((pool->msize - pool->usize) > asize)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	691a      	ldr	r2, [r3, #16]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	429a      	cmp	r2, r3
 800affc:	d206      	bcs.n	800b00c <mpool_alloc+0x7a>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2101      	movs	r1, #1
 800b004:	4618      	mov	r0, r3
 800b006:	f000 f9d9 	bl	800b3bc <LEAF_internalErrorCallback>
 800b00a:	e005      	b.n	800b018 <mpool_alloc+0x86>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	2100      	movs	r1, #0
 800b012:	4618      	mov	r0, r3
 800b014:	f000 f9d2 	bl	800b3bc <LEAF_internalErrorCallback>
            }
            return NULL;
 800b018:	2300      	movs	r3, #0
 800b01a:	e070      	b.n	800b0fe <mpool_alloc+0x16c>
    while (node_to_alloc->size < size_to_alloc)
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	429a      	cmp	r2, r3
 800b024:	d8dd      	bhi.n	800afe2 <mpool_alloc+0x50>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b028:	68da      	ldr	r2, [r3, #12]
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 800b030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b032:	69ba      	ldr	r2, [r7, #24]
 800b034:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d924      	bls.n	800b08c <mpool_alloc+0xfa>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800b042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	6892      	ldr	r2, [r2, #8]
 800b048:	1a9b      	subs	r3, r3, r2
 800b04a:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	441a      	add	r2, r3
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	4413      	add	r3, r2
 800b05c:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b068:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800b07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	4613      	mov	r3, r2
 800b082:	4622      	mov	r2, r4
 800b084:	f000 f902 	bl	800b28c <create_node>
 800b088:	6238      	str	r0, [r7, #32]
 800b08a:	e008      	b.n	800b09e <mpool_alloc+0x10c>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	68da      	ldr	r2, [r3, #12]
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	441a      	add	r2, r3
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d102      	bne.n	800b0ae <mpool_alloc+0x11c>
    {
        pool->head = new_node;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	6a3a      	ldr	r2, [r7, #32]
 800b0ac:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 800b0ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0b0:	f000 f90a 	bl	800b2c8 <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	440b      	add	r3, r1
 800b0c4:	441a      	add	r2, r3
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	dd12      	ble.n	800b0fa <mpool_alloc+0x168>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61fb      	str	r3, [r7, #28]
 800b0de:	e007      	b.n	800b0f0 <mpool_alloc+0x15e>
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	701a      	strb	r2, [r3, #0]
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	61fb      	str	r3, [r7, #28]
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	68da      	ldr	r2, [r3, #12]
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d8f2      	bhi.n	800b0e0 <mpool_alloc+0x14e>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	681b      	ldr	r3, [r3, #0]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	372c      	adds	r7, #44	; 0x2c
 800b102:	46bd      	mov	sp, r7
 800b104:	bd90      	pop	{r4, r7, pc}

0800b106 <mpool_calloc>:

/**
 * allocate memory from memory pool and also clear that memory to be blank
 */
char* mpool_calloc(size_t asize, _tMempool* pool)
{
 800b106:	b590      	push	{r4, r7, lr}
 800b108:	b08d      	sub	sp, #52	; 0x34
 800b10a:	af02      	add	r7, sp, #8
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	695b      	ldr	r3, [r3, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d116      	bne.n	800b146 <mpool_calloc+0x40>
    {
        if ((pool->msize - pool->usize) > asize)
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	691a      	ldr	r2, [r3, #16]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	429a      	cmp	r2, r3
 800b126:	d206      	bcs.n	800b136 <mpool_calloc+0x30>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	2101      	movs	r1, #1
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 f944 	bl	800b3bc <LEAF_internalErrorCallback>
 800b134:	e005      	b.n	800b142 <mpool_calloc+0x3c>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	2100      	movs	r1, #0
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 f93d 	bl	800b3bc <LEAF_internalErrorCallback>
        }
        return NULL;
 800b142:	2300      	movs	r3, #0
 800b144:	e090      	b.n	800b268 <mpool_calloc+0x162>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f892 	bl	800b270 <mpool_align>
 800b14c:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 800b154:	e01c      	b.n	800b190 <mpool_calloc+0x8a>
    {
        node_to_alloc = node_to_alloc->next;
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d116      	bne.n	800b190 <mpool_calloc+0x8a>
        {
            if ((pool->msize - pool->usize) > asize)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	691a      	ldr	r2, [r3, #16]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d206      	bcs.n	800b180 <mpool_calloc+0x7a>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	2101      	movs	r1, #1
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 f91f 	bl	800b3bc <LEAF_internalErrorCallback>
 800b17e:	e005      	b.n	800b18c <mpool_calloc+0x86>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	2100      	movs	r1, #0
 800b186:	4618      	mov	r0, r3
 800b188:	f000 f918 	bl	800b3bc <LEAF_internalErrorCallback>
            }
            return NULL;
 800b18c:	2300      	movs	r3, #0
 800b18e:	e06b      	b.n	800b268 <mpool_calloc+0x162>
    while (node_to_alloc->size < size_to_alloc)
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	69ba      	ldr	r2, [r7, #24]
 800b196:	429a      	cmp	r2, r3
 800b198:	d8dd      	bhi.n	800b156 <mpool_calloc+0x50>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	68da      	ldr	r2, [r3, #12]
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d924      	bls.n	800b200 <mpool_calloc+0xfa>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	6892      	ldr	r2, [r2, #8]
 800b1bc:	1a9b      	subs	r3, r3, r2
 800b1be:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	441a      	add	r2, r3
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	689a      	ldr	r2, [r3, #8]
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 800b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e0:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800b1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	f000 f848 	bl	800b28c <create_node>
 800b1fc:	6238      	str	r0, [r7, #32]
 800b1fe:	e008      	b.n	800b212 <mpool_calloc+0x10c>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	68da      	ldr	r2, [r3, #12]
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	441a      	add	r2, r3
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b218:	429a      	cmp	r2, r3
 800b21a:	d102      	bne.n	800b222 <mpool_calloc+0x11c>
    {
        pool->head = new_node;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	6a3a      	ldr	r2, [r7, #32]
 800b220:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 800b222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b224:	f000 f850 	bl	800b2c8 <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	68da      	ldr	r2, [r3, #12]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	440b      	add	r3, r1
 800b238:	441a      	add	r2, r3
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	60da      	str	r2, [r3, #12]
    // Format the new pool
    char* new_pool = (char*)node_to_alloc->pool;
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800b244:	2300      	movs	r3, #0
 800b246:	61fb      	str	r3, [r7, #28]
 800b248:	e007      	b.n	800b25a <mpool_calloc+0x154>
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4413      	add	r3, r2
 800b250:	2200      	movs	r2, #0
 800b252:	701a      	strb	r2, [r3, #0]
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	3301      	adds	r3, #1
 800b258:	61fb      	str	r3, [r7, #28]
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	68da      	ldr	r2, [r3, #12]
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	429a      	cmp	r2, r3
 800b262:	d8f2      	bhi.n	800b24a <mpool_calloc+0x144>
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	681b      	ldr	r3, [r3, #0]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	372c      	adds	r7, #44	; 0x2c
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd90      	pop	{r4, r7, pc}

0800b270 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3307      	adds	r3, #7
 800b27c:	f023 0307 	bic.w	r3, r3, #7
}
 800b280:	4618      	mov	r0, r3
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b087      	sub	sp, #28
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	441a      	add	r2, r3
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	601a      	str	r2, [r3, #0]
    node->next = next;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	609a      	str	r2, [r3, #8]
    node->size = size;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	60da      	str	r2, [r3, #12]
    
    return node;
 800b2ba:	697b      	ldr	r3, [r7, #20]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	371c      	adds	r7, #28
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d004      	beq.n	800b2e2 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	6892      	ldr	r2, [r2, #8]
 800b2e0:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d004      	beq.n	800b2f4 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	6852      	ldr	r2, [r2, #4]
 800b2f2:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	609a      	str	r2, [r3, #8]
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af00      	add	r7, sp, #0
 800b312:	6178      	str	r0, [r7, #20]
 800b314:	ed87 0a04 	vstr	s0, [r7, #16]
 800b318:	60f9      	str	r1, [r7, #12]
 800b31a:	60ba      	str	r2, [r7, #8]
 800b31c:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	68b9      	ldr	r1, [r7, #8]
 800b328:	6978      	ldr	r0, [r7, #20]
 800b32a:	f7ff fe1c 	bl	800af66 <leaf_pool_init>
    
    leaf->sampleRate = sr;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	601a      	str	r2, [r3, #0]

    leaf->blockSize = blocksize;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	609a      	str	r2, [r3, #8]
    
    leaf->invSampleRate = 1.0f/sr;
 800b33a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b33e:	ed97 7a04 	vldr	s14, [r7, #16]
 800b342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b352:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800b39c <LEAF_init+0x90>
 800b356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b364:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	2200      	movs	r2, #0
 800b36a:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	4a0c      	ldr	r2, [pc, #48]	; (800b3a0 <LEAF_init+0x94>)
 800b370:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 800b372:	2300      	movs	r3, #0
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	e009      	b.n	800b38c <LEAF_init+0x80>
        leaf->errorState[i] = 0;
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	330e      	adds	r3, #14
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	2200      	movs	r2, #0
 800b384:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	3301      	adds	r3, #1
 800b38a:	61fb      	str	r3, [r7, #28]
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	ddf2      	ble.n	800b378 <LEAF_init+0x6c>
}
 800b392:	bf00      	nop
 800b394:	3720      	adds	r7, #32
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	40c90fdb 	.word	0x40c90fdb
 800b3a0:	0800b3a5 	.word	0x0800b3a5

0800b3a4 <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 800b3c8:	78fb      	ldrb	r3, [r7, #3]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	330e      	adds	r3, #14
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3da:	78fa      	ldrb	r2, [r7, #3]
 800b3dc:	4611      	mov	r1, r2
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	4798      	blx	r3
}
 800b3e2:	bf00      	nop
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <__errno>:
 800b3ec:	4b01      	ldr	r3, [pc, #4]	; (800b3f4 <__errno+0x8>)
 800b3ee:	6818      	ldr	r0, [r3, #0]
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	20000014 	.word	0x20000014

0800b3f8 <__libc_init_array>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	4e0d      	ldr	r6, [pc, #52]	; (800b430 <__libc_init_array+0x38>)
 800b3fc:	4c0d      	ldr	r4, [pc, #52]	; (800b434 <__libc_init_array+0x3c>)
 800b3fe:	1ba4      	subs	r4, r4, r6
 800b400:	10a4      	asrs	r4, r4, #2
 800b402:	2500      	movs	r5, #0
 800b404:	42a5      	cmp	r5, r4
 800b406:	d109      	bne.n	800b41c <__libc_init_array+0x24>
 800b408:	4e0b      	ldr	r6, [pc, #44]	; (800b438 <__libc_init_array+0x40>)
 800b40a:	4c0c      	ldr	r4, [pc, #48]	; (800b43c <__libc_init_array+0x44>)
 800b40c:	f001 fba0 	bl	800cb50 <_init>
 800b410:	1ba4      	subs	r4, r4, r6
 800b412:	10a4      	asrs	r4, r4, #2
 800b414:	2500      	movs	r5, #0
 800b416:	42a5      	cmp	r5, r4
 800b418:	d105      	bne.n	800b426 <__libc_init_array+0x2e>
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b420:	4798      	blx	r3
 800b422:	3501      	adds	r5, #1
 800b424:	e7ee      	b.n	800b404 <__libc_init_array+0xc>
 800b426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b42a:	4798      	blx	r3
 800b42c:	3501      	adds	r5, #1
 800b42e:	e7f2      	b.n	800b416 <__libc_init_array+0x1e>
 800b430:	0800d2f4 	.word	0x0800d2f4
 800b434:	0800d2f4 	.word	0x0800d2f4
 800b438:	0800d2f4 	.word	0x0800d2f4
 800b43c:	0800d2f8 	.word	0x0800d2f8

0800b440 <memset>:
 800b440:	4402      	add	r2, r0
 800b442:	4603      	mov	r3, r0
 800b444:	4293      	cmp	r3, r2
 800b446:	d100      	bne.n	800b44a <memset+0xa>
 800b448:	4770      	bx	lr
 800b44a:	f803 1b01 	strb.w	r1, [r3], #1
 800b44e:	e7f9      	b.n	800b444 <memset+0x4>

0800b450 <expf>:
 800b450:	ee10 2a10 	vmov	r2, s0
 800b454:	f240 412a 	movw	r1, #1066	; 0x42a
 800b458:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800b45c:	428b      	cmp	r3, r1
 800b45e:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800b462:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800b466:	d92e      	bls.n	800b4c6 <expf+0x76>
 800b468:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800b46c:	d061      	beq.n	800b532 <expf+0xe2>
 800b46e:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800b472:	d304      	bcc.n	800b47e <expf+0x2e>
 800b474:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b478:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800b47c:	4770      	bx	lr
 800b47e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800b538 <expf+0xe8>
 800b482:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48a:	dd04      	ble.n	800b496 <expf+0x46>
 800b48c:	2000      	movs	r0, #0
 800b48e:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800b492:	f001 b98d 	b.w	800c7b0 <__math_oflowf>
 800b496:	eddf 7a29 	vldr	s15, [pc, #164]	; 800b53c <expf+0xec>
 800b49a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a2:	d504      	bpl.n	800b4ae <expf+0x5e>
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800b4aa:	f001 b975 	b.w	800c798 <__math_uflowf>
 800b4ae:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b540 <expf+0xf0>
 800b4b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ba:	d504      	bpl.n	800b4c6 <expf+0x76>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800b4c2:	f001 b96f 	b.w	800c7a4 <__math_may_uflowf>
 800b4c6:	491f      	ldr	r1, [pc, #124]	; (800b544 <expf+0xf4>)
 800b4c8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b4cc:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800b4d0:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800b4d4:	eeb0 4b47 	vmov.f64	d4, d7
 800b4d8:	eea5 4b06 	vfma.f64	d4, d5, d6
 800b4dc:	ec55 4b14 	vmov	r4, r5, d4
 800b4e0:	ee34 7b47 	vsub.f64	d7, d4, d7
 800b4e4:	f004 021f 	and.w	r2, r4, #31
 800b4e8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800b4ec:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b4f0:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800b4f4:	e9d2 4500 	ldrd	r4, r5, [r2]
 800b4f8:	eea6 0b07 	vfma.f64	d0, d6, d7
 800b4fc:	ee14 0a10 	vmov	r0, s8
 800b500:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800b504:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 800b508:	f04f 0b00 	mov.w	fp, #0
 800b50c:	eb1b 0204 	adds.w	r2, fp, r4
 800b510:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800b514:	eb4c 0305 	adc.w	r3, ip, r5
 800b518:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b51c:	ee27 7b07 	vmul.f64	d7, d7, d7
 800b520:	eea6 0b07 	vfma.f64	d0, d6, d7
 800b524:	ec43 2b17 	vmov	d7, r2, r3
 800b528:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b52c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b530:	e7a2      	b.n	800b478 <expf+0x28>
 800b532:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800b548 <expf+0xf8>
 800b536:	e79f      	b.n	800b478 <expf+0x28>
 800b538:	42b17217 	.word	0x42b17217
 800b53c:	c2cff1b4 	.word	0xc2cff1b4
 800b540:	c2ce8ecf 	.word	0xc2ce8ecf
 800b544:	0800cb80 	.word	0x0800cb80
 800b548:	00000000 	.word	0x00000000

0800b54c <fabsf>:
 800b54c:	ee10 3a10 	vmov	r3, s0
 800b550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b554:	ee00 3a10 	vmov	s0, r3
 800b558:	4770      	bx	lr
	...

0800b55c <floorf>:
 800b55c:	ee10 3a10 	vmov	r3, s0
 800b560:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b564:	0dca      	lsrs	r2, r1, #23
 800b566:	3a7f      	subs	r2, #127	; 0x7f
 800b568:	2a16      	cmp	r2, #22
 800b56a:	dc2a      	bgt.n	800b5c2 <floorf+0x66>
 800b56c:	2a00      	cmp	r2, #0
 800b56e:	da11      	bge.n	800b594 <floorf+0x38>
 800b570:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b5d4 <floorf+0x78>
 800b574:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b578:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b580:	dd05      	ble.n	800b58e <floorf+0x32>
 800b582:	2b00      	cmp	r3, #0
 800b584:	da23      	bge.n	800b5ce <floorf+0x72>
 800b586:	4a14      	ldr	r2, [pc, #80]	; (800b5d8 <floorf+0x7c>)
 800b588:	2900      	cmp	r1, #0
 800b58a:	bf18      	it	ne
 800b58c:	4613      	movne	r3, r2
 800b58e:	ee00 3a10 	vmov	s0, r3
 800b592:	4770      	bx	lr
 800b594:	4911      	ldr	r1, [pc, #68]	; (800b5dc <floorf+0x80>)
 800b596:	4111      	asrs	r1, r2
 800b598:	420b      	tst	r3, r1
 800b59a:	d0fa      	beq.n	800b592 <floorf+0x36>
 800b59c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b5d4 <floorf+0x78>
 800b5a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b5a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ac:	ddef      	ble.n	800b58e <floorf+0x32>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	bfbe      	ittt	lt
 800b5b2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b5b6:	fa40 f202 	asrlt.w	r2, r0, r2
 800b5ba:	189b      	addlt	r3, r3, r2
 800b5bc:	ea23 0301 	bic.w	r3, r3, r1
 800b5c0:	e7e5      	b.n	800b58e <floorf+0x32>
 800b5c2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b5c6:	d3e4      	bcc.n	800b592 <floorf+0x36>
 800b5c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b5cc:	4770      	bx	lr
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	e7dd      	b.n	800b58e <floorf+0x32>
 800b5d2:	bf00      	nop
 800b5d4:	7149f2ca 	.word	0x7149f2ca
 800b5d8:	bf800000 	.word	0xbf800000
 800b5dc:	007fffff 	.word	0x007fffff

0800b5e0 <logf>:
 800b5e0:	ee10 3a10 	vmov	r3, s0
 800b5e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b5e8:	b410      	push	{r4}
 800b5ea:	d057      	beq.n	800b69c <logf+0xbc>
 800b5ec:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800b5f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800b5f4:	d31a      	bcc.n	800b62c <logf+0x4c>
 800b5f6:	005a      	lsls	r2, r3, #1
 800b5f8:	d104      	bne.n	800b604 <logf+0x24>
 800b5fa:	2001      	movs	r0, #1
 800b5fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b600:	f001 b8dc 	b.w	800c7bc <__math_divzerof>
 800b604:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b608:	d045      	beq.n	800b696 <logf+0xb6>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	db02      	blt.n	800b614 <logf+0x34>
 800b60e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800b612:	d303      	bcc.n	800b61c <logf+0x3c>
 800b614:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b618:	f001 b8e0 	b.w	800c7dc <__math_invalidf>
 800b61c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800b6a4 <logf+0xc4>
 800b620:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b624:	ee10 3a10 	vmov	r3, s0
 800b628:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800b62c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800b630:	491d      	ldr	r1, [pc, #116]	; (800b6a8 <logf+0xc8>)
 800b632:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800b636:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800b63a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800b63e:	0dd4      	lsrs	r4, r2, #23
 800b640:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800b644:	05e4      	lsls	r4, r4, #23
 800b646:	ed90 5b00 	vldr	d5, [r0]
 800b64a:	1b1b      	subs	r3, r3, r4
 800b64c:	ee07 3a90 	vmov	s15, r3
 800b650:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b654:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b658:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800b65c:	ee26 3b06 	vmul.f64	d3, d6, d6
 800b660:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800b664:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b668:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800b66c:	15d2      	asrs	r2, r2, #23
 800b66e:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 800b672:	eea5 7b03 	vfma.f64	d7, d5, d3
 800b676:	eeb0 5b47 	vmov.f64	d5, d7
 800b67a:	ed90 0b02 	vldr	d0, [r0, #8]
 800b67e:	ee07 2a90 	vmov	s15, r2
 800b682:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b686:	eea7 0b04 	vfma.f64	d0, d7, d4
 800b68a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800b68e:	eea3 0b05 	vfma.f64	d0, d3, d5
 800b692:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b6ac <logf+0xcc>
 800b6a0:	e7f9      	b.n	800b696 <logf+0xb6>
 800b6a2:	bf00      	nop
 800b6a4:	4b000000 	.word	0x4b000000
 800b6a8:	0800ccc8 	.word	0x0800ccc8
 800b6ac:	00000000 	.word	0x00000000

0800b6b0 <checkint>:
 800b6b0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b6b4:	2b7e      	cmp	r3, #126	; 0x7e
 800b6b6:	dd10      	ble.n	800b6da <checkint+0x2a>
 800b6b8:	2b96      	cmp	r3, #150	; 0x96
 800b6ba:	dc0c      	bgt.n	800b6d6 <checkint+0x26>
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c6:	1e5a      	subs	r2, r3, #1
 800b6c8:	4202      	tst	r2, r0
 800b6ca:	d106      	bne.n	800b6da <checkint+0x2a>
 800b6cc:	4203      	tst	r3, r0
 800b6ce:	bf0c      	ite	eq
 800b6d0:	2002      	moveq	r0, #2
 800b6d2:	2001      	movne	r0, #1
 800b6d4:	4770      	bx	lr
 800b6d6:	2002      	movs	r0, #2
 800b6d8:	4770      	bx	lr
 800b6da:	2000      	movs	r0, #0
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <powf>:
 800b6e0:	ee10 1a10 	vmov	r1, s0
 800b6e4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b6e8:	ee10 4a90 	vmov	r4, s1
 800b6ec:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800b6f0:	0062      	lsls	r2, r4, #1
 800b6f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b6f6:	eef0 4a60 	vmov.f32	s9, s1
 800b6fa:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800b6fe:	4b92      	ldr	r3, [pc, #584]	; (800b948 <powf+0x268>)
 800b700:	d255      	bcs.n	800b7ae <powf+0xce>
 800b702:	4298      	cmp	r0, r3
 800b704:	d855      	bhi.n	800b7b2 <powf+0xd2>
 800b706:	2000      	movs	r0, #0
 800b708:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800b70c:	4a8f      	ldr	r2, [pc, #572]	; (800b94c <powf+0x26c>)
 800b70e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 800b712:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800b716:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800b71a:	0ddb      	lsrs	r3, r3, #23
 800b71c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800b720:	05db      	lsls	r3, r3, #23
 800b722:	ed94 6b00 	vldr	d6, [r4]
 800b726:	1ac9      	subs	r1, r1, r3
 800b728:	ee07 1a90 	vmov	s15, r1
 800b72c:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 800b730:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b734:	eea6 2b07 	vfma.f64	d2, d6, d7
 800b738:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 800b73c:	ee22 6b02 	vmul.f64	d6, d2, d2
 800b740:	eea2 7b05 	vfma.f64	d7, d2, d5
 800b744:	15db      	asrs	r3, r3, #23
 800b746:	ed94 5b02 	vldr	d5, [r4, #8]
 800b74a:	ee00 3a10 	vmov	s0, r3
 800b74e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800b752:	ee30 0b05 	vadd.f64	d0, d0, d5
 800b756:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 800b75a:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 800b75e:	eea2 0b05 	vfma.f64	d0, d2, d5
 800b762:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 800b766:	eea2 5b03 	vfma.f64	d5, d2, d3
 800b76a:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b76e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800b772:	eea7 0b06 	vfma.f64	d0, d7, d6
 800b776:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 800b77a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b77e:	ee10 3a90 	vmov	r3, s1
 800b782:	2500      	movs	r5, #0
 800b784:	0bda      	lsrs	r2, r3, #15
 800b786:	2300      	movs	r3, #0
 800b788:	b292      	uxth	r2, r2
 800b78a:	f248 04be 	movw	r4, #32958	; 0x80be
 800b78e:	429d      	cmp	r5, r3
 800b790:	bf08      	it	eq
 800b792:	4294      	cmpeq	r4, r2
 800b794:	f080 8094 	bcs.w	800b8c0 <powf+0x1e0>
 800b798:	ed9f 7b65 	vldr	d7, [pc, #404]	; 800b930 <powf+0x250>
 800b79c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a4:	dd76      	ble.n	800b894 <powf+0x1b4>
 800b7a6:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800b7aa:	f001 b801 	b.w	800c7b0 <__math_oflowf>
 800b7ae:	4298      	cmp	r0, r3
 800b7b0:	d92d      	bls.n	800b80e <powf+0x12e>
 800b7b2:	b952      	cbnz	r2, 800b7ca <powf+0xea>
 800b7b4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800b7be:	f240 80ae 	bls.w	800b91e <powf+0x23e>
 800b7c2:	ee30 0a24 	vadd.f32	s0, s0, s9
 800b7c6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b7ca:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b7ce:	d105      	bne.n	800b7dc <powf+0xfc>
 800b7d0:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800b7d4:	0064      	lsls	r4, r4, #1
 800b7d6:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800b7da:	e7f0      	b.n	800b7be <powf+0xde>
 800b7dc:	004b      	lsls	r3, r1, #1
 800b7de:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800b7e2:	d8ee      	bhi.n	800b7c2 <powf+0xe2>
 800b7e4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800b7e8:	d1eb      	bne.n	800b7c2 <powf+0xe2>
 800b7ea:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b7ee:	f000 8096 	beq.w	800b91e <powf+0x23e>
 800b7f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b7f6:	ea6f 0404 	mvn.w	r4, r4
 800b7fa:	bf34      	ite	cc
 800b7fc:	2300      	movcc	r3, #0
 800b7fe:	2301      	movcs	r3, #1
 800b800:	0fe4      	lsrs	r4, r4, #31
 800b802:	42a3      	cmp	r3, r4
 800b804:	f040 808e 	bne.w	800b924 <powf+0x244>
 800b808:	ee24 0aa4 	vmul.f32	s0, s9, s9
 800b80c:	e7db      	b.n	800b7c6 <powf+0xe6>
 800b80e:	004d      	lsls	r5, r1, #1
 800b810:	1e6a      	subs	r2, r5, #1
 800b812:	429a      	cmp	r2, r3
 800b814:	d91b      	bls.n	800b84e <powf+0x16e>
 800b816:	2900      	cmp	r1, #0
 800b818:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b81c:	da0e      	bge.n	800b83c <powf+0x15c>
 800b81e:	ee10 0a90 	vmov	r0, s1
 800b822:	f7ff ff45 	bl	800b6b0 <checkint>
 800b826:	2801      	cmp	r0, #1
 800b828:	d108      	bne.n	800b83c <powf+0x15c>
 800b82a:	eeb1 0a40 	vneg.f32	s0, s0
 800b82e:	b93d      	cbnz	r5, 800b840 <powf+0x160>
 800b830:	2c00      	cmp	r4, #0
 800b832:	dac8      	bge.n	800b7c6 <powf+0xe6>
 800b834:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800b838:	f000 bfc0 	b.w	800c7bc <__math_divzerof>
 800b83c:	2000      	movs	r0, #0
 800b83e:	e7f6      	b.n	800b82e <powf+0x14e>
 800b840:	2c00      	cmp	r4, #0
 800b842:	dac0      	bge.n	800b7c6 <powf+0xe6>
 800b844:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b848:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b84c:	e7bb      	b.n	800b7c6 <powf+0xe6>
 800b84e:	2900      	cmp	r1, #0
 800b850:	da1e      	bge.n	800b890 <powf+0x1b0>
 800b852:	ee10 0a90 	vmov	r0, s1
 800b856:	f7ff ff2b 	bl	800b6b0 <checkint>
 800b85a:	b918      	cbnz	r0, 800b864 <powf+0x184>
 800b85c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800b860:	f000 bfbc 	b.w	800c7dc <__math_invalidf>
 800b864:	2801      	cmp	r0, #1
 800b866:	bf0c      	ite	eq
 800b868:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b86c:	2000      	movne	r0, #0
 800b86e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b872:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b876:	f4bf af47 	bcs.w	800b708 <powf+0x28>
 800b87a:	eddf 0a35 	vldr	s1, [pc, #212]	; 800b950 <powf+0x270>
 800b87e:	ee20 0a20 	vmul.f32	s0, s0, s1
 800b882:	ee10 3a10 	vmov	r3, s0
 800b886:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b88a:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800b88e:	e73b      	b.n	800b708 <powf+0x28>
 800b890:	2000      	movs	r0, #0
 800b892:	e7ee      	b.n	800b872 <powf+0x192>
 800b894:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800b938 <powf+0x258>
 800b898:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a0:	d803      	bhi.n	800b8aa <powf+0x1ca>
 800b8a2:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800b8a6:	f000 bf77 	b.w	800c798 <__math_uflowf>
 800b8aa:	ed9f 7b25 	vldr	d7, [pc, #148]	; 800b940 <powf+0x260>
 800b8ae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b6:	d503      	bpl.n	800b8c0 <powf+0x1e0>
 800b8b8:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 800b8bc:	f000 bf72 	b.w	800c7a4 <__math_may_uflowf>
 800b8c0:	4924      	ldr	r1, [pc, #144]	; (800b954 <powf+0x274>)
 800b8c2:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 800b8c6:	ee30 6b07 	vadd.f64	d6, d0, d7
 800b8ca:	ec55 4b16 	vmov	r4, r5, d6
 800b8ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b8d2:	f004 021f 	and.w	r2, r4, #31
 800b8d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b8da:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 800b8de:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b8e2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b8e6:	e9d2 6700 	ldrd	r6, r7, [r2]
 800b8ea:	eea0 7b06 	vfma.f64	d7, d0, d6
 800b8ee:	1824      	adds	r4, r4, r0
 800b8f0:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800b8f4:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	1982      	adds	r2, r0, r6
 800b8fc:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 800b900:	eb41 0307 	adc.w	r3, r1, r7
 800b904:	eea0 6b05 	vfma.f64	d6, d0, d5
 800b908:	ee20 0b00 	vmul.f64	d0, d0, d0
 800b90c:	eea6 7b00 	vfma.f64	d7, d6, d0
 800b910:	ec43 2b16 	vmov	d6, r2, r3
 800b914:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b918:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b91c:	e753      	b.n	800b7c6 <powf+0xe6>
 800b91e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b922:	e750      	b.n	800b7c6 <powf+0xe6>
 800b924:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b958 <powf+0x278>
 800b928:	e74d      	b.n	800b7c6 <powf+0xe6>
 800b92a:	bf00      	nop
 800b92c:	f3af 8000 	nop.w
 800b930:	ffd1d571 	.word	0xffd1d571
 800b934:	405fffff 	.word	0x405fffff
 800b938:	00000000 	.word	0x00000000
 800b93c:	c062c000 	.word	0xc062c000
 800b940:	00000000 	.word	0x00000000
 800b944:	c062a000 	.word	0xc062a000
 800b948:	fefffffe 	.word	0xfefffffe
 800b94c:	0800cde8 	.word	0x0800cde8
 800b950:	4b000000 	.word	0x4b000000
 800b954:	0800cb80 	.word	0x0800cb80
 800b958:	00000000 	.word	0x00000000

0800b95c <tanf>:
 800b95c:	ee10 3a10 	vmov	r3, s0
 800b960:	b507      	push	{r0, r1, r2, lr}
 800b962:	4a10      	ldr	r2, [pc, #64]	; (800b9a4 <tanf+0x48>)
 800b964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b968:	4293      	cmp	r3, r2
 800b96a:	dc05      	bgt.n	800b978 <tanf+0x1c>
 800b96c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800b9a8 <tanf+0x4c>
 800b970:	2001      	movs	r0, #1
 800b972:	f000 fe13 	bl	800c59c <__kernel_tanf>
 800b976:	e004      	b.n	800b982 <tanf+0x26>
 800b978:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b97c:	db04      	blt.n	800b988 <tanf+0x2c>
 800b97e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b982:	b003      	add	sp, #12
 800b984:	f85d fb04 	ldr.w	pc, [sp], #4
 800b988:	4668      	mov	r0, sp
 800b98a:	f000 f9e7 	bl	800bd5c <__ieee754_rem_pio2f>
 800b98e:	0040      	lsls	r0, r0, #1
 800b990:	f000 0002 	and.w	r0, r0, #2
 800b994:	f1c0 0001 	rsb	r0, r0, #1
 800b998:	eddd 0a01 	vldr	s1, [sp, #4]
 800b99c:	ed9d 0a00 	vldr	s0, [sp]
 800b9a0:	e7e7      	b.n	800b972 <tanf+0x16>
 800b9a2:	bf00      	nop
 800b9a4:	3f490fda 	.word	0x3f490fda
 800b9a8:	00000000 	.word	0x00000000

0800b9ac <tanhf>:
 800b9ac:	b510      	push	{r4, lr}
 800b9ae:	ee10 4a10 	vmov	r4, s0
 800b9b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b9b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b9ba:	ed2d 8b02 	vpush	{d8}
 800b9be:	eef0 7a40 	vmov.f32	s15, s0
 800b9c2:	db0c      	blt.n	800b9de <tanhf+0x32>
 800b9c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9c8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b9cc:	2c00      	cmp	r4, #0
 800b9ce:	bfac      	ite	ge
 800b9d0:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800b9d4:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800b9d8:	ecbd 8b02 	vpop	{d8}
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	4a1b      	ldr	r2, [pc, #108]	; (800ba4c <tanhf+0xa0>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	dc30      	bgt.n	800ba46 <tanhf+0x9a>
 800b9e4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800b9e8:	da06      	bge.n	800b9f8 <tanhf+0x4c>
 800b9ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b9ee:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b9f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b9f6:	e7ef      	b.n	800b9d8 <tanhf+0x2c>
 800b9f8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b9fc:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800ba00:	db12      	blt.n	800ba28 <tanhf+0x7c>
 800ba02:	f7ff fda3 	bl	800b54c <fabsf>
 800ba06:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ba0a:	f000 ff01 	bl	800c810 <expm1f>
 800ba0e:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ba12:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800ba16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba1e:	2c00      	cmp	r4, #0
 800ba20:	bfb8      	it	lt
 800ba22:	eeb1 0a40 	vneglt.f32	s0, s0
 800ba26:	e7d7      	b.n	800b9d8 <tanhf+0x2c>
 800ba28:	f7ff fd90 	bl	800b54c <fabsf>
 800ba2c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800ba30:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ba34:	f000 feec 	bl	800c810 <expm1f>
 800ba38:	ee70 7a08 	vadd.f32	s15, s0, s16
 800ba3c:	eeb1 7a40 	vneg.f32	s14, s0
 800ba40:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ba44:	e7eb      	b.n	800ba1e <tanhf+0x72>
 800ba46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba4a:	e7e8      	b.n	800ba1e <tanhf+0x72>
 800ba4c:	41afffff 	.word	0x41afffff

0800ba50 <log10f>:
 800ba50:	b500      	push	{lr}
 800ba52:	ed2d 8b02 	vpush	{d8}
 800ba56:	b08b      	sub	sp, #44	; 0x2c
 800ba58:	eeb0 8a40 	vmov.f32	s16, s0
 800ba5c:	f000 f928 	bl	800bcb0 <__ieee754_log10f>
 800ba60:	4b2f      	ldr	r3, [pc, #188]	; (800bb20 <log10f+0xd0>)
 800ba62:	f993 3000 	ldrsb.w	r3, [r3]
 800ba66:	1c5a      	adds	r2, r3, #1
 800ba68:	d055      	beq.n	800bb16 <log10f+0xc6>
 800ba6a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba72:	d650      	bvs.n	800bb16 <log10f+0xc6>
 800ba74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ba78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba7c:	d84b      	bhi.n	800bb16 <log10f+0xc6>
 800ba7e:	4a29      	ldr	r2, [pc, #164]	; (800bb24 <log10f+0xd4>)
 800ba80:	9201      	str	r2, [sp, #4]
 800ba82:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 800ba86:	2200      	movs	r2, #0
 800ba88:	9208      	str	r2, [sp, #32]
 800ba8a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba92:	b993      	cbnz	r3, 800baba <log10f+0x6a>
 800ba94:	4924      	ldr	r1, [pc, #144]	; (800bb28 <log10f+0xd8>)
 800ba96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ba9a:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800ba9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800baa6:	d025      	beq.n	800baf4 <log10f+0xa4>
 800baa8:	2201      	movs	r2, #1
 800baaa:	2b02      	cmp	r3, #2
 800baac:	9200      	str	r2, [sp, #0]
 800baae:	d116      	bne.n	800bade <log10f+0x8e>
 800bab0:	f7ff fc9c 	bl	800b3ec <__errno>
 800bab4:	2321      	movs	r3, #33	; 0x21
 800bab6:	6003      	str	r3, [r0, #0]
 800bab8:	e016      	b.n	800bae8 <log10f+0x98>
 800baba:	491c      	ldr	r1, [pc, #112]	; (800bb2c <log10f+0xdc>)
 800babc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bac0:	2000      	movs	r0, #0
 800bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800baca:	d1ed      	bne.n	800baa8 <log10f+0x58>
 800bacc:	2202      	movs	r2, #2
 800bace:	4293      	cmp	r3, r2
 800bad0:	9200      	str	r2, [sp, #0]
 800bad2:	d111      	bne.n	800baf8 <log10f+0xa8>
 800bad4:	f7ff fc8a 	bl	800b3ec <__errno>
 800bad8:	2322      	movs	r3, #34	; 0x22
 800bada:	6003      	str	r3, [r0, #0]
 800badc:	e011      	b.n	800bb02 <log10f+0xb2>
 800bade:	4668      	mov	r0, sp
 800bae0:	f000 fe8b 	bl	800c7fa <matherr>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d0e3      	beq.n	800bab0 <log10f+0x60>
 800bae8:	4811      	ldr	r0, [pc, #68]	; (800bb30 <log10f+0xe0>)
 800baea:	f000 fe89 	bl	800c800 <nan>
 800baee:	ed8d 0b06 	vstr	d0, [sp, #24]
 800baf2:	e006      	b.n	800bb02 <log10f+0xb2>
 800baf4:	2302      	movs	r3, #2
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	4668      	mov	r0, sp
 800bafa:	f000 fe7e 	bl	800c7fa <matherr>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d0e8      	beq.n	800bad4 <log10f+0x84>
 800bb02:	9b08      	ldr	r3, [sp, #32]
 800bb04:	b11b      	cbz	r3, 800bb0e <log10f+0xbe>
 800bb06:	f7ff fc71 	bl	800b3ec <__errno>
 800bb0a:	9b08      	ldr	r3, [sp, #32]
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	ed9d 0b06 	vldr	d0, [sp, #24]
 800bb12:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bb16:	b00b      	add	sp, #44	; 0x2c
 800bb18:	ecbd 8b02 	vpop	{d8}
 800bb1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb20:	20000078 	.word	0x20000078
 800bb24:	0800cf10 	.word	0x0800cf10
 800bb28:	c7efffff 	.word	0xc7efffff
 800bb2c:	fff00000 	.word	0xfff00000
 800bb30:	0800cf16 	.word	0x0800cf16
 800bb34:	00000000 	.word	0x00000000

0800bb38 <sinhf>:
 800bb38:	b530      	push	{r4, r5, lr}
 800bb3a:	ed2d 8b02 	vpush	{d8}
 800bb3e:	4c32      	ldr	r4, [pc, #200]	; (800bc08 <sinhf+0xd0>)
 800bb40:	b08b      	sub	sp, #44	; 0x2c
 800bb42:	eef0 8a40 	vmov.f32	s17, s0
 800bb46:	f000 fa35 	bl	800bfb4 <__ieee754_sinhf>
 800bb4a:	f994 3000 	ldrsb.w	r3, [r4]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	eeb0 8a40 	vmov.f32	s16, s0
 800bb54:	d030      	beq.n	800bbb8 <sinhf+0x80>
 800bb56:	f000 ff85 	bl	800ca64 <finitef>
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	bb60      	cbnz	r0, 800bbb8 <sinhf+0x80>
 800bb5e:	eeb0 0a68 	vmov.f32	s0, s17
 800bb62:	f000 ff7f 	bl	800ca64 <finitef>
 800bb66:	b338      	cbz	r0, 800bbb8 <sinhf+0x80>
 800bb68:	2303      	movs	r3, #3
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	4b27      	ldr	r3, [pc, #156]	; (800bc0c <sinhf+0xd4>)
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 800bb74:	f994 3000 	ldrsb.w	r3, [r4]
 800bb78:	9508      	str	r5, [sp, #32]
 800bb7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb82:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800bb86:	b9eb      	cbnz	r3, 800bbc4 <sinhf+0x8c>
 800bb88:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800bbe8 <sinhf+0xb0>
 800bb8c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 800bbf0 <sinhf+0xb8>
 800bb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb94:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800bb98:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb9c:	4668      	mov	r0, sp
 800bb9e:	f000 fe2c 	bl	800c7fa <matherr>
 800bba2:	b1d8      	cbz	r0, 800bbdc <sinhf+0xa4>
 800bba4:	9b08      	ldr	r3, [sp, #32]
 800bba6:	b11b      	cbz	r3, 800bbb0 <sinhf+0x78>
 800bba8:	f7ff fc20 	bl	800b3ec <__errno>
 800bbac:	9b08      	ldr	r3, [sp, #32]
 800bbae:	6003      	str	r3, [r0, #0]
 800bbb0:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bbb4:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 800bbb8:	eeb0 0a48 	vmov.f32	s0, s16
 800bbbc:	b00b      	add	sp, #44	; 0x2c
 800bbbe:	ecbd 8b02 	vpop	{d8}
 800bbc2:	bd30      	pop	{r4, r5, pc}
 800bbc4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800bbf8 <sinhf+0xc0>
 800bbc8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800bc00 <sinhf+0xc8>
 800bbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd0:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bbda:	d1df      	bne.n	800bb9c <sinhf+0x64>
 800bbdc:	f7ff fc06 	bl	800b3ec <__errno>
 800bbe0:	2322      	movs	r3, #34	; 0x22
 800bbe2:	6003      	str	r3, [r0, #0]
 800bbe4:	e7de      	b.n	800bba4 <sinhf+0x6c>
 800bbe6:	bf00      	nop
 800bbe8:	e0000000 	.word	0xe0000000
 800bbec:	47efffff 	.word	0x47efffff
 800bbf0:	e0000000 	.word	0xe0000000
 800bbf4:	c7efffff 	.word	0xc7efffff
 800bbf8:	00000000 	.word	0x00000000
 800bbfc:	7ff00000 	.word	0x7ff00000
 800bc00:	00000000 	.word	0x00000000
 800bc04:	fff00000 	.word	0xfff00000
 800bc08:	20000078 	.word	0x20000078
 800bc0c:	0800cf17 	.word	0x0800cf17

0800bc10 <sqrtf>:
 800bc10:	b500      	push	{lr}
 800bc12:	ed2d 8b02 	vpush	{d8}
 800bc16:	b08b      	sub	sp, #44	; 0x2c
 800bc18:	eeb0 8a40 	vmov.f32	s16, s0
 800bc1c:	f000 fa38 	bl	800c090 <__ieee754_sqrtf>
 800bc20:	4b21      	ldr	r3, [pc, #132]	; (800bca8 <sqrtf+0x98>)
 800bc22:	f993 3000 	ldrsb.w	r3, [r3]
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	d028      	beq.n	800bc7c <sqrtf+0x6c>
 800bc2a:	eeb4 8a48 	vcmp.f32	s16, s16
 800bc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc32:	d623      	bvs.n	800bc7c <sqrtf+0x6c>
 800bc34:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3c:	d51e      	bpl.n	800bc7c <sqrtf+0x6c>
 800bc3e:	2201      	movs	r2, #1
 800bc40:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800bc44:	9200      	str	r2, [sp, #0]
 800bc46:	4a19      	ldr	r2, [pc, #100]	; (800bcac <sqrtf+0x9c>)
 800bc48:	9201      	str	r2, [sp, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	9208      	str	r2, [sp, #32]
 800bc4e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bc52:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc56:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800bca0 <sqrtf+0x90>
 800bc5a:	b9a3      	cbnz	r3, 800bc86 <sqrtf+0x76>
 800bc5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc60:	4668      	mov	r0, sp
 800bc62:	f000 fdca 	bl	800c7fa <matherr>
 800bc66:	b1a0      	cbz	r0, 800bc92 <sqrtf+0x82>
 800bc68:	9b08      	ldr	r3, [sp, #32]
 800bc6a:	b11b      	cbz	r3, 800bc74 <sqrtf+0x64>
 800bc6c:	f7ff fbbe 	bl	800b3ec <__errno>
 800bc70:	9b08      	ldr	r3, [sp, #32]
 800bc72:	6003      	str	r3, [r0, #0]
 800bc74:	ed9d 0b06 	vldr	d0, [sp, #24]
 800bc78:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bc7c:	b00b      	add	sp, #44	; 0x2c
 800bc7e:	ecbd 8b02 	vpop	{d8}
 800bc82:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800bc8c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800bc90:	d1e6      	bne.n	800bc60 <sqrtf+0x50>
 800bc92:	f7ff fbab 	bl	800b3ec <__errno>
 800bc96:	2321      	movs	r3, #33	; 0x21
 800bc98:	6003      	str	r3, [r0, #0]
 800bc9a:	e7e5      	b.n	800bc68 <sqrtf+0x58>
 800bc9c:	f3af 8000 	nop.w
	...
 800bca8:	20000078 	.word	0x20000078
 800bcac:	0800cf1d 	.word	0x0800cf1d

0800bcb0 <__ieee754_log10f>:
 800bcb0:	b508      	push	{r3, lr}
 800bcb2:	ee10 2a10 	vmov	r2, s0
 800bcb6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800bcba:	ed2d 8b02 	vpush	{d8}
 800bcbe:	d108      	bne.n	800bcd2 <__ieee754_log10f+0x22>
 800bcc0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800bd44 <__ieee754_log10f+0x94>
 800bcc4:	eddf 7a20 	vldr	s15, [pc, #128]	; 800bd48 <__ieee754_log10f+0x98>
 800bcc8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bccc:	ecbd 8b02 	vpop	{d8}
 800bcd0:	bd08      	pop	{r3, pc}
 800bcd2:	2a00      	cmp	r2, #0
 800bcd4:	da02      	bge.n	800bcdc <__ieee754_log10f+0x2c>
 800bcd6:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bcda:	e7f3      	b.n	800bcc4 <__ieee754_log10f+0x14>
 800bcdc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bce0:	db02      	blt.n	800bce8 <__ieee754_log10f+0x38>
 800bce2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bce6:	e7f1      	b.n	800bccc <__ieee754_log10f+0x1c>
 800bce8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800bcec:	bfbf      	itttt	lt
 800bcee:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 800bd4c <__ieee754_log10f+0x9c>
 800bcf2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800bcf6:	f06f 0118 	mvnlt.w	r1, #24
 800bcfa:	ee17 2a90 	vmovlt	r2, s15
 800bcfe:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800bd02:	bfa8      	it	ge
 800bd04:	2100      	movge	r1, #0
 800bd06:	3b7f      	subs	r3, #127	; 0x7f
 800bd08:	440b      	add	r3, r1
 800bd0a:	0fd9      	lsrs	r1, r3, #31
 800bd0c:	440b      	add	r3, r1
 800bd0e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800bd12:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800bd1e:	ee00 3a10 	vmov	s0, r3
 800bd22:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800bd26:	f7ff fc5b 	bl	800b5e0 <logf>
 800bd2a:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bd50 <__ieee754_log10f+0xa0>
 800bd2e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bd32:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bd54 <__ieee754_log10f+0xa4>
 800bd36:	eea8 0a27 	vfma.f32	s0, s16, s15
 800bd3a:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bd58 <__ieee754_log10f+0xa8>
 800bd3e:	eea8 0a27 	vfma.f32	s0, s16, s15
 800bd42:	e7c3      	b.n	800bccc <__ieee754_log10f+0x1c>
 800bd44:	cc000000 	.word	0xcc000000
 800bd48:	00000000 	.word	0x00000000
 800bd4c:	4c000000 	.word	0x4c000000
 800bd50:	3ede5bd9 	.word	0x3ede5bd9
 800bd54:	355427db 	.word	0x355427db
 800bd58:	3e9a2080 	.word	0x3e9a2080

0800bd5c <__ieee754_rem_pio2f>:
 800bd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd5e:	ee10 6a10 	vmov	r6, s0
 800bd62:	4b86      	ldr	r3, [pc, #536]	; (800bf7c <__ieee754_rem_pio2f+0x220>)
 800bd64:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800bd68:	429c      	cmp	r4, r3
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	dc05      	bgt.n	800bd7c <__ieee754_rem_pio2f+0x20>
 800bd70:	2300      	movs	r3, #0
 800bd72:	ed85 0a00 	vstr	s0, [r5]
 800bd76:	6043      	str	r3, [r0, #4]
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e020      	b.n	800bdbe <__ieee754_rem_pio2f+0x62>
 800bd7c:	4b80      	ldr	r3, [pc, #512]	; (800bf80 <__ieee754_rem_pio2f+0x224>)
 800bd7e:	429c      	cmp	r4, r3
 800bd80:	dc38      	bgt.n	800bdf4 <__ieee754_rem_pio2f+0x98>
 800bd82:	2e00      	cmp	r6, #0
 800bd84:	f024 040f 	bic.w	r4, r4, #15
 800bd88:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800bf84 <__ieee754_rem_pio2f+0x228>
 800bd8c:	4b7e      	ldr	r3, [pc, #504]	; (800bf88 <__ieee754_rem_pio2f+0x22c>)
 800bd8e:	dd18      	ble.n	800bdc2 <__ieee754_rem_pio2f+0x66>
 800bd90:	429c      	cmp	r4, r3
 800bd92:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bd96:	bf09      	itett	eq
 800bd98:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800bf8c <__ieee754_rem_pio2f+0x230>
 800bd9c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800bf90 <__ieee754_rem_pio2f+0x234>
 800bda0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bda4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800bf94 <__ieee754_rem_pio2f+0x238>
 800bda8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bdac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bdb0:	edc0 6a00 	vstr	s13, [r0]
 800bdb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdb8:	edc0 7a01 	vstr	s15, [r0, #4]
 800bdbc:	2001      	movs	r0, #1
 800bdbe:	b007      	add	sp, #28
 800bdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bdc8:	bf09      	itett	eq
 800bdca:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800bf8c <__ieee754_rem_pio2f+0x230>
 800bdce:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800bf90 <__ieee754_rem_pio2f+0x234>
 800bdd2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bdd6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800bf94 <__ieee754_rem_pio2f+0x238>
 800bdda:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bdde:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bde2:	edc0 6a00 	vstr	s13, [r0]
 800bde6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdea:	edc0 7a01 	vstr	s15, [r0, #4]
 800bdee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdf2:	e7e4      	b.n	800bdbe <__ieee754_rem_pio2f+0x62>
 800bdf4:	4b68      	ldr	r3, [pc, #416]	; (800bf98 <__ieee754_rem_pio2f+0x23c>)
 800bdf6:	429c      	cmp	r4, r3
 800bdf8:	dc71      	bgt.n	800bede <__ieee754_rem_pio2f+0x182>
 800bdfa:	f7ff fba7 	bl	800b54c <fabsf>
 800bdfe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bf9c <__ieee754_rem_pio2f+0x240>
 800be02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800be06:	eee0 7a07 	vfma.f32	s15, s0, s14
 800be0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be0e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800be12:	ee17 0a90 	vmov	r0, s15
 800be16:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bf84 <__ieee754_rem_pio2f+0x228>
 800be1a:	eeb1 7a46 	vneg.f32	s14, s12
 800be1e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800be22:	281f      	cmp	r0, #31
 800be24:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bf90 <__ieee754_rem_pio2f+0x234>
 800be28:	ee66 7a27 	vmul.f32	s15, s12, s15
 800be2c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800be30:	ee16 3a90 	vmov	r3, s13
 800be34:	dc1c      	bgt.n	800be70 <__ieee754_rem_pio2f+0x114>
 800be36:	1e47      	subs	r7, r0, #1
 800be38:	4959      	ldr	r1, [pc, #356]	; (800bfa0 <__ieee754_rem_pio2f+0x244>)
 800be3a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800be3e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800be42:	428a      	cmp	r2, r1
 800be44:	d014      	beq.n	800be70 <__ieee754_rem_pio2f+0x114>
 800be46:	602b      	str	r3, [r5, #0]
 800be48:	ed95 7a00 	vldr	s14, [r5]
 800be4c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800be50:	2e00      	cmp	r6, #0
 800be52:	ee30 0a67 	vsub.f32	s0, s0, s15
 800be56:	ed85 0a01 	vstr	s0, [r5, #4]
 800be5a:	dab0      	bge.n	800bdbe <__ieee754_rem_pio2f+0x62>
 800be5c:	eeb1 7a47 	vneg.f32	s14, s14
 800be60:	eeb1 0a40 	vneg.f32	s0, s0
 800be64:	ed85 7a00 	vstr	s14, [r5]
 800be68:	ed85 0a01 	vstr	s0, [r5, #4]
 800be6c:	4240      	negs	r0, r0
 800be6e:	e7a6      	b.n	800bdbe <__ieee754_rem_pio2f+0x62>
 800be70:	15e4      	asrs	r4, r4, #23
 800be72:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800be76:	1aa2      	subs	r2, r4, r2
 800be78:	2a08      	cmp	r2, #8
 800be7a:	dde4      	ble.n	800be46 <__ieee754_rem_pio2f+0xea>
 800be7c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800bf8c <__ieee754_rem_pio2f+0x230>
 800be80:	eef0 6a40 	vmov.f32	s13, s0
 800be84:	eee7 6a27 	vfma.f32	s13, s14, s15
 800be88:	ee30 0a66 	vsub.f32	s0, s0, s13
 800be8c:	eea7 0a27 	vfma.f32	s0, s14, s15
 800be90:	eddf 7a40 	vldr	s15, [pc, #256]	; 800bf94 <__ieee754_rem_pio2f+0x238>
 800be94:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800be98:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800be9c:	eef0 7a40 	vmov.f32	s15, s0
 800bea0:	ee15 3a90 	vmov	r3, s11
 800bea4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bea8:	1aa4      	subs	r4, r4, r2
 800beaa:	2c19      	cmp	r4, #25
 800beac:	dc04      	bgt.n	800beb8 <__ieee754_rem_pio2f+0x15c>
 800beae:	edc5 5a00 	vstr	s11, [r5]
 800beb2:	eeb0 0a66 	vmov.f32	s0, s13
 800beb6:	e7c7      	b.n	800be48 <__ieee754_rem_pio2f+0xec>
 800beb8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bfa4 <__ieee754_rem_pio2f+0x248>
 800bebc:	eeb0 0a66 	vmov.f32	s0, s13
 800bec0:	eea7 0a25 	vfma.f32	s0, s14, s11
 800bec4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bec8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800becc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800bfa8 <__ieee754_rem_pio2f+0x24c>
 800bed0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800bed4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bed8:	ed85 7a00 	vstr	s14, [r5]
 800bedc:	e7b4      	b.n	800be48 <__ieee754_rem_pio2f+0xec>
 800bede:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800bee2:	db06      	blt.n	800bef2 <__ieee754_rem_pio2f+0x196>
 800bee4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bee8:	edc0 7a01 	vstr	s15, [r0, #4]
 800beec:	edc0 7a00 	vstr	s15, [r0]
 800bef0:	e742      	b.n	800bd78 <__ieee754_rem_pio2f+0x1c>
 800bef2:	15e2      	asrs	r2, r4, #23
 800bef4:	3a86      	subs	r2, #134	; 0x86
 800bef6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800befa:	ee07 3a90 	vmov	s15, r3
 800befe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bf02:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800bfac <__ieee754_rem_pio2f+0x250>
 800bf06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bf0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf0e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bf12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bf16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bf1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bf1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf22:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bf26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bf2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bf2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf32:	edcd 7a05 	vstr	s15, [sp, #20]
 800bf36:	d11e      	bne.n	800bf76 <__ieee754_rem_pio2f+0x21a>
 800bf38:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf40:	bf0c      	ite	eq
 800bf42:	2301      	moveq	r3, #1
 800bf44:	2302      	movne	r3, #2
 800bf46:	491a      	ldr	r1, [pc, #104]	; (800bfb0 <__ieee754_rem_pio2f+0x254>)
 800bf48:	9101      	str	r1, [sp, #4]
 800bf4a:	2102      	movs	r1, #2
 800bf4c:	9100      	str	r1, [sp, #0]
 800bf4e:	a803      	add	r0, sp, #12
 800bf50:	4629      	mov	r1, r5
 800bf52:	f000 f8a1 	bl	800c098 <__kernel_rem_pio2f>
 800bf56:	2e00      	cmp	r6, #0
 800bf58:	f6bf af31 	bge.w	800bdbe <__ieee754_rem_pio2f+0x62>
 800bf5c:	edd5 7a00 	vldr	s15, [r5]
 800bf60:	eef1 7a67 	vneg.f32	s15, s15
 800bf64:	edc5 7a00 	vstr	s15, [r5]
 800bf68:	edd5 7a01 	vldr	s15, [r5, #4]
 800bf6c:	eef1 7a67 	vneg.f32	s15, s15
 800bf70:	edc5 7a01 	vstr	s15, [r5, #4]
 800bf74:	e77a      	b.n	800be6c <__ieee754_rem_pio2f+0x110>
 800bf76:	2303      	movs	r3, #3
 800bf78:	e7e5      	b.n	800bf46 <__ieee754_rem_pio2f+0x1ea>
 800bf7a:	bf00      	nop
 800bf7c:	3f490fd8 	.word	0x3f490fd8
 800bf80:	4016cbe3 	.word	0x4016cbe3
 800bf84:	3fc90f80 	.word	0x3fc90f80
 800bf88:	3fc90fd0 	.word	0x3fc90fd0
 800bf8c:	37354400 	.word	0x37354400
 800bf90:	37354443 	.word	0x37354443
 800bf94:	2e85a308 	.word	0x2e85a308
 800bf98:	43490f80 	.word	0x43490f80
 800bf9c:	3f22f984 	.word	0x3f22f984
 800bfa0:	0800cf24 	.word	0x0800cf24
 800bfa4:	2e85a300 	.word	0x2e85a300
 800bfa8:	248d3132 	.word	0x248d3132
 800bfac:	43800000 	.word	0x43800000
 800bfb0:	0800cfa4 	.word	0x0800cfa4

0800bfb4 <__ieee754_sinhf>:
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	ee10 3a10 	vmov	r3, s0
 800bfba:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800bfbe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800bfc2:	ed2d 8b02 	vpush	{d8}
 800bfc6:	eef0 7a40 	vmov.f32	s15, s0
 800bfca:	db06      	blt.n	800bfda <__ieee754_sinhf+0x26>
 800bfcc:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bfd0:	ecbd 8b02 	vpop	{d8}
 800bfd4:	eeb0 0a67 	vmov.f32	s0, s15
 800bfd8:	bd10      	pop	{r4, pc}
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	4b28      	ldr	r3, [pc, #160]	; (800c080 <__ieee754_sinhf+0xcc>)
 800bfde:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800bfe2:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800bfe6:	fe28 8a88 	vselge.f32	s16, s17, s16
 800bfea:	429c      	cmp	r4, r3
 800bfec:	dc2a      	bgt.n	800c044 <__ieee754_sinhf+0x90>
 800bfee:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800bff2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800bff6:	da08      	bge.n	800c00a <__ieee754_sinhf+0x56>
 800bff8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c084 <__ieee754_sinhf+0xd0>
 800bffc:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c000:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800c004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c008:	dce2      	bgt.n	800bfd0 <__ieee754_sinhf+0x1c>
 800c00a:	eeb0 0a67 	vmov.f32	s0, s15
 800c00e:	f7ff fa9d 	bl	800b54c <fabsf>
 800c012:	f000 fbfd 	bl	800c810 <expm1f>
 800c016:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c01a:	bfbb      	ittet	lt
 800c01c:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800c020:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800c024:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800c028:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800c02c:	bfad      	iteet	ge
 800c02e:	eec0 7a28 	vdivge.f32	s15, s0, s17
 800c032:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800c036:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800c03a:	ee77 7a80 	vaddge.f32	s15, s15, s0
 800c03e:	ee67 7a88 	vmul.f32	s15, s15, s16
 800c042:	e7c5      	b.n	800bfd0 <__ieee754_sinhf+0x1c>
 800c044:	4b10      	ldr	r3, [pc, #64]	; (800c088 <__ieee754_sinhf+0xd4>)
 800c046:	429c      	cmp	r4, r3
 800c048:	dc06      	bgt.n	800c058 <__ieee754_sinhf+0xa4>
 800c04a:	f7ff fa7f 	bl	800b54c <fabsf>
 800c04e:	f7ff f9ff 	bl	800b450 <expf>
 800c052:	ee60 7a08 	vmul.f32	s15, s0, s16
 800c056:	e7bb      	b.n	800bfd0 <__ieee754_sinhf+0x1c>
 800c058:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <__ieee754_sinhf+0xd8>)
 800c05a:	429c      	cmp	r4, r3
 800c05c:	dc0a      	bgt.n	800c074 <__ieee754_sinhf+0xc0>
 800c05e:	f7ff fa75 	bl	800b54c <fabsf>
 800c062:	ee20 0a28 	vmul.f32	s0, s0, s17
 800c066:	f7ff f9f3 	bl	800b450 <expf>
 800c06a:	ee68 7a00 	vmul.f32	s15, s16, s0
 800c06e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c072:	e7ad      	b.n	800bfd0 <__ieee754_sinhf+0x1c>
 800c074:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800c084 <__ieee754_sinhf+0xd0>
 800c078:	ee60 7a07 	vmul.f32	s15, s0, s14
 800c07c:	e7a8      	b.n	800bfd0 <__ieee754_sinhf+0x1c>
 800c07e:	bf00      	nop
 800c080:	41afffff 	.word	0x41afffff
 800c084:	7cf0bdc2 	.word	0x7cf0bdc2
 800c088:	42b17217 	.word	0x42b17217
 800c08c:	42b2d4fc 	.word	0x42b2d4fc

0800c090 <__ieee754_sqrtf>:
 800c090:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c094:	4770      	bx	lr
	...

0800c098 <__kernel_rem_pio2f>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	ed2d 8b04 	vpush	{d8-d9}
 800c0a0:	b0d7      	sub	sp, #348	; 0x15c
 800c0a2:	469b      	mov	fp, r3
 800c0a4:	460e      	mov	r6, r1
 800c0a6:	4bbe      	ldr	r3, [pc, #760]	; (800c3a0 <__kernel_rem_pio2f+0x308>)
 800c0a8:	9964      	ldr	r1, [sp, #400]	; 0x190
 800c0aa:	9002      	str	r0, [sp, #8]
 800c0ac:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c0b0:	9865      	ldr	r0, [sp, #404]	; 0x194
 800c0b2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800c3b0 <__kernel_rem_pio2f+0x318>
 800c0b6:	1ed1      	subs	r1, r2, #3
 800c0b8:	2308      	movs	r3, #8
 800c0ba:	fb91 f1f3 	sdiv	r1, r1, r3
 800c0be:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800c0c2:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 800c0c6:	1c4c      	adds	r4, r1, #1
 800c0c8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800c0cc:	eba1 050a 	sub.w	r5, r1, sl
 800c0d0:	aa1a      	add	r2, sp, #104	; 0x68
 800c0d2:	eb09 070a 	add.w	r7, r9, sl
 800c0d6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800c0da:	4696      	mov	lr, r2
 800c0dc:	2300      	movs	r3, #0
 800c0de:	42bb      	cmp	r3, r7
 800c0e0:	dd0f      	ble.n	800c102 <__kernel_rem_pio2f+0x6a>
 800c0e2:	af42      	add	r7, sp, #264	; 0x108
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	454a      	cmp	r2, r9
 800c0e8:	dc27      	bgt.n	800c13a <__kernel_rem_pio2f+0xa2>
 800c0ea:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800c0ee:	eb0b 0302 	add.w	r3, fp, r2
 800c0f2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800c0f6:	9d02      	ldr	r5, [sp, #8]
 800c0f8:	eddf 7aad 	vldr	s15, [pc, #692]	; 800c3b0 <__kernel_rem_pio2f+0x318>
 800c0fc:	f04f 0c00 	mov.w	ip, #0
 800c100:	e015      	b.n	800c12e <__kernel_rem_pio2f+0x96>
 800c102:	42dd      	cmn	r5, r3
 800c104:	bf5d      	ittte	pl
 800c106:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800c10a:	ee07 2a90 	vmovpl	s15, r2
 800c10e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c112:	eef0 7a47 	vmovmi.f32	s15, s14
 800c116:	ecee 7a01 	vstmia	lr!, {s15}
 800c11a:	3301      	adds	r3, #1
 800c11c:	e7df      	b.n	800c0de <__kernel_rem_pio2f+0x46>
 800c11e:	ecf5 6a01 	vldmia	r5!, {s13}
 800c122:	ed33 7a01 	vldmdb	r3!, {s14}
 800c126:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c12a:	f10c 0c01 	add.w	ip, ip, #1
 800c12e:	45d4      	cmp	ip, sl
 800c130:	ddf5      	ble.n	800c11e <__kernel_rem_pio2f+0x86>
 800c132:	ece7 7a01 	vstmia	r7!, {s15}
 800c136:	3201      	adds	r2, #1
 800c138:	e7d5      	b.n	800c0e6 <__kernel_rem_pio2f+0x4e>
 800c13a:	ab06      	add	r3, sp, #24
 800c13c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800c3ac <__kernel_rem_pio2f+0x314>
 800c146:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800c3a8 <__kernel_rem_pio2f+0x310>
 800c14a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800c14e:	9303      	str	r3, [sp, #12]
 800c150:	464d      	mov	r5, r9
 800c152:	ab56      	add	r3, sp, #344	; 0x158
 800c154:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800c158:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c15c:	3f01      	subs	r7, #1
 800c15e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c162:	00bf      	lsls	r7, r7, #2
 800c164:	ab56      	add	r3, sp, #344	; 0x158
 800c166:	19da      	adds	r2, r3, r7
 800c168:	3a4c      	subs	r2, #76	; 0x4c
 800c16a:	2300      	movs	r3, #0
 800c16c:	1ae9      	subs	r1, r5, r3
 800c16e:	2900      	cmp	r1, #0
 800c170:	dc4c      	bgt.n	800c20c <__kernel_rem_pio2f+0x174>
 800c172:	4620      	mov	r0, r4
 800c174:	f000 fc80 	bl	800ca78 <scalbnf>
 800c178:	eeb0 8a40 	vmov.f32	s16, s0
 800c17c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c180:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c184:	f7ff f9ea 	bl	800b55c <floorf>
 800c188:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c18c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c190:	2c00      	cmp	r4, #0
 800c192:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c196:	edcd 7a01 	vstr	s15, [sp, #4]
 800c19a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c19e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c1a2:	dd48      	ble.n	800c236 <__kernel_rem_pio2f+0x19e>
 800c1a4:	1e69      	subs	r1, r5, #1
 800c1a6:	ab06      	add	r3, sp, #24
 800c1a8:	f1c4 0008 	rsb	r0, r4, #8
 800c1ac:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800c1b0:	9a01      	ldr	r2, [sp, #4]
 800c1b2:	fa4c f300 	asr.w	r3, ip, r0
 800c1b6:	441a      	add	r2, r3
 800c1b8:	4083      	lsls	r3, r0
 800c1ba:	9201      	str	r2, [sp, #4]
 800c1bc:	ebac 0203 	sub.w	r2, ip, r3
 800c1c0:	ab06      	add	r3, sp, #24
 800c1c2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800c1c6:	f1c4 0307 	rsb	r3, r4, #7
 800c1ca:	fa42 f803 	asr.w	r8, r2, r3
 800c1ce:	f1b8 0f00 	cmp.w	r8, #0
 800c1d2:	dd41      	ble.n	800c258 <__kernel_rem_pio2f+0x1c0>
 800c1d4:	9b01      	ldr	r3, [sp, #4]
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	3301      	adds	r3, #1
 800c1da:	9301      	str	r3, [sp, #4]
 800c1dc:	4601      	mov	r1, r0
 800c1de:	4285      	cmp	r5, r0
 800c1e0:	dc6d      	bgt.n	800c2be <__kernel_rem_pio2f+0x226>
 800c1e2:	2c00      	cmp	r4, #0
 800c1e4:	dd04      	ble.n	800c1f0 <__kernel_rem_pio2f+0x158>
 800c1e6:	2c01      	cmp	r4, #1
 800c1e8:	d07e      	beq.n	800c2e8 <__kernel_rem_pio2f+0x250>
 800c1ea:	2c02      	cmp	r4, #2
 800c1ec:	f000 8086 	beq.w	800c2fc <__kernel_rem_pio2f+0x264>
 800c1f0:	f1b8 0f02 	cmp.w	r8, #2
 800c1f4:	d130      	bne.n	800c258 <__kernel_rem_pio2f+0x1c0>
 800c1f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c1fa:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c1fe:	b359      	cbz	r1, 800c258 <__kernel_rem_pio2f+0x1c0>
 800c200:	4620      	mov	r0, r4
 800c202:	f000 fc39 	bl	800ca78 <scalbnf>
 800c206:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c20a:	e025      	b.n	800c258 <__kernel_rem_pio2f+0x1c0>
 800c20c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c210:	a806      	add	r0, sp, #24
 800c212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c21a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c21e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c222:	ee10 1a10 	vmov	r1, s0
 800c226:	ed32 0a01 	vldmdb	r2!, {s0}
 800c22a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800c22e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c232:	3301      	adds	r3, #1
 800c234:	e79a      	b.n	800c16c <__kernel_rem_pio2f+0xd4>
 800c236:	d106      	bne.n	800c246 <__kernel_rem_pio2f+0x1ae>
 800c238:	1e6b      	subs	r3, r5, #1
 800c23a:	aa06      	add	r2, sp, #24
 800c23c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c240:	ea4f 2822 	mov.w	r8, r2, asr #8
 800c244:	e7c3      	b.n	800c1ce <__kernel_rem_pio2f+0x136>
 800c246:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c24a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c252:	da31      	bge.n	800c2b8 <__kernel_rem_pio2f+0x220>
 800c254:	f04f 0800 	mov.w	r8, #0
 800c258:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c260:	f040 80a8 	bne.w	800c3b4 <__kernel_rem_pio2f+0x31c>
 800c264:	1e6b      	subs	r3, r5, #1
 800c266:	4618      	mov	r0, r3
 800c268:	2200      	movs	r2, #0
 800c26a:	4548      	cmp	r0, r9
 800c26c:	da4d      	bge.n	800c30a <__kernel_rem_pio2f+0x272>
 800c26e:	2a00      	cmp	r2, #0
 800c270:	f000 8087 	beq.w	800c382 <__kernel_rem_pio2f+0x2ea>
 800c274:	aa06      	add	r2, sp, #24
 800c276:	3c08      	subs	r4, #8
 800c278:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c27c:	2900      	cmp	r1, #0
 800c27e:	f000 808d 	beq.w	800c39c <__kernel_rem_pio2f+0x304>
 800c282:	4620      	mov	r0, r4
 800c284:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c288:	9302      	str	r3, [sp, #8]
 800c28a:	f000 fbf5 	bl	800ca78 <scalbnf>
 800c28e:	9b02      	ldr	r3, [sp, #8]
 800c290:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c3ac <__kernel_rem_pio2f+0x314>
 800c294:	0099      	lsls	r1, r3, #2
 800c296:	aa42      	add	r2, sp, #264	; 0x108
 800c298:	1850      	adds	r0, r2, r1
 800c29a:	1d05      	adds	r5, r0, #4
 800c29c:	461c      	mov	r4, r3
 800c29e:	2c00      	cmp	r4, #0
 800c2a0:	f280 80b8 	bge.w	800c414 <__kernel_rem_pio2f+0x37c>
 800c2a4:	2500      	movs	r5, #0
 800c2a6:	1b5c      	subs	r4, r3, r5
 800c2a8:	2c00      	cmp	r4, #0
 800c2aa:	f2c0 80d8 	blt.w	800c45e <__kernel_rem_pio2f+0x3c6>
 800c2ae:	4f3d      	ldr	r7, [pc, #244]	; (800c3a4 <__kernel_rem_pio2f+0x30c>)
 800c2b0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800c3b0 <__kernel_rem_pio2f+0x318>
 800c2b4:	2400      	movs	r4, #0
 800c2b6:	e0c6      	b.n	800c446 <__kernel_rem_pio2f+0x3ae>
 800c2b8:	f04f 0802 	mov.w	r8, #2
 800c2bc:	e78a      	b.n	800c1d4 <__kernel_rem_pio2f+0x13c>
 800c2be:	ab06      	add	r3, sp, #24
 800c2c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c2c4:	b949      	cbnz	r1, 800c2da <__kernel_rem_pio2f+0x242>
 800c2c6:	b12b      	cbz	r3, 800c2d4 <__kernel_rem_pio2f+0x23c>
 800c2c8:	aa06      	add	r2, sp, #24
 800c2ca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c2ce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	e781      	b.n	800c1de <__kernel_rem_pio2f+0x146>
 800c2da:	aa06      	add	r2, sp, #24
 800c2dc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c2e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	e7f5      	b.n	800c2d4 <__kernel_rem_pio2f+0x23c>
 800c2e8:	1e68      	subs	r0, r5, #1
 800c2ea:	ab06      	add	r3, sp, #24
 800c2ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2f4:	aa06      	add	r2, sp, #24
 800c2f6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c2fa:	e779      	b.n	800c1f0 <__kernel_rem_pio2f+0x158>
 800c2fc:	1e68      	subs	r0, r5, #1
 800c2fe:	ab06      	add	r3, sp, #24
 800c300:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c308:	e7f4      	b.n	800c2f4 <__kernel_rem_pio2f+0x25c>
 800c30a:	a906      	add	r1, sp, #24
 800c30c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c310:	3801      	subs	r0, #1
 800c312:	430a      	orrs	r2, r1
 800c314:	e7a9      	b.n	800c26a <__kernel_rem_pio2f+0x1d2>
 800c316:	f10c 0c01 	add.w	ip, ip, #1
 800c31a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c31e:	2a00      	cmp	r2, #0
 800c320:	d0f9      	beq.n	800c316 <__kernel_rem_pio2f+0x27e>
 800c322:	eb0b 0305 	add.w	r3, fp, r5
 800c326:	aa1a      	add	r2, sp, #104	; 0x68
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	1898      	adds	r0, r3, r2
 800c32c:	3004      	adds	r0, #4
 800c32e:	1c69      	adds	r1, r5, #1
 800c330:	3704      	adds	r7, #4
 800c332:	2200      	movs	r2, #0
 800c334:	4465      	add	r5, ip
 800c336:	9005      	str	r0, [sp, #20]
 800c338:	428d      	cmp	r5, r1
 800c33a:	f6ff af0a 	blt.w	800c152 <__kernel_rem_pio2f+0xba>
 800c33e:	a81a      	add	r0, sp, #104	; 0x68
 800c340:	eb02 0c03 	add.w	ip, r2, r3
 800c344:	4484      	add	ip, r0
 800c346:	9803      	ldr	r0, [sp, #12]
 800c348:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c34c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800c350:	9001      	str	r0, [sp, #4]
 800c352:	ee07 0a90 	vmov	s15, r0
 800c356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c35a:	9805      	ldr	r0, [sp, #20]
 800c35c:	edcc 7a00 	vstr	s15, [ip]
 800c360:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c3b0 <__kernel_rem_pio2f+0x318>
 800c364:	eb00 0802 	add.w	r8, r0, r2
 800c368:	f04f 0c00 	mov.w	ip, #0
 800c36c:	45d4      	cmp	ip, sl
 800c36e:	dd0c      	ble.n	800c38a <__kernel_rem_pio2f+0x2f2>
 800c370:	eb02 0c07 	add.w	ip, r2, r7
 800c374:	a842      	add	r0, sp, #264	; 0x108
 800c376:	4484      	add	ip, r0
 800c378:	edcc 7a01 	vstr	s15, [ip, #4]
 800c37c:	3101      	adds	r1, #1
 800c37e:	3204      	adds	r2, #4
 800c380:	e7da      	b.n	800c338 <__kernel_rem_pio2f+0x2a0>
 800c382:	9b04      	ldr	r3, [sp, #16]
 800c384:	f04f 0c01 	mov.w	ip, #1
 800c388:	e7c7      	b.n	800c31a <__kernel_rem_pio2f+0x282>
 800c38a:	ecfe 6a01 	vldmia	lr!, {s13}
 800c38e:	ed38 7a01 	vldmdb	r8!, {s14}
 800c392:	f10c 0c01 	add.w	ip, ip, #1
 800c396:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c39a:	e7e7      	b.n	800c36c <__kernel_rem_pio2f+0x2d4>
 800c39c:	3b01      	subs	r3, #1
 800c39e:	e769      	b.n	800c274 <__kernel_rem_pio2f+0x1dc>
 800c3a0:	0800d2e8 	.word	0x0800d2e8
 800c3a4:	0800d2bc 	.word	0x0800d2bc
 800c3a8:	43800000 	.word	0x43800000
 800c3ac:	3b800000 	.word	0x3b800000
 800c3b0:	00000000 	.word	0x00000000
 800c3b4:	4260      	negs	r0, r4
 800c3b6:	eeb0 0a48 	vmov.f32	s0, s16
 800c3ba:	f000 fb5d 	bl	800ca78 <scalbnf>
 800c3be:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800c3a8 <__kernel_rem_pio2f+0x310>
 800c3c2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ca:	db1a      	blt.n	800c402 <__kernel_rem_pio2f+0x36a>
 800c3cc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c3ac <__kernel_rem_pio2f+0x314>
 800c3d0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c3d4:	aa06      	add	r2, sp, #24
 800c3d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3da:	a906      	add	r1, sp, #24
 800c3dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3e0:	3408      	adds	r4, #8
 800c3e2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c3e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c3ee:	ee10 3a10 	vmov	r3, s0
 800c3f2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c3f6:	1c6b      	adds	r3, r5, #1
 800c3f8:	ee17 2a90 	vmov	r2, s15
 800c3fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c400:	e73f      	b.n	800c282 <__kernel_rem_pio2f+0x1ea>
 800c402:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c406:	aa06      	add	r2, sp, #24
 800c408:	ee10 3a10 	vmov	r3, s0
 800c40c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c410:	462b      	mov	r3, r5
 800c412:	e736      	b.n	800c282 <__kernel_rem_pio2f+0x1ea>
 800c414:	aa06      	add	r2, sp, #24
 800c416:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800c41a:	9202      	str	r2, [sp, #8]
 800c41c:	ee07 2a90 	vmov	s15, r2
 800c420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c424:	3c01      	subs	r4, #1
 800c426:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c42a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c42e:	ed65 7a01 	vstmdb	r5!, {s15}
 800c432:	e734      	b.n	800c29e <__kernel_rem_pio2f+0x206>
 800c434:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800c438:	ecf7 6a01 	vldmia	r7!, {s13}
 800c43c:	ed9c 7a00 	vldr	s14, [ip]
 800c440:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c444:	3401      	adds	r4, #1
 800c446:	454c      	cmp	r4, r9
 800c448:	dc01      	bgt.n	800c44e <__kernel_rem_pio2f+0x3b6>
 800c44a:	42a5      	cmp	r5, r4
 800c44c:	daf2      	bge.n	800c434 <__kernel_rem_pio2f+0x39c>
 800c44e:	aa56      	add	r2, sp, #344	; 0x158
 800c450:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800c454:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800c458:	3501      	adds	r5, #1
 800c45a:	3804      	subs	r0, #4
 800c45c:	e723      	b.n	800c2a6 <__kernel_rem_pio2f+0x20e>
 800c45e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c460:	2a03      	cmp	r2, #3
 800c462:	d84d      	bhi.n	800c500 <__kernel_rem_pio2f+0x468>
 800c464:	e8df f002 	tbb	[pc, r2]
 800c468:	021f1f3e 	.word	0x021f1f3e
 800c46c:	aa56      	add	r2, sp, #344	; 0x158
 800c46e:	4411      	add	r1, r2
 800c470:	399c      	subs	r1, #156	; 0x9c
 800c472:	4608      	mov	r0, r1
 800c474:	461c      	mov	r4, r3
 800c476:	2c00      	cmp	r4, #0
 800c478:	dc5f      	bgt.n	800c53a <__kernel_rem_pio2f+0x4a2>
 800c47a:	4608      	mov	r0, r1
 800c47c:	461c      	mov	r4, r3
 800c47e:	2c01      	cmp	r4, #1
 800c480:	dc6b      	bgt.n	800c55a <__kernel_rem_pio2f+0x4c2>
 800c482:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800c3b0 <__kernel_rem_pio2f+0x318>
 800c486:	2b01      	cmp	r3, #1
 800c488:	dc77      	bgt.n	800c57a <__kernel_rem_pio2f+0x4e2>
 800c48a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c48e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c492:	f1b8 0f00 	cmp.w	r8, #0
 800c496:	d176      	bne.n	800c586 <__kernel_rem_pio2f+0x4ee>
 800c498:	edc6 6a00 	vstr	s13, [r6]
 800c49c:	ed86 7a01 	vstr	s14, [r6, #4]
 800c4a0:	edc6 7a02 	vstr	s15, [r6, #8]
 800c4a4:	e02c      	b.n	800c500 <__kernel_rem_pio2f+0x468>
 800c4a6:	aa56      	add	r2, sp, #344	; 0x158
 800c4a8:	4411      	add	r1, r2
 800c4aa:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800c3b0 <__kernel_rem_pio2f+0x318>
 800c4ae:	399c      	subs	r1, #156	; 0x9c
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	da32      	bge.n	800c51c <__kernel_rem_pio2f+0x484>
 800c4b6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ba:	d035      	beq.n	800c528 <__kernel_rem_pio2f+0x490>
 800c4bc:	eef1 7a47 	vneg.f32	s15, s14
 800c4c0:	edc6 7a00 	vstr	s15, [r6]
 800c4c4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c4c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4cc:	a82f      	add	r0, sp, #188	; 0xbc
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	428b      	cmp	r3, r1
 800c4d2:	da2c      	bge.n	800c52e <__kernel_rem_pio2f+0x496>
 800c4d4:	f1b8 0f00 	cmp.w	r8, #0
 800c4d8:	d001      	beq.n	800c4de <__kernel_rem_pio2f+0x446>
 800c4da:	eef1 7a67 	vneg.f32	s15, s15
 800c4de:	edc6 7a01 	vstr	s15, [r6, #4]
 800c4e2:	e00d      	b.n	800c500 <__kernel_rem_pio2f+0x468>
 800c4e4:	aa56      	add	r2, sp, #344	; 0x158
 800c4e6:	4411      	add	r1, r2
 800c4e8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c3b0 <__kernel_rem_pio2f+0x318>
 800c4ec:	399c      	subs	r1, #156	; 0x9c
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	da0e      	bge.n	800c510 <__kernel_rem_pio2f+0x478>
 800c4f2:	f1b8 0f00 	cmp.w	r8, #0
 800c4f6:	d001      	beq.n	800c4fc <__kernel_rem_pio2f+0x464>
 800c4f8:	eef1 7a67 	vneg.f32	s15, s15
 800c4fc:	edc6 7a00 	vstr	s15, [r6]
 800c500:	9b01      	ldr	r3, [sp, #4]
 800c502:	f003 0007 	and.w	r0, r3, #7
 800c506:	b057      	add	sp, #348	; 0x15c
 800c508:	ecbd 8b04 	vpop	{d8-d9}
 800c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c510:	ed31 7a01 	vldmdb	r1!, {s14}
 800c514:	3b01      	subs	r3, #1
 800c516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c51a:	e7e8      	b.n	800c4ee <__kernel_rem_pio2f+0x456>
 800c51c:	ed71 7a01 	vldmdb	r1!, {s15}
 800c520:	3801      	subs	r0, #1
 800c522:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c526:	e7c4      	b.n	800c4b2 <__kernel_rem_pio2f+0x41a>
 800c528:	eef0 7a47 	vmov.f32	s15, s14
 800c52c:	e7c8      	b.n	800c4c0 <__kernel_rem_pio2f+0x428>
 800c52e:	ecb0 7a01 	vldmia	r0!, {s14}
 800c532:	3101      	adds	r1, #1
 800c534:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c538:	e7ca      	b.n	800c4d0 <__kernel_rem_pio2f+0x438>
 800c53a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c53e:	ed70 6a01 	vldmdb	r0!, {s13}
 800c542:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c546:	3c01      	subs	r4, #1
 800c548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c54c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c554:	edc0 7a00 	vstr	s15, [r0]
 800c558:	e78d      	b.n	800c476 <__kernel_rem_pio2f+0x3de>
 800c55a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c55e:	ed70 6a01 	vldmdb	r0!, {s13}
 800c562:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c566:	3c01      	subs	r4, #1
 800c568:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c56c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c574:	edc0 7a00 	vstr	s15, [r0]
 800c578:	e781      	b.n	800c47e <__kernel_rem_pio2f+0x3e6>
 800c57a:	ed31 7a01 	vldmdb	r1!, {s14}
 800c57e:	3b01      	subs	r3, #1
 800c580:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c584:	e77f      	b.n	800c486 <__kernel_rem_pio2f+0x3ee>
 800c586:	eef1 6a66 	vneg.f32	s13, s13
 800c58a:	eeb1 7a47 	vneg.f32	s14, s14
 800c58e:	edc6 6a00 	vstr	s13, [r6]
 800c592:	ed86 7a01 	vstr	s14, [r6, #4]
 800c596:	eef1 7a67 	vneg.f32	s15, s15
 800c59a:	e781      	b.n	800c4a0 <__kernel_rem_pio2f+0x408>

0800c59c <__kernel_tanf>:
 800c59c:	b508      	push	{r3, lr}
 800c59e:	ee10 3a10 	vmov	r3, s0
 800c5a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c5a6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800c5aa:	eef0 7a40 	vmov.f32	s15, s0
 800c5ae:	da17      	bge.n	800c5e0 <__kernel_tanf+0x44>
 800c5b0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800c5b4:	ee17 1a10 	vmov	r1, s14
 800c5b8:	bb41      	cbnz	r1, 800c60c <__kernel_tanf+0x70>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	d108      	bne.n	800c5d2 <__kernel_tanf+0x36>
 800c5c0:	f7fe ffc4 	bl	800b54c <fabsf>
 800c5c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c5cc:	eeb0 0a67 	vmov.f32	s0, s15
 800c5d0:	bd08      	pop	{r3, pc}
 800c5d2:	2801      	cmp	r0, #1
 800c5d4:	d0fa      	beq.n	800c5cc <__kernel_tanf+0x30>
 800c5d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c5da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c5de:	e7f5      	b.n	800c5cc <__kernel_tanf+0x30>
 800c5e0:	494e      	ldr	r1, [pc, #312]	; (800c71c <__kernel_tanf+0x180>)
 800c5e2:	428a      	cmp	r2, r1
 800c5e4:	dd12      	ble.n	800c60c <__kernel_tanf+0x70>
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800c720 <__kernel_tanf+0x184>
 800c5ec:	bfb8      	it	lt
 800c5ee:	eef1 7a40 	vneglt.f32	s15, s0
 800c5f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5f6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800c724 <__kernel_tanf+0x188>
 800c5fa:	bfb8      	it	lt
 800c5fc:	eef1 0a60 	vneglt.f32	s1, s1
 800c600:	ee77 0a60 	vsub.f32	s1, s14, s1
 800c604:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800c608:	eddf 0a47 	vldr	s1, [pc, #284]	; 800c728 <__kernel_tanf+0x18c>
 800c60c:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800c72c <__kernel_tanf+0x190>
 800c610:	eddf 5a47 	vldr	s11, [pc, #284]	; 800c730 <__kernel_tanf+0x194>
 800c614:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800c734 <__kernel_tanf+0x198>
 800c618:	4940      	ldr	r1, [pc, #256]	; (800c71c <__kernel_tanf+0x180>)
 800c61a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c61e:	428a      	cmp	r2, r1
 800c620:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c624:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c628:	eee7 5a06 	vfma.f32	s11, s14, s12
 800c62c:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800c738 <__kernel_tanf+0x19c>
 800c630:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c634:	eddf 5a41 	vldr	s11, [pc, #260]	; 800c73c <__kernel_tanf+0x1a0>
 800c638:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c63c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800c740 <__kernel_tanf+0x1a4>
 800c640:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c644:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c744 <__kernel_tanf+0x1a8>
 800c648:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c64c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800c748 <__kernel_tanf+0x1ac>
 800c650:	eea7 6a05 	vfma.f32	s12, s14, s10
 800c654:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800c74c <__kernel_tanf+0x1b0>
 800c658:	eea6 5a07 	vfma.f32	s10, s12, s14
 800c65c:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800c750 <__kernel_tanf+0x1b4>
 800c660:	eea5 6a07 	vfma.f32	s12, s10, s14
 800c664:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800c754 <__kernel_tanf+0x1b8>
 800c668:	eea6 5a07 	vfma.f32	s10, s12, s14
 800c66c:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800c758 <__kernel_tanf+0x1bc>
 800c670:	eea5 6a07 	vfma.f32	s12, s10, s14
 800c674:	eeb0 7a46 	vmov.f32	s14, s12
 800c678:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c67c:	eeb0 6a60 	vmov.f32	s12, s1
 800c680:	eea7 6a24 	vfma.f32	s12, s14, s9
 800c684:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800c75c <__kernel_tanf+0x1c0>
 800c688:	eee6 0a26 	vfma.f32	s1, s12, s13
 800c68c:	eee4 0a87 	vfma.f32	s1, s9, s14
 800c690:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800c694:	dd1d      	ble.n	800c6d2 <__kernel_tanf+0x136>
 800c696:	ee07 0a10 	vmov	s14, r0
 800c69a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c69e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800c6a2:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c6a6:	179b      	asrs	r3, r3, #30
 800c6a8:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800c6ac:	f003 0302 	and.w	r3, r3, #2
 800c6b0:	f1c3 0301 	rsb	r3, r3, #1
 800c6b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c6b8:	ee76 0a60 	vsub.f32	s1, s12, s1
 800c6bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c6c0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c6c4:	ee07 3a90 	vmov	s15, r3
 800c6c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6d0:	e77c      	b.n	800c5cc <__kernel_tanf+0x30>
 800c6d2:	2801      	cmp	r0, #1
 800c6d4:	d01f      	beq.n	800c716 <__kernel_tanf+0x17a>
 800c6d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c6da:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800c6de:	4b20      	ldr	r3, [pc, #128]	; (800c760 <__kernel_tanf+0x1c4>)
 800c6e0:	ee16 2a90 	vmov	r2, s13
 800c6e4:	401a      	ands	r2, r3
 800c6e6:	ee06 2a10 	vmov	s12, r2
 800c6ea:	ee15 2a90 	vmov	r2, s11
 800c6ee:	4013      	ands	r3, r2
 800c6f0:	ee07 3a10 	vmov	s14, r3
 800c6f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c6fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c700:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c704:	eef0 7a66 	vmov.f32	s15, s13
 800c708:	eee7 7a20 	vfma.f32	s15, s14, s1
 800c70c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c710:	eef0 7a47 	vmov.f32	s15, s14
 800c714:	e75a      	b.n	800c5cc <__kernel_tanf+0x30>
 800c716:	eef0 7a66 	vmov.f32	s15, s13
 800c71a:	e757      	b.n	800c5cc <__kernel_tanf+0x30>
 800c71c:	3f2ca13f 	.word	0x3f2ca13f
 800c720:	3f490fda 	.word	0x3f490fda
 800c724:	33222168 	.word	0x33222168
 800c728:	00000000 	.word	0x00000000
 800c72c:	37d95384 	.word	0x37d95384
 800c730:	3895c07a 	.word	0x3895c07a
 800c734:	b79bae5f 	.word	0xb79bae5f
 800c738:	398137b9 	.word	0x398137b9
 800c73c:	3abede48 	.word	0x3abede48
 800c740:	3c11371f 	.word	0x3c11371f
 800c744:	3d5d0dd1 	.word	0x3d5d0dd1
 800c748:	38a3f445 	.word	0x38a3f445
 800c74c:	3a1a26c8 	.word	0x3a1a26c8
 800c750:	3b6b6916 	.word	0x3b6b6916
 800c754:	3cb327a4 	.word	0x3cb327a4
 800c758:	3e088889 	.word	0x3e088889
 800c75c:	3eaaaaab 	.word	0x3eaaaaab
 800c760:	fffff000 	.word	0xfffff000

0800c764 <with_errnof>:
 800c764:	b510      	push	{r4, lr}
 800c766:	ed2d 8b02 	vpush	{d8}
 800c76a:	eeb0 8a40 	vmov.f32	s16, s0
 800c76e:	4604      	mov	r4, r0
 800c770:	f7fe fe3c 	bl	800b3ec <__errno>
 800c774:	eeb0 0a48 	vmov.f32	s0, s16
 800c778:	ecbd 8b02 	vpop	{d8}
 800c77c:	6004      	str	r4, [r0, #0]
 800c77e:	bd10      	pop	{r4, pc}

0800c780 <xflowf>:
 800c780:	b130      	cbz	r0, 800c790 <xflowf+0x10>
 800c782:	eef1 7a40 	vneg.f32	s15, s0
 800c786:	2022      	movs	r0, #34	; 0x22
 800c788:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c78c:	f7ff bfea 	b.w	800c764 <with_errnof>
 800c790:	eef0 7a40 	vmov.f32	s15, s0
 800c794:	e7f7      	b.n	800c786 <xflowf+0x6>
	...

0800c798 <__math_uflowf>:
 800c798:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c7a0 <__math_uflowf+0x8>
 800c79c:	f7ff bff0 	b.w	800c780 <xflowf>
 800c7a0:	10000000 	.word	0x10000000

0800c7a4 <__math_may_uflowf>:
 800c7a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c7ac <__math_may_uflowf+0x8>
 800c7a8:	f7ff bfea 	b.w	800c780 <xflowf>
 800c7ac:	1a200000 	.word	0x1a200000

0800c7b0 <__math_oflowf>:
 800c7b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c7b8 <__math_oflowf+0x8>
 800c7b4:	f7ff bfe4 	b.w	800c780 <xflowf>
 800c7b8:	70000000 	.word	0x70000000

0800c7bc <__math_divzerof>:
 800c7bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c7c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800c7ca:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c7d8 <__math_divzerof+0x1c>
 800c7ce:	2022      	movs	r0, #34	; 0x22
 800c7d0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c7d4:	f7ff bfc6 	b.w	800c764 <with_errnof>
 800c7d8:	00000000 	.word	0x00000000

0800c7dc <__math_invalidf>:
 800c7dc:	eef0 7a40 	vmov.f32	s15, s0
 800c7e0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c7e4:	eef4 7a67 	vcmp.f32	s15, s15
 800c7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ec:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c7f0:	d602      	bvs.n	800c7f8 <__math_invalidf+0x1c>
 800c7f2:	2021      	movs	r0, #33	; 0x21
 800c7f4:	f7ff bfb6 	b.w	800c764 <with_errnof>
 800c7f8:	4770      	bx	lr

0800c7fa <matherr>:
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	4770      	bx	lr
	...

0800c800 <nan>:
 800c800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c808 <nan+0x8>
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	00000000 	.word	0x00000000
 800c80c:	7ff80000 	.word	0x7ff80000

0800c810 <expm1f>:
 800c810:	ee10 2a10 	vmov	r2, s0
 800c814:	4984      	ldr	r1, [pc, #528]	; (800ca28 <expm1f+0x218>)
 800c816:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c81a:	428b      	cmp	r3, r1
 800c81c:	d923      	bls.n	800c866 <expm1f+0x56>
 800c81e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c822:	d902      	bls.n	800c82a <expm1f+0x1a>
 800c824:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c828:	4770      	bx	lr
 800c82a:	d105      	bne.n	800c838 <expm1f+0x28>
 800c82c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c830:	2a00      	cmp	r2, #0
 800c832:	fe20 0a27 	vselge.f32	s0, s0, s15
 800c836:	4770      	bx	lr
 800c838:	2a00      	cmp	r2, #0
 800c83a:	db08      	blt.n	800c84e <expm1f+0x3e>
 800c83c:	4a7b      	ldr	r2, [pc, #492]	; (800ca2c <expm1f+0x21c>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	f240 80ea 	bls.w	800ca18 <expm1f+0x208>
 800c844:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800ca30 <expm1f+0x220>
 800c848:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c84c:	4770      	bx	lr
 800c84e:	eddf 7a79 	vldr	s15, [pc, #484]	; 800ca34 <expm1f+0x224>
 800c852:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c856:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c85e:	d554      	bpl.n	800c90a <expm1f+0xfa>
 800c860:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c864:	4770      	bx	lr
 800c866:	4974      	ldr	r1, [pc, #464]	; (800ca38 <expm1f+0x228>)
 800c868:	428b      	cmp	r3, r1
 800c86a:	d96c      	bls.n	800c946 <expm1f+0x136>
 800c86c:	4973      	ldr	r1, [pc, #460]	; (800ca3c <expm1f+0x22c>)
 800c86e:	428b      	cmp	r3, r1
 800c870:	d84b      	bhi.n	800c90a <expm1f+0xfa>
 800c872:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ca40 <expm1f+0x230>
 800c876:	2a00      	cmp	r2, #0
 800c878:	bfa7      	ittee	ge
 800c87a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800c87e:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800ca44 <expm1f+0x234>
 800c882:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800ca48 <expm1f+0x238>
 800c886:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800c88a:	bfac      	ite	ge
 800c88c:	2301      	movge	r3, #1
 800c88e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c892:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c896:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c89a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c89e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c8a2:	ee20 5a25 	vmul.f32	s10, s0, s11
 800c8a6:	eddf 6a69 	vldr	s13, [pc, #420]	; 800ca4c <expm1f+0x23c>
 800c8aa:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800ca50 <expm1f+0x240>
 800c8ae:	ee20 7a05 	vmul.f32	s14, s0, s10
 800c8b2:	eea7 6a26 	vfma.f32	s12, s14, s13
 800c8b6:	eddf 6a67 	vldr	s13, [pc, #412]	; 800ca54 <expm1f+0x244>
 800c8ba:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c8be:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800ca58 <expm1f+0x248>
 800c8c2:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c8c6:	eddf 6a65 	vldr	s13, [pc, #404]	; 800ca5c <expm1f+0x24c>
 800c8ca:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c8ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c8d2:	eef0 4a46 	vmov.f32	s9, s12
 800c8d6:	eee6 4a87 	vfma.f32	s9, s13, s14
 800c8da:	eef0 6a64 	vmov.f32	s13, s9
 800c8de:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800c8e2:	eee5 4a66 	vfms.f32	s9, s10, s13
 800c8e6:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800c8ea:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800c8ee:	eee0 6a64 	vfms.f32	s13, s0, s9
 800c8f2:	eef0 4a66 	vmov.f32	s9, s13
 800c8f6:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800c8fa:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c8fe:	bb83      	cbnz	r3, 800c962 <expm1f+0x152>
 800c900:	eef0 7a47 	vmov.f32	s15, s14
 800c904:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800c908:	e026      	b.n	800c958 <expm1f+0x148>
 800c90a:	eddf 7a55 	vldr	s15, [pc, #340]	; 800ca60 <expm1f+0x250>
 800c90e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c912:	ee20 7a27 	vmul.f32	s14, s0, s15
 800c916:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800c91a:	2a00      	cmp	r2, #0
 800c91c:	fe66 7aa7 	vselge.f32	s15, s13, s15
 800c920:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c924:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ca40 <expm1f+0x230>
 800c928:	eddf 6a46 	vldr	s13, [pc, #280]	; 800ca44 <expm1f+0x234>
 800c92c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c930:	ee17 3a90 	vmov	r3, s15
 800c934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c938:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c93c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c940:	eeb0 7a40 	vmov.f32	s14, s0
 800c944:	e7a5      	b.n	800c892 <expm1f+0x82>
 800c946:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800c94a:	d208      	bcs.n	800c95e <expm1f+0x14e>
 800c94c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800ca30 <expm1f+0x220>
 800c950:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c954:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800c958:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c95c:	4770      	bx	lr
 800c95e:	2300      	movs	r3, #0
 800c960:	e79d      	b.n	800c89e <expm1f+0x8e>
 800c962:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800c96c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c970:	d106      	bne.n	800c980 <expm1f+0x170>
 800c972:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c976:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800c97a:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800c97e:	4770      	bx	lr
 800c980:	2b01      	cmp	r3, #1
 800c982:	d118      	bne.n	800c9b6 <expm1f+0x1a6>
 800c984:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800c988:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c990:	bf41      	itttt	mi
 800c992:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800c996:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800c99a:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800c99e:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800c9a2:	bf5f      	itttt	pl
 800c9a4:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800c9a8:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800c9ac:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800c9b0:	eeb0 0a46 	vmovpl.f32	s0, s12
 800c9b4:	4770      	bx	lr
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	2a39      	cmp	r2, #57	; 0x39
 800c9ba:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800c9be:	d90b      	bls.n	800c9d8 <expm1f+0x1c8>
 800c9c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c9c4:	ee36 0a40 	vsub.f32	s0, s12, s0
 800c9c8:	ee10 3a10 	vmov	r3, s0
 800c9cc:	440b      	add	r3, r1
 800c9ce:	ee00 3a10 	vmov	s0, r3
 800c9d2:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c9d6:	4770      	bx	lr
 800c9d8:	2b16      	cmp	r3, #22
 800c9da:	dc11      	bgt.n	800ca00 <expm1f+0x1f0>
 800c9dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9e0:	fa42 f303 	asr.w	r3, r2, r3
 800c9e4:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800c9e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c9ec:	ee07 3a90 	vmov	s15, r3
 800c9f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c9f4:	ee10 3a10 	vmov	r3, s0
 800c9f8:	440b      	add	r3, r1
 800c9fa:	ee00 3a10 	vmov	s0, r3
 800c9fe:	4770      	bx	lr
 800ca00:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ca04:	05db      	lsls	r3, r3, #23
 800ca06:	ee07 3a10 	vmov	s14, r3
 800ca0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca12:	ee30 0a06 	vadd.f32	s0, s0, s12
 800ca16:	e7ed      	b.n	800c9f4 <expm1f+0x1e4>
 800ca18:	eddf 7a11 	vldr	s15, [pc, #68]	; 800ca60 <expm1f+0x250>
 800ca1c:	ee20 7a27 	vmul.f32	s14, s0, s15
 800ca20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca24:	e77c      	b.n	800c920 <expm1f+0x110>
 800ca26:	bf00      	nop
 800ca28:	4195b843 	.word	0x4195b843
 800ca2c:	42b17217 	.word	0x42b17217
 800ca30:	7149f2ca 	.word	0x7149f2ca
 800ca34:	0da24260 	.word	0x0da24260
 800ca38:	3eb17218 	.word	0x3eb17218
 800ca3c:	3f851591 	.word	0x3f851591
 800ca40:	3f317180 	.word	0x3f317180
 800ca44:	3717f7d1 	.word	0x3717f7d1
 800ca48:	b717f7d1 	.word	0xb717f7d1
 800ca4c:	b457edbb 	.word	0xb457edbb
 800ca50:	36867e54 	.word	0x36867e54
 800ca54:	b8a670cd 	.word	0xb8a670cd
 800ca58:	3ad00d01 	.word	0x3ad00d01
 800ca5c:	bd088889 	.word	0xbd088889
 800ca60:	3fb8aa3b 	.word	0x3fb8aa3b

0800ca64 <finitef>:
 800ca64:	ee10 3a10 	vmov	r3, s0
 800ca68:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800ca6c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ca70:	bfac      	ite	ge
 800ca72:	2000      	movge	r0, #0
 800ca74:	2001      	movlt	r0, #1
 800ca76:	4770      	bx	lr

0800ca78 <scalbnf>:
 800ca78:	b508      	push	{r3, lr}
 800ca7a:	ee10 2a10 	vmov	r2, s0
 800ca7e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800ca82:	ed2d 8b02 	vpush	{d8}
 800ca86:	eef0 0a40 	vmov.f32	s1, s0
 800ca8a:	d004      	beq.n	800ca96 <scalbnf+0x1e>
 800ca8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca90:	d306      	bcc.n	800caa0 <scalbnf+0x28>
 800ca92:	ee70 0a00 	vadd.f32	s1, s0, s0
 800ca96:	ecbd 8b02 	vpop	{d8}
 800ca9a:	eeb0 0a60 	vmov.f32	s0, s1
 800ca9e:	bd08      	pop	{r3, pc}
 800caa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800caa4:	d21c      	bcs.n	800cae0 <scalbnf+0x68>
 800caa6:	4b1f      	ldr	r3, [pc, #124]	; (800cb24 <scalbnf+0xac>)
 800caa8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cb28 <scalbnf+0xb0>
 800caac:	4298      	cmp	r0, r3
 800caae:	ee60 0a27 	vmul.f32	s1, s0, s15
 800cab2:	db10      	blt.n	800cad6 <scalbnf+0x5e>
 800cab4:	ee10 2a90 	vmov	r2, s1
 800cab8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800cabc:	3b19      	subs	r3, #25
 800cabe:	4403      	add	r3, r0
 800cac0:	2bfe      	cmp	r3, #254	; 0xfe
 800cac2:	dd0f      	ble.n	800cae4 <scalbnf+0x6c>
 800cac4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800cb2c <scalbnf+0xb4>
 800cac8:	eeb0 0a48 	vmov.f32	s0, s16
 800cacc:	f000 f834 	bl	800cb38 <copysignf>
 800cad0:	ee60 0a08 	vmul.f32	s1, s0, s16
 800cad4:	e7df      	b.n	800ca96 <scalbnf+0x1e>
 800cad6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800cb30 <scalbnf+0xb8>
 800cada:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cade:	e7da      	b.n	800ca96 <scalbnf+0x1e>
 800cae0:	0ddb      	lsrs	r3, r3, #23
 800cae2:	e7ec      	b.n	800cabe <scalbnf+0x46>
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	dd06      	ble.n	800caf6 <scalbnf+0x7e>
 800cae8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800caec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800caf0:	ee00 3a90 	vmov	s1, r3
 800caf4:	e7cf      	b.n	800ca96 <scalbnf+0x1e>
 800caf6:	f113 0f16 	cmn.w	r3, #22
 800cafa:	da06      	bge.n	800cb0a <scalbnf+0x92>
 800cafc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cb00:	4298      	cmp	r0, r3
 800cb02:	dcdf      	bgt.n	800cac4 <scalbnf+0x4c>
 800cb04:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800cb30 <scalbnf+0xb8>
 800cb08:	e7de      	b.n	800cac8 <scalbnf+0x50>
 800cb0a:	3319      	adds	r3, #25
 800cb0c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800cb10:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800cb14:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cb34 <scalbnf+0xbc>
 800cb18:	ee07 3a10 	vmov	s14, r3
 800cb1c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800cb20:	e7b9      	b.n	800ca96 <scalbnf+0x1e>
 800cb22:	bf00      	nop
 800cb24:	ffff3cb0 	.word	0xffff3cb0
 800cb28:	4c000000 	.word	0x4c000000
 800cb2c:	7149f2ca 	.word	0x7149f2ca
 800cb30:	0da24260 	.word	0x0da24260
 800cb34:	33000000 	.word	0x33000000

0800cb38 <copysignf>:
 800cb38:	ee10 3a10 	vmov	r3, s0
 800cb3c:	ee10 2a90 	vmov	r2, s1
 800cb40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb44:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	ee00 3a10 	vmov	s0, r3
 800cb4e:	4770      	bx	lr

0800cb50 <_init>:
 800cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb52:	bf00      	nop
 800cb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb56:	bc08      	pop	{r3}
 800cb58:	469e      	mov	lr, r3
 800cb5a:	4770      	bx	lr

0800cb5c <_fini>:
 800cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5e:	bf00      	nop
 800cb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb62:	bc08      	pop	{r3}
 800cb64:	469e      	mov	lr, r3
 800cb66:	4770      	bx	lr
